name: üìù Generate Changelog

on:
  workflow_dispatch: # Manual trigger
  pull_request:
    branches: [ main ]
    paths:
      - 'scripts/generate-changelog.sh'
      - 'scripts/translation-mappings.json'
      - '.github/workflows/generate-changelog.yml'

jobs:
  generate-changelog:
    name: üìù Generate and Upload Changelog
    runs-on: ubuntu-latest
    
    permissions:
      contents: read
      issues: read
      pull-requests: read
    
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Need full history for git tags and commits

      - name: üìù Generate Changelog
        run: |
          chmod +x ./scripts/generate-changelog.sh
          ./scripts/generate-changelog.sh
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: üåê Translate Changelog to Czech
        run: |
          echo "üìã Translating changelog to Czech..."
          
          RESPONSE=$(curl -s https://api.openai.com/v1/chat/completions \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer ${{ secrets.OPENAI_API_KEY }}" \
            -d '{
              "model": "gpt-4o-mini",
              "messages": [
                {"role": "system", "content": "You are a professional translator specializing in technical documentation. Translate from English to Czech while preserving technical terms and JSON structure."},
                {"role": "user", "content": "P≈ôelo≈æ v≈°echny hodnoty v JSONu z angliƒçtiny do ƒçe≈°tiny. Zachovej strukturu JSON a technick√© term√≠ny. N√°vratov√° hodnota mus√≠ b√Ωt validn√≠ JSON."},
                {"role": "user", "content": "'"$(cat frontend/public/changelog.json)"'"}
              ]
            }')
          
          # Extract the translated content and save it
          echo "$RESPONSE" | jq -r '.choices[0].message.content' > frontend/public/changelog.cs.json
          
          # Validate the translated JSON
          if ! jq empty frontend/public/changelog.cs.json; then
            echo "‚ùå Translated changelog.cs.json is not valid JSON!"
            echo "Response was:"
            echo "$RESPONSE"
            exit 1
          fi
          
          echo "‚úÖ Czech translation generated successfully!"
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}

      - name: üìä Changelog Summary
        run: |
          echo "## üìù Generated Changelog Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **English File**: \`frontend/public/changelog.json\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Czech File**: \`frontend/public/changelog.cs.json\`" >> $GITHUB_STEP_SUMMARY
          echo "- **English File Size**: $(ls -lh frontend/public/changelog.json | awk '{print $5}')" >> $GITHUB_STEP_SUMMARY
          
          if [ -f frontend/public/changelog.cs.json ]; then
            echo "- **Czech File Size**: $(ls -lh frontend/public/changelog.cs.json | awk '{print $5}')" >> $GITHUB_STEP_SUMMARY
          fi
          
          if command -v jq >/dev/null 2>&1; then
            CURRENT_VERSION=$(jq -r '.currentVersion' frontend/public/changelog.json)
            VERSION_COUNT=$(jq -r '.versions | length' frontend/public/changelog.json)
            echo "- **Current Version**: \`$CURRENT_VERSION\`" >> $GITHUB_STEP_SUMMARY
            echo "- **Total Versions**: \`$VERSION_COUNT\`" >> $GITHUB_STEP_SUMMARY
            
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### üìã Latest Version Changes (English):" >> $GITHUB_STEP_SUMMARY
            jq -r '.versions[0].changes[] | "- **" + .type + "**: " + .title' frontend/public/changelog.json >> $GITHUB_STEP_SUMMARY
            
            if [ -f frontend/public/changelog.cs.json ]; then
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "### üìã Latest Version Changes (Czech):" >> $GITHUB_STEP_SUMMARY
              jq -r '.versions[0].changes[] | "- **" + .type + "**: " + .title' frontend/public/changelog.cs.json >> $GITHUB_STEP_SUMMARY
            fi
          fi

      - name: üì§ Upload Changelog Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: changelog-preview
          path: |
            frontend/public/changelog.json
            frontend/public/changelog.cs.json
          retention-days: 7

      - name: üìã Validation Check
        run: |
          # Validate JSON format
          if ! jq empty frontend/public/changelog.json; then
            echo "‚ùå Generated changelog.json is not valid JSON!"
            exit 1
          fi
          
          # Check required fields
          REQUIRED_FIELDS=("currentVersion" "lastUpdated" "versions")
          for field in "${REQUIRED_FIELDS[@]}"; do
            if ! jq -e ".$field" frontend/public/changelog.json >/dev/null; then
              echo "‚ùå Missing required field: $field"
              exit 1
            fi
          done
          
          # Validate Czech translation if it exists
          if [ -f frontend/public/changelog.cs.json ]; then
            if ! jq empty frontend/public/changelog.cs.json; then
              echo "‚ùå Czech changelog.cs.json is not valid JSON!"
              exit 1
            fi
            echo "‚úÖ Czech translation validation passed!"
          fi
          
          echo "‚úÖ Changelog validation passed!"