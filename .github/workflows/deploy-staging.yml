name: 🚀 Deploy to Staging Environment

on:
  workflow_dispatch:
    inputs:
      run_e2e_tests:
        description: 'Run E2E tests after deployment'
        required: false
        default: 'true'
        type: choice
        options:
          - 'true'
          - 'false'
  workflow_run:
    workflows: ["🔄 Continuous Integration (Optimized)"]
    types:
      - completed
    branches: [main]

env:
  REGISTRY: docker.io
  IMAGE_NAME: onpaj/heblo
  AZURE_WEBAPP_NAME: heblo-test
  SLOT_NAME: staging

jobs:
  deploy-staging:
    name: 🚀 Deploy to Staging
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'workflow_dispatch' || 
      (github.event.workflow_run.conclusion == 'success' && github.event.workflow_run.head_branch == 'main')
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: 📦 Install frontend dependencies
        working-directory: ./frontend
        run: npm install --legacy-peer-deps

      - name: 🏗️ Build frontend
        working-directory: ./frontend
        run: npm run build
        env:
          REACT_APP_API_URL: https://heblo-test-staging.azurewebsites.net
          REACT_APP_USE_MOCK_AUTH: true
          REACT_APP_ENVIRONMENT: staging

      - name: 📦 Copy frontend to backend
        run: |
          rm -rf backend/src/Anela.Heblo.API/wwwroot
          cp -r frontend/build backend/src/Anela.Heblo.API/wwwroot

      - name: 🏗️ Build backend
        run: dotnet build backend/src/Anela.Heblo.API --configuration Release

      - name: 📦 Publish backend
        run: dotnet publish backend/src/Anela.Heblo.API --configuration Release --output ./publish

      - name: 🔒 Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: 🏷️ Generate version tag
        id: version
        run: |
          VERSION="staging-$(date +%Y%m%d)-$(git rev-parse --short HEAD)"
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "📌 Version: $VERSION"

      - name: 🐳 Build and push Docker image
        run: |
          docker build -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.version }} .
          docker tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.version }} \
                     ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:staging-latest
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.version }}
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:staging-latest

      - name: 🔐 Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: 🚀 Deploy to Azure Web App Staging Slot
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ env.AZURE_WEBAPP_NAME }}
          slot-name: ${{ env.SLOT_NAME }}
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.version }}

      - name: ⚙️ Configure Azure App Settings
        uses: azure/appservice-settings@v1
        with:
          app-name: ${{ env.AZURE_WEBAPP_NAME }}
          slot-name: ${{ env.SLOT_NAME }}
          app-settings-json: |
            [
              {
                "name": "ASPNETCORE_ENVIRONMENT",
                "value": "Staging"
              },
              {
                "name": "REACT_APP_API_URL",
                "value": "https://heblo-test-staging.azurewebsites.net"
              },
              {
                "name": "REACT_APP_USE_MOCK_AUTH",
                "value": "true"
              },
              {
                "name": "WEBSITES_PORT",
                "value": "8080"
              },
              {
                "name": "DatabaseSeeding__EnableAutoSeed",
                "value": "true"
              },
              {
                "name": "DatabaseSeeding__TruncateOnStartup",
                "value": "true"
              }
            ]
          connection-strings-json: |
            [
              {
                "name": "DefaultConnection",
                "value": "${{ secrets.STAGING_DB_CONNECTION_STRING }}",
                "type": "PostgreSQL"
              }
            ]

      - name: 🔄 Restart staging slot
        run: |
          az webapp restart --name ${{ env.AZURE_WEBAPP_NAME }} --slot ${{ env.SLOT_NAME }} --resource-group rgHeblo

      - name: ⏳ Wait for deployment to be ready
        run: |
          echo "⏳ Waiting for staging slot to be ready..."
          sleep 30
          for i in {1..10}; do
            if curl -s -o /dev/null -w "%{http_code}" https://heblo-test-staging.azurewebsites.net/health | grep -q "200"; then
              echo "✅ Staging slot is ready!"
              break
            fi
            echo "⏳ Waiting for staging slot... ($i/10)"
            sleep 10
          done

      - name: 📝 Create deployment summary
        run: |
          echo "## 🚀 Staging Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Version:** ${{ steps.version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **URL:** https://heblo-test-staging.azurewebsites.net" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment:** Staging" >> $GITHUB_STEP_SUMMARY
          echo "- **Database:** Heblo_TST (with auto-seeding)" >> $GITHUB_STEP_SUMMARY
          echo "- **Timestamp:** $(date)" >> $GITHUB_STEP_SUMMARY

  run-e2e-tests:
    name: 🎭 Run E2E Tests on Staging
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: |
      (github.event_name == 'workflow_dispatch' && github.event.inputs.run_e2e_tests == 'true') ||
      github.event_name == 'workflow_run'
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: 📦 Install dependencies
        working-directory: ./frontend
        run: npm install --legacy-peer-deps

      - name: 🎭 Install Playwright browsers
        working-directory: ./frontend
        run: npx playwright install --with-deps chromium

      - name: 🧪 Run E2E tests against staging
        working-directory: ./frontend
        run: npx playwright test --reporter=list
        env:
          PLAYWRIGHT_BASE_URL: https://heblo-test-staging.azurewebsites.net
          CI: true

      - name: 📤 Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: staging-e2e-test-results
          path: |
            frontend/test-results/
            frontend/playwright-report/
          retention-days: 7

      - name: 📝 Add test results to summary
        if: always()
        run: |
          echo "## 🎭 E2E Test Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          if [ -f frontend/test-results/results.json ]; then
            PASSED=$(grep -o '"status":"passed"' frontend/test-results/results.json | wc -l || echo "0")
            FAILED=$(grep -o '"status":"failed"' frontend/test-results/results.json | wc -l || echo "0")
            echo "- **Passed:** $PASSED" >> $GITHUB_STEP_SUMMARY
            echo "- **Failed:** $FAILED" >> $GITHUB_STEP_SUMMARY
          else
            echo "Test results not available" >> $GITHUB_STEP_SUMMARY
          fi

  notify-deployment:
    name: 📢 Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [deploy-staging, run-e2e-tests]
    if: always()
    
    steps:
      - name: 📝 Create final summary
        run: |
          echo "## 🎯 Staging Deployment Status" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ needs.deploy-staging.result }}" == "success" ]]; then
            echo "✅ **Deployment:** Successful" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Deployment:** Failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [[ "${{ needs.run-e2e-tests.result }}" == "success" ]]; then
            echo "✅ **E2E Tests:** Passed" >> $GITHUB_STEP_SUMMARY
          elif [[ "${{ needs.run-e2e-tests.result }}" == "skipped" ]]; then
            echo "⏭️ **E2E Tests:** Skipped" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **E2E Tests:** Failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🔗 **Staging URL:** https://heblo-test-staging.azurewebsites.net" >> $GITHUB_STEP_SUMMARY
          echo "📅 **Deployed at:** $(date)" >> $GITHUB_STEP_SUMMARY