name: 🔄 Continuous Integration

on:
  push:
    branches: ['**']
  pull_request:
    branches: ['**']

env:
  REGISTRY: docker.io
  IMAGE_NAME: anela-heblo

jobs:
  # Frontend CI Jobs
  frontend-lint:
    name: 🧹 Frontend Lint
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: 📦 Install dependencies
        run: npm install --legacy-peer-deps

      - name: 🧹 Run ESLint
        run: npm run lint

  frontend-test:
    name: 🧪 Frontend Tests
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: 📦 Install dependencies
        run: npm install --legacy-peer-deps

      - name: 🧪 Run tests
        run: npm test -- --coverage --watchAll=false
        env:
          CI: true

      - name: 📊 Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          files: ./frontend/coverage/lcov.info
          flags: frontend
          name: frontend-coverage

  frontend-build:
    name: 🏗️ Frontend Build
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: 📦 Install dependencies
        run: npm install --legacy-peer-deps

      - name: 🏗️ Build production bundle
        run: npm run build
        env:
          REACT_APP_API_URL: https://placeholder.azurewebsites.net
          REACT_APP_USE_MOCK_AUTH: false

      - name: 📤 Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: frontend/build/
          retention-days: 7

  # Backend CI Jobs
  backend-lint:
    name: 🧹 Backend Lint & Format Check
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: 📦 Restore dependencies
        run: dotnet restore Anela.Heblo.sln

      - name: 🧹 Check code formatting
        run: |
          # Check if dotnet format would make changes
          dotnet format Anela.Heblo.sln --verify-no-changes --verbosity normal || {
            echo "❌ Code formatting issues found. Run 'dotnet format Anela.Heblo.sln' locally to fix them."
            exit 1
          }

  backend-test:
    name: 🧪 Backend Tests
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: 📦 Restore dependencies
        run: dotnet restore Anela.Heblo.sln

      - name: 🧪 Run tests with coverage
        run: dotnet test Anela.Heblo.sln --collect:"XPlat Code Coverage" --logger trx --results-directory ./coverage

      - name: 📊 Upload coverage reports
        uses: codecov/codecov-action@v3
        continue-on-error: true
        with:
          files: ./coverage/*/coverage.cobertura.xml
          flags: backend
          name: backend-coverage

  backend-build:
    name: 🏗️ Backend Build
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: 📦 Restore dependencies
        run: dotnet restore Anela.Heblo.sln

      - name: 🏗️ Build solution
        run: dotnet build Anela.Heblo.sln --configuration Release --no-restore

  # Playwright E2E Tests (temporarily disabled)
  # playwright-tests:
  #   name: 🎭 Playwright E2E Tests
  #   runs-on: ubuntu-latest
  #   needs: [frontend-build, backend-build]
  #   steps:
  #     - name: 📥 Checkout code
  #       uses: actions/checkout@v4
  #     # ... Playwright test steps temporarily commented out

  # Docker Build
  docker-build:
    name: 🐳 Docker Build
    runs-on: ubuntu-latest
    needs: [frontend-build, backend-build]
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🏗️ Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          tags: ${{ env.IMAGE_NAME }}:ci-${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Quality Gate
  quality-gate:
    name: ✅ Quality Gate
    runs-on: ubuntu-latest
    needs: [frontend-lint, frontend-test, frontend-build, backend-lint, backend-test, backend-build, docker-build]
    if: always()
    steps:
      - name: ✅ Check all jobs succeeded
        run: |
          echo "Frontend Lint: ${{ needs.frontend-lint.result }}"
          echo "Frontend Test: ${{ needs.frontend-test.result }}"
          echo "Frontend Build: ${{ needs.frontend-build.result }}"
          echo "Backend Lint: ${{ needs.backend-lint.result }}"
          echo "Backend Test: ${{ needs.backend-test.result }}"
          echo "Backend Build: ${{ needs.backend-build.result }}"
          echo "Docker Build: ${{ needs.docker-build.result }}"
          
          if [[ "${{ needs.frontend-lint.result }}" != "success" || \
                "${{ needs.frontend-test.result }}" != "success" || \
                "${{ needs.frontend-build.result }}" != "success" || \
                "${{ needs.backend-lint.result }}" != "success" || \
                "${{ needs.backend-test.result }}" != "success" || \
                "${{ needs.backend-build.result }}" != "success" || \
                "${{ needs.docker-build.result }}" != "success" ]]; then
            echo "❌ Quality gate failed - one or more jobs failed"
            exit 1
          else
            echo "✅ Quality gate passed - all jobs succeeded"
          fi