name: 🔄 CI with Manual Staging Deployment

on:
  pull_request:
    branches: [main]
    types: [opened, synchronize, reopened, ready_for_review]

permissions:
  contents: read
  pull-requests: write
  packages: read

env:
  REGISTRY: docker.io
  IMAGE_NAME: heblo

jobs:
  # Claude Code Review - Runs if commit message contains @claude or @claude-review
  claude-review:
    name: 🤖 Claude Code Review
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    permissions:
      contents: read
      pull-requests: write
      issues: read
      id-token: write
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.sha }}
          
      - name: 🔍 Check if Claude review is requested
        id: check-claude
        run: |
          # Get the actual commit message from the HEAD commit
          COMMIT_MESSAGE=$(git log -1 --pretty=format:"%s %b")
          echo "📝 Actual HEAD commit message: $COMMIT_MESSAGE"
          echo "📍 HEAD SHA: $(git rev-parse HEAD)"
          
          # Check if commit message contains the trigger keywords
          if echo "$COMMIT_MESSAGE" | grep -qE "@claude|@claude-review"; then
            echo "✅ Claude review requested in commit message"
            echo "should_run=true" >> $GITHUB_OUTPUT
          else
            echo "⏭️ Claude review not requested (add @claude or @claude-review to commit message)"
            echo "should_run=false" >> $GITHUB_OUTPUT
          fi
          
      - name: 📝 Log trigger info
        if: steps.check-claude.outputs.should_run == 'true'
        run: |
          echo "🔍 Claude Review triggered by commit message"
          echo "Actual commit message: $(git log -1 --pretty=format:'%s %b')"
          echo "PR: #${{ github.event.pull_request.number }}"
          echo "SHA: ${{ github.event.pull_request.head.sha }}"
          
      - name: 🤖 Run Claude Code Review
        if: steps.check-claude.outputs.should_run == 'true'
        id: claude-review
        uses: anthropics/claude-code-action@beta
        with:
          claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
          pr_number: ${{ github.event.pull_request.number }}
          
          # Direct prompt for automated review
          direct_prompt: |
            Please review this pull request and provide feedback on:
            - Code quality, best practices and common patterns (DRY, YAGNI, SOLID, KISS)
            - Code complexity and maintainability
            - Domain and concerns separation (should that be on backend or frontend side?)
            - Potential bugs or issues
            - Performance considerations
            - Security concerns
            - Test coverage
            
            Be constructive and helpful in your feedback.

  # Frontend Tests - Parallel execution
  frontend-tests:
    name: 🎯 Frontend Tests
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: 📦 Install dependencies
        working-directory: ./frontend
        run: npm install --legacy-peer-deps

      - name: 🧪 Run tests with coverage
        working-directory: ./frontend
        run: npm test -- --coverage --watchAll=false
        env:
          REACT_APP_USE_MOCK_AUTH: true
          CI: true

      - name: 📊 Upload coverage reports
        uses: codecov/codecov-action@v3
        continue-on-error: true
        with:
          files: ./frontend/coverage/lcov.info
          flags: frontend
          name: frontend-coverage

  # Backend Tests - Parallel execution
  backend-tests:
    name: 🎯 Backend Tests
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: 📦 Restore dependencies
        run: dotnet restore Anela.Heblo.sln

      - name: 🏗️ Build all test projects
        run: |
          dotnet build backend/test/Anela.Heblo.Tests --configuration Release --no-restore
          dotnet build backend/test/Anela.Heblo.Adapters.Shoptet.Tests --configuration Release --no-restore
          dotnet build backend/test/Anela.Heblo.Adapters.Flexi.Tests --configuration Release --no-restore

      - name: 🎭 Install Playwright for Shoptet tests
        run: |
          cd backend/test/Anela.Heblo.Adapters.Shoptet.Tests
          pwsh bin/Release/net8.0/playwright.ps1 install chromium

      - name: 📊 Count total tests
        run: |
          echo "=== Test Discovery ==="
          ASPNETCORE_ENVIRONMENT=Automation dotnet test Anela.Heblo.sln --list-tests | grep -E "Test Name|^    " | wc -l
          echo "=== Running Tests ==="
        env:
          ASPNETCORE_ENVIRONMENT: Automation

      - name: 🧪 Run tests with coverage
        run: dotnet test Anela.Heblo.sln --collect:"XPlat Code Coverage" --logger trx --logger "console;verbosity=normal" --results-directory ./coverage
        env:
          ASPNETCORE_ENVIRONMENT: Automation
          # Shoptet integration test configuration
          StockClient__Url: ${{ secrets.SHOPTET_STOCK_URL }}
          ProductPriceOptions__ProductExportUrl: ${{ secrets.SHOPTET_PRODUCT_EXPORT_URL }}
          Shoptet.Playwright__ShopEntryUrl: ${{ secrets.SHOPTET_TEST_URL }}
          Shoptet.Playwright__Login: ${{ secrets.SHOPTET_TEST_USERNAME }}
          Shoptet.Playwright__Password: ${{ secrets.SHOPTET_TEST_PASSWORD }}
          Shoptet.Playwright__Headless: true
          # FlexiBee integration test configuration
          FlexiBeeSettings__Server: ${{ secrets.FLEXIBEE_SERVER_URL }}
          FlexiBeeSettings__Login: ${{ secrets.FLEXIBEE_USERNAME }}
          FlexiBeeSettings__Password: ${{ secrets.FLEXIBEE_PASSWORD }}
          FlexiBeeSettings__Company: ${{ secrets.FLEXIBEE_COMPANY }}

      - name: 📊 Upload coverage reports
        uses: codecov/codecov-action@v3
        continue-on-error: true
        with:
          files: ./coverage/*/coverage.cobertura.xml
          flags: backend
          name: backend-coverage

      - name: 🏗️ Build solution
        run: dotnet build Anela.Heblo.sln --configuration Release --no-restore

  # Manual Approval for Test Deployment
  staging-approval:
    name: 🤖 Approve Test Deployment
    runs-on: ubuntu-latest
    needs: [frontend-tests, backend-tests]
    environment: 
      name: staging-approval
      url: https://heblo.stg.anela.cz
    steps:
      - name: 📋 Summary of changes
        run: |
          echo "## ✅ Tests Completed Successfully" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ **Frontend Tests**: Passed" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ **Backend Tests**: Passed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Branch**: \`${{ github.ref_name }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Commit**: \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🚀 **Ready to deploy to test environment!**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Test URL**: https://heblo.stg.anela.cz" >> $GITHUB_STEP_SUMMARY

  # Build and Push Docker Image
  build-and-push:
    name: 🐳 Build & Push Docker Image
    runs-on: ubuntu-latest
    needs: [staging-approval]
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      version: ${{ steps.version.outputs.version }}
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🔖 Install GitVersion
        uses: gittools/actions/gitversion/setup@v3.0.0
        with:
          versionSpec: '6.0.x'

      - name: 🔖 Determine version with GitVersion
        id: gitversion
        uses: gittools/actions/gitversion/execute@v3.0.0
        with:
          useConfigFile: true

      - name: 🏷️ Generate version tag
        id: version
        run: |
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            # Use GitVersion's full semantic version for PR
            VERSION="staging-PR${{ github.event.pull_request.number }}-${{ steps.gitversion.outputs.shortSha }}"
          else
            # Use GitVersion generated version for other events
            VERSION="staging-${{ steps.gitversion.outputs.fullSemVer }}"
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "📌 Version: $VERSION"
          echo "🔢 GitVersion SemVer: ${{ steps.gitversion.outputs.fullSemVer }}"
          echo "🔢 GitVersion CommitsSinceVersionSource: ${{ steps.gitversion.outputs.commitsSinceVersionSource }}"

      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🔐 Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: 📝 Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=${{ steps.version.outputs.version }}
            type=raw,value=staging-latest

      - name: 🏗️ Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            REACT_APP_API_URL=https://heblo.stg.anela.cz
            REACT_APP_USE_MOCK_AUTH=false
            REACT_APP_AZURE_CLIENT_ID=${{ secrets.REACT_APP_AZURE_CLIENT_ID }}
            REACT_APP_AZURE_AUTHORITY=${{ secrets.REACT_APP_AZURE_AUTHORITY }}
            REACT_APP_AZURE_BACKEND_CLIENT_ID=${{ secrets.REACT_APP_AZURE_BACKEND_CLIENT_ID }}
            REACT_APP_AZURE_TENANT_ID=${{ secrets.REACT_APP_AZURE_TENANT_ID }}

  # Deploy to Azure Web App (no slots)
  deploy-azure:
    name: 🚀 Deploy to Azure Test Environment
    runs-on: ubuntu-latest
    needs: [build-and-push]
    outputs:
      webapp-hostname: ${{ steps.deploy.outputs.hostname }}
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🔐 Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS_TEST }}

      - name: 🔖 Install GitVersion
        uses: gittools/actions/gitversion/setup@v3.0.0
        with:
          versionSpec: '6.0.x'

      - name: 🔖 Determine version with GitVersion
        id: gitversion
        uses: gittools/actions/gitversion/execute@v3.0.0
        with:
          useConfigFile: true

      - name: 🏷️ Get version from build
        id: version
        run: |
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            # Use GitVersion's full semantic version for PR
            VERSION="staging-PR${{ github.event.pull_request.number }}-${{ steps.gitversion.outputs.shortSha }}"
          else
            # Use GitVersion generated version for other events
            VERSION="staging-${{ steps.gitversion.outputs.fullSemVer }}"
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "📌 Version: $VERSION"
          echo "🔢 GitVersion SemVer: ${{ steps.gitversion.outputs.fullSemVer }}"

      - name: 🚀 Deploy to Azure Web App
        id: deploy
        run: |
          # Deploy container to heblo-test web app
          WEBAPP_NAME="heblo-test"
          echo "🎯 Deploying to web app: $WEBAPP_NAME"
          
          # Build Docker image name with specific version
          DOCKER_IMAGE="${{ env.REGISTRY }}/${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.version }}"
          
          # Try to use build output first, fallback to versioned image
          BUILD_OUTPUT_IMAGE=$(echo "${{ needs.build-and-push.outputs.image-tag }}" | grep -E "${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:staging-PR[0-9]+" | head -1)
          if [ -n "$BUILD_OUTPUT_IMAGE" ]; then
            DOCKER_IMAGE="$BUILD_OUTPUT_IMAGE"
            echo "📍 Using build output image: $DOCKER_IMAGE"
          else
            echo "⚠️ Build output empty, using versioned image: $DOCKER_IMAGE"
          fi
          
          # Validate Docker image is set
          if [ -z "$DOCKER_IMAGE" ]; then
            echo "❌ Error: Docker image is empty!"
            echo "Build output: '${{ needs.build-and-push.outputs.image-tag }}'"
            echo "Version: '${{ steps.version.outputs.version }}'"
            exit 1
          fi
          
          echo "🐳 Docker image: $DOCKER_IMAGE"
          
          # Configure container deployment
          echo "🔧 Configuring Web App for Container deployment..."
          
          # Set the container image directly via config
          az webapp config set \
            --name $WEBAPP_NAME \
            --resource-group rgHeblo \
            --linux-fx-version "DOCKER|$DOCKER_IMAGE" \
            --output none
          
          # Configure container registry settings
          az webapp config container set \
            --name $WEBAPP_NAME \
            --resource-group rgHeblo \
            --container-image-name "$DOCKER_IMAGE" \
            --container-registry-url https://index.docker.io/v1/ \
            --output none
          
          # Restart web app to ensure container configuration is applied
          echo "🔄 Restarting web app..."
          az webapp restart \
            --name $WEBAPP_NAME \
            --resource-group rgHeblo \
            --output none
          
          # Wait for restart to complete
          echo "⏱️ Waiting for restart to complete..."
          sleep 15
          
          # Verify container configuration
          echo "🔍 Verifying container configuration..."
          WEBAPP_CONFIG=$(az webapp config show \
            --name $WEBAPP_NAME \
            --resource-group rgHeblo \
            --query '{linuxFxVersion: linuxFxVersion}' \
            --output json)
          
          LINUX_FX_VERSION=$(echo $WEBAPP_CONFIG | jq -r '.linuxFxVersion')
          echo "📋 Container Configuration: $LINUX_FX_VERSION"
          
          if [[ "$LINUX_FX_VERSION" == DOCKER* ]]; then
            echo "✅ Container mode successfully configured"
          else
            echo "❌ Error: Container mode not properly set"
            exit 1
          fi
          
          # Get hostname for output
          WEBAPP_HOSTNAME=$(az webapp show \
            --name $WEBAPP_NAME \
            --resource-group rgHeblo \
            --query "defaultHostName" \
            --output tsv)
          
          echo "hostname=$WEBAPP_HOSTNAME" >> $GITHUB_OUTPUT
          echo "WEBAPP_NAME=$WEBAPP_NAME" >> $GITHUB_ENV

      - name: 🔧 Configure App Settings
        run: |
          # Configure app settings for test environment
          echo "🔧 Configuring app settings for test environment..."
          
          az webapp config appsettings set \
            --resource-group rgHeblo \
            --name $WEBAPP_NAME \
            --settings \
              ASPNETCORE_ENVIRONMENT=Staging \
              WEBSITES_PORT=8080 \
              WEBSITES_ENABLE_APP_SERVICE_STORAGE=false \
              DOCKER_REGISTRY_SERVER_URL=https://index.docker.io \
              SCM_DO_BUILD_DURING_DEPLOYMENT=false \
              APP_VERSION="${{ needs.build-and-push.outputs.version }}" \
              DEPLOYMENT_SOURCE="CI-${{ github.ref_name }}"
          
          echo "✅ App settings configured"

      - name: ⏳ Wait for deployment to be ready
        run: |
          echo "⏳ Waiting for deployment to be ready..."
          sleep 30
          for i in {1..10}; do
            if curl -s -o /dev/null -w "%{http_code}" https://${{ steps.deploy.outputs.hostname }}/health | grep -q "200"; then
              echo "✅ Deployment is ready!"
              break
            fi
            echo "⏳ Waiting for deployment... ($i/10)"
            sleep 10
          done

      - name: 💬 Comment on PR (if applicable)
        if: github.event_name == 'pull_request'
        run: |
          gh pr comment ${{ github.event.pull_request.number }} \
            --body "## 🚀 Deployed to Test Environment!
          
          Your branch has been successfully deployed to the test environment:
          
          - **🌐 URL**: https://${{ needs.deploy-azure.outputs.webapp-hostname }}
          - **📦 Version**: ${{ needs.build-and-push.outputs.version }}
          - **🐳 Docker Image**: \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.build-and-push.outputs.version }}\`
          - **🌿 Branch**: \`${{ github.ref_name }}\`
          - **📝 Commit**: \`${{ github.sha }}\`
          - **🕐 Deployed**: $(date)
          
          ### 🧪 Testing
          You can now test your changes in the test environment.
          
          ### ⚠️ Important Notes
          - Test environment uses **mock authentication**
          - This deployment will be **replaced** by the next deployment
          - Container deployment via Docker Hub
          
          ---
          _Deployment executed after manual approval_" \
            --edit-last || \
          gh pr comment ${{ github.event.pull_request.number }} \
            --body "## 🚀 Deployed to Test Environment!
          
          Your branch has been successfully deployed to the test environment:
          
          - **🌐 URL**: https://${{ needs.deploy-azure.outputs.webapp-hostname }}
          - **📦 Version**: ${{ needs.build-and-push.outputs.version }}
          - **🐳 Docker Image**: \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.build-and-push.outputs.version }}\`
          - **🌿 Branch**: \`${{ github.ref_name }}\`
          - **📝 Commit**: \`${{ github.sha }}\`
          - **🕐 Deployed**: $(date)
          
          ### 🧪 Testing
          You can now test your changes in the test environment.
          
          ### ⚠️ Important Notes
          - Test environment uses **mock authentication**
          - This deployment will be **replaced** by the next deployment
          - Container deployment via Docker Hub
          
          ---
          _Deployment executed after manual approval_"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: 📝 Create deployment summary
        run: |
          echo "## 🚀 Test Environment Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Version**: ${{ needs.build-and-push.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **URL**: https://${{ needs.deploy-azure.outputs.webapp-hostname }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Docker Image**: \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.build-and-push.outputs.version }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment**: Test (Mock Auth)" >> $GITHUB_STEP_SUMMARY
          echo "- **Timestamp**: $(date)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🧪 Ready for Testing" >> $GITHUB_STEP_SUMMARY
          echo "The test environment is now ready for testing with your latest changes!" >> $GITHUB_STEP_SUMMARY