name: üîÑ CI with Manual Staging Deployment

on:
  pull_request:
    branches: [main]
    types: [opened, synchronize, reopened, ready_for_review]

env:
  REGISTRY: docker.io
  IMAGE_NAME: onpaj/heblo

jobs:
  # Frontend Tests - Parallel execution
  frontend-tests:
    name: üéØ Frontend Tests
    runs-on: ubuntu-latest
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üì¶ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: üì¶ Install dependencies
        working-directory: ./frontend
        run: npm install --legacy-peer-deps

      - name: üß™ Run tests with coverage
        working-directory: ./frontend
        run: npm test -- --coverage --watchAll=false
        env:
          REACT_APP_USE_MOCK_AUTH: true
          CI: true

      - name: üìä Upload coverage reports
        uses: codecov/codecov-action@v3
        continue-on-error: true
        with:
          files: ./frontend/coverage/lcov.info
          flags: frontend
          name: frontend-coverage

  # Backend Tests - Parallel execution
  backend-tests:
    name: üéØ Backend Tests
    runs-on: ubuntu-latest
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üîß Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: üì¶ Restore dependencies
        run: dotnet restore Anela.Heblo.sln

      - name: üèóÔ∏è Build all test projects
        run: |
          dotnet build backend/test/Anela.Heblo.Tests --configuration Release --no-restore
          dotnet build backend/test/Anela.Heblo.Adapters.Shoptet.Tests --configuration Release --no-restore
          dotnet build backend/test/Anela.Heblo.Adapters.Flexi.Tests --configuration Release --no-restore

      - name: üé≠ Install Playwright for Shoptet tests
        run: |
          cd backend/test/Anela.Heblo.Adapters.Shoptet.Tests
          pwsh bin/Release/net8.0/playwright.ps1 install chromium

      - name: üìä Count total tests
        run: |
          echo "=== Test Discovery ==="
          dotnet test Anela.Heblo.sln --list-tests | grep -E "Test Name|^    " | wc -l
          echo "=== Running Tests ==="

      - name: üß™ Run tests with coverage
        run: dotnet test Anela.Heblo.sln --collect:"XPlat Code Coverage" --logger trx --logger "console;verbosity=normal" --results-directory ./coverage
        env:
          # Shoptet integration test configuration
          StockClient__Url: ${{ secrets.SHOPTET_STOCK_URL }}
          ProductPriceOptions__ProductExportUrl: ${{ secrets.SHOPTET_PRODUCT_EXPORT_URL }}
          Shoptet.Playwright__ShopEntryUrl: ${{ secrets.SHOPTET_TEST_URL }}
          Shoptet.Playwright__Login: ${{ secrets.SHOPTET_TEST_USERNAME }}
          Shoptet.Playwright__Password: ${{ secrets.SHOPTET_TEST_PASSWORD }}
          Shoptet.Playwright__Headless: true
          # FlexiBee integration test configuration
          FlexiBeeSettings__Server: ${{ secrets.FLEXIBEE_SERVER_URL }}
          FlexiBeeSettings__Login: ${{ secrets.FLEXIBEE_USERNAME }}
          FlexiBeeSettings__Password: ${{ secrets.FLEXIBEE_PASSWORD }}
          FlexiBeeSettings__Company: ${{ secrets.FLEXIBEE_COMPANY }}

      - name: üìä Upload coverage reports
        uses: codecov/codecov-action@v3
        continue-on-error: true
        with:
          files: ./coverage/*/coverage.cobertura.xml
          flags: backend
          name: backend-coverage

      - name: üèóÔ∏è Build solution
        run: dotnet build Anela.Heblo.sln --configuration Release --no-restore

  # Manual Approval for Staging Deployment
  staging-approval:
    name: ü§ñ Approve Staging Deployment
    runs-on: ubuntu-latest
    needs: [frontend-tests, backend-tests]
    environment: 
      name: staging-approval
      url: https://heblo-test-staging.azurewebsites.net
    steps:
      - name: üìã Summary of changes
        run: |
          echo "## ‚úÖ Tests Completed Successfully" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ **Frontend Tests**: Passed" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ **Backend Tests**: Passed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Branch**: \`${{ github.ref_name }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Commit**: \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "üöÄ **Ready to deploy to staging environment!**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Staging URL**: https://heblo-test-staging.azurewebsites.net" >> $GITHUB_STEP_SUMMARY

  # Staging Deployment - runs after manual approval
  staging-deployment:
    name: üöÄ Deploy to Staging
    runs-on: ubuntu-latest
    needs: [staging-approval]
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üîß Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: üì¶ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: üì¶ Install frontend dependencies
        working-directory: ./frontend
        run: npm install --legacy-peer-deps

      - name: üèóÔ∏è Build frontend for staging
        working-directory: ./frontend
        run: npm run build
        env:
          REACT_APP_API_URL: https://heblo-test-staging.azurewebsites.net
          REACT_APP_USE_MOCK_AUTH: true
          REACT_APP_ENVIRONMENT: staging

      - name: üì¶ Copy frontend to backend
        run: |
          rm -rf backend/src/Anela.Heblo.API/wwwroot
          cp -r frontend/build backend/src/Anela.Heblo.API/wwwroot

      - name: üèóÔ∏è Build backend
        run: dotnet build backend/src/Anela.Heblo.API --configuration Release

      - name: üì¶ Publish backend
        run: dotnet publish backend/src/Anela.Heblo.API --configuration Release --output ./publish

      - name: üè∑Ô∏è Generate version tag
        id: version
        run: |
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            VERSION="pr-${{ github.event.pull_request.number }}-$(date +%Y%m%d)-$(git rev-parse --short HEAD)"
          else
            VERSION="branch-$(date +%Y%m%d)-$(git rev-parse --short HEAD)"
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "üìå Version: $VERSION"

      - name: üîí Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: üê≥ Build and push Docker image
        run: |
          docker build -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.version }} .
          docker tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.version }} \
                     ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:staging-latest
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.version }}
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:staging-latest

      - name: üîê Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: üöÄ Deploy to Azure Web App Staging Slot
        uses: azure/webapps-deploy@v2
        with:
          app-name: heblo-test
          slot-name: staging
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.version }}

      - name: ‚öôÔ∏è Configure Azure App Settings
        uses: azure/appservice-settings@v1
        with:
          app-name: heblo-test
          slot-name: staging
          app-settings-json: |
            [
              {
                "name": "ASPNETCORE_ENVIRONMENT",
                "value": "Staging"
              },
              {
                "name": "REACT_APP_API_URL",
                "value": "https://heblo-test-staging.azurewebsites.net"
              },
              {
                "name": "REACT_APP_USE_MOCK_AUTH",
                "value": "true"
              },
              {
                "name": "WEBSITES_PORT",
                "value": "8080"
              },
              {
                "name": "DatabaseSeeding__EnableAutoSeed",
                "value": "true"
              },
              {
                "name": "DatabaseSeeding__TruncateOnStartup",
                "value": "true"
              },
              {
                "name": "DEPLOYMENT_SOURCE",
                "value": "CI-${{ github.ref_name }}"
              }
            ]
          connection-strings-json: |
            [
              {
                "name": "DefaultConnection",
                "value": "${{ secrets.STAGING_DB_CONNECTION_STRING }}",
                "type": "PostgreSQL"
              }
            ]

      - name: üîÑ Restart staging slot
        run: |
          az webapp restart --name heblo-test --slot staging --resource-group rgHeblo

      - name: ‚è≥ Wait for deployment to be ready
        run: |
          echo "‚è≥ Waiting for staging slot to be ready..."
          sleep 30
          for i in {1..10}; do
            if curl -s -o /dev/null -w "%{http_code}" https://heblo-test-staging.azurewebsites.net/health | grep -q "200"; then
              echo "‚úÖ Staging slot is ready!"
              break
            fi
            echo "‚è≥ Waiting for staging slot... ($i/10)"
            sleep 10
          done

      - name: üí¨ Comment on PR (if applicable)
        if: github.event_name == 'pull_request'
        run: |
          gh pr comment ${{ github.event.pull_request.number }} \
            --body "## üöÄ Deployed to Staging!
          
          Your branch has been successfully deployed to the staging environment:
          
          - **üåê URL**: https://heblo-test-staging.azurewebsites.net
          - **üì¶ Version**: ${{ steps.version.outputs.version }}
          - **üåø Branch**: \`${{ github.ref_name }}\`
          - **üìù Commit**: \`${{ github.sha }}\`
          - **üïê Deployed**: $(date)
          
          ### üß™ Testing
          You can now test your changes in the staging environment. The database is automatically seeded with test data.
          
          ### ‚ö†Ô∏è Important Notes
          - Staging environment uses **mock authentication**
          - Database is **automatically reset** on each deployment
          - This deployment will be **replaced** by the next deployment
          
          ---
          _Deployment approved and executed automatically after CI success_" \
            --edit-last || \
          gh pr comment ${{ github.event.pull_request.number }} \
            --body "## üöÄ Deployed to Staging!
          
          Your branch has been successfully deployed to the staging environment:
          
          - **üåê URL**: https://heblo-test-staging.azurewebsites.net
          - **üì¶ Version**: ${{ steps.version.outputs.version }}
          - **üåø Branch**: \`${{ github.ref_name }}\`
          - **üìù Commit**: \`${{ github.sha }}\`
          - **üïê Deployed**: $(date)
          
          ### üß™ Testing
          You can now test your changes in the staging environment. The database is automatically seeded with test data.
          
          ### ‚ö†Ô∏è Important Notes
          - Staging environment uses **mock authentication**
          - Database is **automatically reset** on each deployment
          - This deployment will be **replaced** by the next deployment
          
          ---
          _Deployment approved and executed automatically after CI success_"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: üìù Create deployment summary
        run: |
          echo "## üöÄ Staging Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Version**: ${{ steps.version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **URL**: https://heblo-test-staging.azurewebsites.net" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment**: Staging (Mock Auth + Auto-seeded DB)" >> $GITHUB_STEP_SUMMARY
          echo "- **Timestamp**: $(date)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üß™ Ready for Testing" >> $GITHUB_STEP_SUMMARY
          echo "The staging environment is now ready for testing with your latest changes!" >> $GITHUB_STEP_SUMMARY