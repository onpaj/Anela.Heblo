name: 🔄 Continuous Integration (Optimized)

on:
  pull_request:
    branches: [main]
    types: [opened, synchronize, reopened, ready_for_review]

env:
  REGISTRY: docker.io
  IMAGE_NAME: heblo

jobs:
  # Frontend CI - Test and build only (no lint)
  frontend-ci:
    name: 🎯 Frontend CI (Test + Build)
    runs-on: ubuntu-latest
    outputs:
      has-build-artifact: ${{ steps.check-build.outputs.has-artifact }}
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: 📦 Install dependencies
        working-directory: ./frontend
        run: npm install --legacy-peer-deps

      - name: 🧪 Run tests with coverage
        working-directory: ./frontend
        run: npm test -- --coverage --watchAll=false
        env:
          CI: true

      - name: 📊 Upload coverage reports
        uses: codecov/codecov-action@v3
        continue-on-error: true
        with:
          files: ./frontend/coverage/lcov.info
          flags: frontend
          name: frontend-coverage

      - name: 🏗️ Build production bundle
        working-directory: ./frontend
        run: npm run build
        env:
          REACT_APP_API_URL: https://placeholder.azurewebsites.net
          REACT_APP_USE_MOCK_AUTH: false

      - name: ✅ Check build success
        id: check-build
        run: echo "has-artifact=true" >> $GITHUB_OUTPUT

      - name: 📤 Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: frontend/build/
          retention-days: 7

  # Backend CI - Test and build only (no lint)
  backend-ci:
    name: 🎯 Backend CI (Test + Build)
    runs-on: ubuntu-latest
    outputs:
      has-build-artifact: ${{ steps.check-build.outputs.has-artifact }}
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: 📦 Restore dependencies
        run: dotnet restore Anela.Heblo.sln

      - name: 🧪 Run tests with coverage
        run: dotnet test Anela.Heblo.sln --collect:"XPlat Code Coverage" --logger trx --results-directory ./coverage

      - name: 📊 Upload coverage reports
        uses: codecov/codecov-action@v3
        continue-on-error: true
        with:
          files: ./coverage/*/coverage.cobertura.xml
          flags: backend
          name: backend-coverage

      - name: 🏗️ Build solution
        run: dotnet build Anela.Heblo.sln --configuration Release --no-restore

      - name: ✅ Check build success
        id: check-build
        run: echo "has-artifact=true" >> $GITHUB_OUTPUT

  # UI Tests with Playwright - runs in parallel with docker build (non-blocking)
  playwright-tests:
    name: 🎭 UI Tests (Playwright)
    runs-on: ubuntu-latest
    needs: [frontend-ci, backend-ci]
    continue-on-error: true
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: 📦 Restore .NET dependencies
        run: dotnet restore backend/src/Anela.Heblo.API/Anela.Heblo.API.csproj

      - name: 📦 Install frontend dependencies
        working-directory: ./frontend
        run: npm install --legacy-peer-deps

      - name: 🎭 Install Playwright browsers
        working-directory: ./frontend
        run: npx playwright install --with-deps chromium

      - name: 🚀 Start automation backend
        run: |
          cd backend/src/Anela.Heblo.API
          ASPNETCORE_ENVIRONMENT=Automation dotnet run --launch-profile Automation &
          echo "BACKEND_PID=$!" >> $GITHUB_ENV
        env:
          ASPNETCORE_ENVIRONMENT: Automation

      - name: ⏳ Wait for backend to start
        run: |
          echo "Waiting for backend to start on port 5001..."
          timeout 60 bash -c 'until curl -f http://localhost:5001/health > /dev/null 2>&1; do sleep 2; done'
          echo "Backend is ready!"

      - name: 🚀 Start automation frontend
        working-directory: ./frontend
        run: |
          npm run start:automation &
          echo "FRONTEND_PID=$!" >> $GITHUB_ENV
        env:
          REACT_APP_API_URL: http://localhost:5001
          REACT_APP_USE_MOCK_AUTH: true

      - name: ⏳ Wait for frontend to start
        run: |
          echo "Waiting for frontend to start on port 3001..."
          timeout 60 bash -c 'until curl -f http://localhost:3001 > /dev/null 2>&1; do sleep 2; done'
          echo "Frontend is ready!"

      - name: 🧪 Run Playwright tests
        working-directory: ./frontend
        run: npx playwright test
        env:
          CI: true

      - name: 📤 Upload Playwright report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report
          path: frontend/playwright-report/
          retention-days: 7

      - name: 📤 Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-test-results
          path: frontend/test-results/
          retention-days: 7

      - name: 🧹 Cleanup processes
        if: always()
        run: |
          echo "Cleaning up background processes..."
          if [ ! -z "$BACKEND_PID" ]; then
            kill $BACKEND_PID 2>/dev/null || true
          fi
          if [ ! -z "$FRONTEND_PID" ]; then
            kill $FRONTEND_PID 2>/dev/null || true
          fi
          # Kill any remaining processes on the test ports
          lsof -ti:5001 | xargs kill -9 2>/dev/null || true
          lsof -ti:3001 | xargs kill -9 2>/dev/null || true
          echo "Cleanup completed"

  # Docker Build - depends on both frontend and backend CI
  docker-build:
    name: 🐳 Docker Build
    runs-on: ubuntu-latest
    needs: [frontend-ci, backend-ci]
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🏗️ Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          tags: ${{ env.IMAGE_NAME }}:ci-${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Quality Gate - ensures all jobs pass
  quality-gate:
    name: ✅ Quality Gate
    runs-on: ubuntu-latest
    needs: [frontend-ci, backend-ci, playwright-tests, docker-build]
    if: always()
    steps:
      - name: ✅ Check all jobs succeeded
        run: |
          echo "Frontend CI: ${{ needs.frontend-ci.result }}"
          echo "Backend CI: ${{ needs.backend-ci.result }}"
          echo "Playwright Tests: ${{ needs.playwright-tests.result }}"
          echo "Docker Build: ${{ needs.docker-build.result }}"
          
          # Check required jobs (always run)
          if [[ "${{ needs.frontend-ci.result }}" != "success" || \
                "${{ needs.backend-ci.result }}" != "success" || \
                "${{ needs.docker-build.result }}" != "success" ]]; then
            echo "❌ Quality gate failed - required jobs failed"
            exit 1
          fi
          
          # Playwright tests are optional - show status but don't fail CI
          if [[ "${{ needs.playwright-tests.result }}" == "failure" ]]; then
            echo "⚠️ Playwright tests failed (non-blocking)"
          elif [[ "${{ needs.playwright-tests.result }}" == "success" ]]; then
            echo "✅ Playwright tests passed"
          fi
          
          echo "✅ Quality gate passed - all required jobs succeeded"

      - name: 📋 Generate CI summary
        run: |
          echo "## 🎉 CI Pipeline Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "✅ **Frontend CI**: Test, Build completed successfully" >> $GITHUB_STEP_SUMMARY
          echo "✅ **Backend CI**: Test, Build completed successfully" >> $GITHUB_STEP_SUMMARY  
          
          # Dynamic UI Tests status (non-blocking)
          if [[ "${{ needs.playwright-tests.result }}" == "success" ]]; then
            echo "✅ **UI Tests**: Playwright tests passed successfully" >> $GITHUB_STEP_SUMMARY
          elif [[ "${{ needs.playwright-tests.result }}" == "failure" ]]; then
            echo "⚠️ **UI Tests**: Playwright tests failed (non-blocking)" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "✅ **Docker Build**: Image built successfully" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Commit**: \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Branch**: \`${{ github.ref_name }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🚀 **Ready for deployment!**" >> $GITHUB_STEP_SUMMARY

  # Auto-merge job - runs when quality gate passes and PR has auto-merge label
  auto-merge:
    name: 🤖 Auto-merge PR
    runs-on: ubuntu-latest
    needs: [quality-gate]
    if: |
      github.event.pull_request.draft == false &&
      contains(github.event.pull_request.labels.*.name, 'auto-merge')
    permissions:
      contents: write
      pull-requests: write
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: 🔄 Enable auto-merge
        run: |
          echo "Enabling auto-merge for PR #${{ github.event.pull_request.number }}"
          gh pr merge ${{ github.event.pull_request.number }} \
            --auto \
            --squash \
            --delete-branch
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: 💬 Comment on PR
        run: |
          gh pr comment ${{ github.event.pull_request.number }} \
            --body "🚀 **Auto-merge enabled!**
          
          All CI checks have passed successfully:
          - ✅ Frontend tests and build
          - ✅ Backend tests and build  
          - ✅ UI tests (Playwright)
          - ✅ Docker build
          
          This PR will be automatically merged when all required status checks are complete.
          
          _Note: Branch will be deleted after merge._"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}