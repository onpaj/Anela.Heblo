name: 🔄 CI with Manual Staging Deployment

on:
  pull_request:
    branches: [main]
    types: [opened, synchronize, reopened, ready_for_review]

# Cancel previous runs for the same PR/branch
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  pull-requests: write
  packages: read

env:
  REGISTRY: docker.io
  IMAGE_NAME: heblo

jobs:
  # Claude Code Review - Runs if commit message contains @claude or @claude-review
  claude-review:
    name: 🤖 Claude Code Review
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    permissions:
      contents: read
      pull-requests: write
      issues: read
      id-token: write
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.sha }}
          
      - name: 🔍 Check if Claude review is requested
        id: check-claude
        run: |
          # Get the actual commit message from the HEAD commit
          COMMIT_MESSAGE=$(git log -1 --pretty=format:"%s %b")
          echo "📝 Actual HEAD commit message: $COMMIT_MESSAGE"
          echo "📍 HEAD SHA: $(git rev-parse HEAD)"
          
          # Check if commit message contains the trigger keywords
          if echo "$COMMIT_MESSAGE" | grep -qE "@claude|@claude-review"; then
            echo "✅ Claude review requested in commit message"
            echo "should_run=true" >> $GITHUB_OUTPUT
          else
            echo "⏭️ Claude review not requested (add @claude or @claude-review to commit message)"
            echo "should_run=false" >> $GITHUB_OUTPUT
          fi
          
      - name: 📝 Log trigger info
        if: steps.check-claude.outputs.should_run == 'true'
        run: |
          echo "🔍 Claude Review triggered by commit message"
          echo "Actual commit message: $(git log -1 --pretty=format:'%s %b')"
          echo "PR: #${{ github.event.pull_request.number }}"
          echo "SHA: ${{ github.event.pull_request.head.sha }}"
          
      - name: 🤖 Run Claude Code Review
        if: steps.check-claude.outputs.should_run == 'true'
        id: claude-review
        uses: anthropics/claude-code-action@beta
        with:
          claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
          pr_number: ${{ github.event.pull_request.number }}
          
          # Direct prompt for automated review
          direct_prompt: |
            Please review this pull request and provide feedback on:
            - Code quality, best practices and common patterns (DRY, YAGNI, SOLID, KISS)
            - Code complexity and maintainability
            - Domain and concerns separation (should that be on backend or frontend side?)
            - Potential bugs or issues
            - Performance considerations
            - Security concerns
            - Test coverage
            
            Be constructive and helpful in your feedback.

  # Frontend Tests - Parallel execution
  frontend-tests:
    name: 🎯 Frontend Tests
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: 📦 Install dependencies
        working-directory: ./frontend
        run: npm install --legacy-peer-deps

      - name: 🧪 Run tests with coverage
        working-directory: ./frontend
        run: npm test -- --coverage --watchAll=false
        env:
          REACT_APP_USE_MOCK_AUTH: true
          CI: true

      - name: 📊 Upload coverage reports
        uses: codecov/codecov-action@v3
        continue-on-error: true
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./frontend/coverage/lcov.info
          flags: frontend
          name: frontend-coverage
          fail_ci_if_error: false
          verbose: true
          override_branch: ${{ github.head_ref || github.ref_name }}
          override_commit: ${{ github.sha }}
          override_pr: ${{ github.event.pull_request.number }}
          override_build: ${{ github.run_id }}

  # Backend Tests - Parallel execution
  backend-tests:
    name: 🎯 Backend Tests
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: 📦 Restore dependencies
        run: dotnet restore Anela.Heblo.sln

      - name: 🏗️ Build all test projects
        run: |
          dotnet build backend/test/Anela.Heblo.Tests --configuration Release --no-restore
          dotnet build backend/test/Anela.Heblo.Adapters.Shoptet.Tests --configuration Release --no-restore
          dotnet build backend/test/Anela.Heblo.Adapters.Flexi.Tests --configuration Release --no-restore

      - name: 🎭 Install Playwright for Shoptet tests
        run: |
          cd backend/test/Anela.Heblo.Adapters.Shoptet.Tests
          pwsh bin/Release/net8.0/playwright.ps1 install chromium

      - name: 📊 Count total tests
        run: |
          echo "=== Test Discovery ==="
          ASPNETCORE_ENVIRONMENT=Automation dotnet test Anela.Heblo.sln --list-tests --filter "Category!=Playwright&Category!=Integration" | grep -E "Test Name|^    " | wc -l
          echo "=== Running Tests (excluding Playwright and Integration tests) ==="
        env:
          ASPNETCORE_ENVIRONMENT: Automation

      - name: 🧪 Run tests with coverage (excluding Playwright integration tests)
        run: dotnet test Anela.Heblo.sln --collect:"XPlat Code Coverage" --logger trx --logger "console;verbosity=normal" --results-directory ./coverage --filter "Category!=Playwright&Category!=Integration" -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=cobertura
        env:
          ASPNETCORE_ENVIRONMENT: Automation
          # Shoptet integration test configuration
          StockClient__Url: ${{ secrets.SHOPTET_STOCK_URL }}
          ProductPriceOptions__ProductExportUrl: ${{ secrets.SHOPTET_PRODUCT_EXPORT_URL }}
          ShoptetPlaywright__ShopEntryUrl: ${{ secrets.SHOPTET_TEST_URL }}
          ShoptetPlaywright__Login: ${{ secrets.SHOPTET_TEST_USERNAME }}
          ShoptetPlaywright__Password: ${{ secrets.SHOPTET_TEST_PASSWORD }}
          ShoptetPlaywright__Headless: true
          # FlexiBee integration test configuration
          FlexiBeeSettings__Server: ${{ secrets.FLEXIBEE_SERVER_URL }}
          FlexiBeeSettings__Login: ${{ secrets.FLEXIBEE_USERNAME }}
          FlexiBeeSettings__Password: ${{ secrets.FLEXIBEE_PASSWORD }}
          FlexiBeeSettings__Company: ${{ secrets.FLEXIBEE_COMPANY }}
        
      - name: 📊 Process coverage files for CodeCov
        run: |
          # Find all coverage.cobertura.xml files and fix paths for CodeCov
          find ./coverage -name "coverage.cobertura.xml" -type f | while read file; do
            echo "Processing coverage file: $file"
            
            # First show original paths for debugging
            echo "Original paths in $file:"
            grep -o 'filename="[^"]*"' "$file" | head -5
            
            # Replace relative paths with paths relative to repository root for CodeCov
            # The original paths are like: filename="Anela.Heblo.Application/ApplicationModule.cs"
            # We need: filename="backend/src/Anela.Heblo.Application/ApplicationModule.cs"
            sed -i 's|filename="|filename="backend/src/|g' "$file"
            
            # Show processed paths for debugging
            echo "Processed paths in $file:"
            grep -o 'filename="[^"]*"' "$file" | head -5
            echo "---"
          done
          
          # Verify coverage files exist
          echo "=== Coverage files found ==="
          find ./coverage -name "coverage.cobertura.xml" -type f -exec echo "Found: {}" \;
          
          # Count total coverage files
          COVERAGE_COUNT=$(find ./coverage -name "coverage.cobertura.xml" -type f | wc -l)
          echo "Total coverage files: $COVERAGE_COUNT"
          
          if [ "$COVERAGE_COUNT" -eq "0" ]; then
            echo "❌ ERROR: No coverage files found!"
            exit 1
          fi
        env:
          ASPNETCORE_ENVIRONMENT: Automation
          # Shoptet integration test configuration
          StockClient__Url: ${{ secrets.SHOPTET_STOCK_URL }}
          ProductPriceOptions__ProductExportUrl: ${{ secrets.SHOPTET_PRODUCT_EXPORT_URL }}
          Shoptet.Playwright__ShopEntryUrl: ${{ secrets.SHOPTET_TEST_URL }}
          Shoptet.Playwright__Login: ${{ secrets.SHOPTET_TEST_USERNAME }}
          Shoptet.Playwright__Password: ${{ secrets.SHOPTET_TEST_PASSWORD }}
          Shoptet.Playwright__Headless: true
          # FlexiBee integration test configuration
          FlexiBeeSettings__Server: ${{ secrets.FLEXIBEE_SERVER_URL }}
          FlexiBeeSettings__Login: ${{ secrets.FLEXIBEE_USERNAME }}
          FlexiBeeSettings__Password: ${{ secrets.FLEXIBEE_PASSWORD }}
          FlexiBeeSettings__Company: ${{ secrets.FLEXIBEE_COMPANY }}

      - name: 📊 Prepare coverage file list
        id: coverage-files
        run: |
          # Find all coverage files and create a comma-separated list
          COVERAGE_FILES=$(find ./coverage -name "coverage.cobertura.xml" -type f | tr '\n' ',' | sed 's/,$//')
          echo "files=$COVERAGE_FILES" >> $GITHUB_OUTPUT
          echo "Found coverage files: $COVERAGE_FILES"

      - name: 📊 Upload coverage reports
        uses: codecov/codecov-action@v3
        continue-on-error: true
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ${{ steps.coverage-files.outputs.files }}
          flags: backend
          name: backend-coverage
          fail_ci_if_error: false
          verbose: true
          override_branch: ${{ github.head_ref || github.ref_name }}
          override_commit: ${{ github.sha }}
          override_pr: ${{ github.event.pull_request.number }}
          override_build: ${{ github.run_id }}

      - name: 🏗️ Build solution
        run: dotnet build Anela.Heblo.sln --configuration Release --no-restore

  # Manual Approval for Test Deployment
  staging-approval:
    name: 🚀 Manual Approval - Deploy to Test Environment
    runs-on: ubuntu-latest
    needs: [frontend-tests, backend-tests]
    environment: staging-approval
    steps:
      - name: 📋 Deployment Approval Completed
        run: |
          echo "## ✅ Manual Approval Granted - Proceeding with Deployment" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ **Frontend Tests**: Passed" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ **Backend Tests**: Passed" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ **Manual Approval**: Granted" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Branch**: \`${{ github.ref_name }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Commit**: \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🚀 **Deploying to test environment...**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Target URL**: https://heblo.stg.anela.cz" >> $GITHUB_STEP_SUMMARY

  # Build and Push Docker Image
  build-and-push:
    name: 🐳 Build & Push Docker Image
    runs-on: ubuntu-latest
    needs: [staging-approval]
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      version: ${{ steps.version.outputs.version }}
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🔖 Install GitVersion
        uses: gittools/actions/gitversion/setup@v3.0.0
        with:
          versionSpec: '6.0.x'

      - name: 🔖 Determine version with GitVersion
        id: gitversion
        uses: gittools/actions/gitversion/execute@v3.0.0
        with:
          useConfigFile: true

      - name: 🏷️ Generate version tag
        id: version
        run: |
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            # Use GitVersion's full semantic version for PR
            VERSION="staging-PR${{ github.event.pull_request.number }}-${{ steps.gitversion.outputs.shortSha }}"
          else
            # Use GitVersion generated version for other events
            VERSION="staging-${{ steps.gitversion.outputs.fullSemVer }}"
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "📌 Version: $VERSION"
          echo "🔢 GitVersion SemVer: ${{ steps.gitversion.outputs.fullSemVer }}"
          echo "🔢 GitVersion CommitsSinceVersionSource: ${{ steps.gitversion.outputs.commitsSinceVersionSource }}"

      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🔐 Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: 📝 Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=${{ steps.version.outputs.version }}
            type=raw,value=staging-latest

      - name: 🏗️ Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            REACT_APP_API_URL=https://heblo.stg.anela.cz
            REACT_APP_USE_MOCK_AUTH=false
            REACT_APP_AZURE_CLIENT_ID=${{ secrets.REACT_APP_AZURE_CLIENT_ID }}
            REACT_APP_AZURE_AUTHORITY=${{ secrets.REACT_APP_AZURE_AUTHORITY }}
            REACT_APP_AZURE_BACKEND_CLIENT_ID=${{ secrets.REACT_APP_AZURE_BACKEND_CLIENT_ID }}
            REACT_APP_AZURE_TENANT_ID=${{ secrets.REACT_APP_AZURE_TENANT_ID }}

  # Deploy to Azure Web App (no slots)
  deploy-azure:
    name: 🚀 Deploy to Azure Test Environment
    runs-on: ubuntu-latest
    needs: [build-and-push]
    outputs:
      webapp-hostname: ${{ steps.deploy.outputs.hostname }}
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🔐 Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS_TEST }}

      - name: 🔖 Install GitVersion
        uses: gittools/actions/gitversion/setup@v3.0.0
        with:
          versionSpec: '6.0.x'

      - name: 🔖 Determine version with GitVersion
        id: gitversion
        uses: gittools/actions/gitversion/execute@v3.0.0
        with:
          useConfigFile: true

      - name: 🏷️ Get version from build
        id: version
        run: |
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            # Use GitVersion's full semantic version for PR
            VERSION="staging-PR${{ github.event.pull_request.number }}-${{ steps.gitversion.outputs.shortSha }}"
          else
            # Use GitVersion generated version for other events
            VERSION="staging-${{ steps.gitversion.outputs.fullSemVer }}"
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "📌 Version: $VERSION"
          echo "🔢 GitVersion SemVer: ${{ steps.gitversion.outputs.fullSemVer }}"

      - name: 🚀 Deploy to Azure Web App
        id: deploy
        run: |
          # Deploy container to heblo-test web app
          WEBAPP_NAME="heblo-test"
          echo "🎯 Deploying to web app: $WEBAPP_NAME"
          
          # Build Docker image name with specific version
          DOCKER_IMAGE="${{ env.REGISTRY }}/${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.version }}"
          
          # Try to use build output first, fallback to versioned image
          BUILD_OUTPUT_IMAGE=$(echo "${{ needs.build-and-push.outputs.image-tag }}" | grep -E "${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:staging-PR[0-9]+" | head -1)
          if [ -n "$BUILD_OUTPUT_IMAGE" ]; then
            DOCKER_IMAGE="$BUILD_OUTPUT_IMAGE"
            echo "📍 Using build output image: $DOCKER_IMAGE"
          else
            echo "⚠️ Build output empty, using versioned image: $DOCKER_IMAGE"
          fi
          
          # Validate Docker image is set
          if [ -z "$DOCKER_IMAGE" ]; then
            echo "❌ Error: Docker image is empty!"
            echo "Build output: '${{ needs.build-and-push.outputs.image-tag }}'"
            echo "Version: '${{ steps.version.outputs.version }}'"
            exit 1
          fi
          
          echo "🐳 Docker image: $DOCKER_IMAGE"
          
          # Configure container deployment
          echo "🔧 Configuring Web App for Container deployment..."
          
          # Set the container image directly via config
          az webapp config set \
            --name $WEBAPP_NAME \
            --resource-group rgHeblo \
            --linux-fx-version "DOCKER|$DOCKER_IMAGE" \
            --output none
          
          # Configure container registry settings
          az webapp config container set \
            --name $WEBAPP_NAME \
            --resource-group rgHeblo \
            --container-image-name "$DOCKER_IMAGE" \
            --container-registry-url https://index.docker.io/v1/ \
            --output none
          
          # Restart web app to ensure container configuration is applied
          echo "🔄 Restarting web app..."
          az webapp restart \
            --name $WEBAPP_NAME \
            --resource-group rgHeblo \
            --output none
          
          # Wait for restart to complete
          echo "⏱️ Waiting for restart to complete..."
          sleep 15
          
          # Verify container configuration
          echo "🔍 Verifying container configuration..."
          WEBAPP_CONFIG=$(az webapp config show \
            --name $WEBAPP_NAME \
            --resource-group rgHeblo \
            --query '{linuxFxVersion: linuxFxVersion}' \
            --output json)
          
          LINUX_FX_VERSION=$(echo $WEBAPP_CONFIG | jq -r '.linuxFxVersion')
          echo "📋 Container Configuration: $LINUX_FX_VERSION"
          
          if [[ "$LINUX_FX_VERSION" == DOCKER* ]]; then
            echo "✅ Container mode successfully configured"
          else
            echo "❌ Error: Container mode not properly set"
            exit 1
          fi
          
          # Get hostname for output
          WEBAPP_HOSTNAME=$(az webapp show \
            --name $WEBAPP_NAME \
            --resource-group rgHeblo \
            --query "defaultHostName" \
            --output tsv)
          
          echo "hostname=$WEBAPP_HOSTNAME" >> $GITHUB_OUTPUT
          echo "WEBAPP_NAME=$WEBAPP_NAME" >> $GITHUB_ENV

      - name: 🔧 Configure App Settings
        run: |
          # Configure app settings for test environment
          echo "🔧 Configuring app settings for test environment..."
          
          az webapp config appsettings set \
            --resource-group rgHeblo \
            --name $WEBAPP_NAME \
            --settings \
              ASPNETCORE_ENVIRONMENT=Staging \
              WEBSITES_PORT=8080 \
              WEBSITES_ENABLE_APP_SERVICE_STORAGE=false \
              DOCKER_REGISTRY_SERVER_URL=https://index.docker.io \
              SCM_DO_BUILD_DURING_DEPLOYMENT=false \
              APP_VERSION="${{ needs.build-and-push.outputs.version }}" \
              DEPLOYMENT_SOURCE="CI-${{ github.ref_name }}"
          
          echo "✅ App settings configured"

      - name: ⏳ Wait for deployment to be ready
        run: |
          echo "⏳ Waiting for deployment to be ready..."
          sleep 30
          for i in {1..10}; do
            if curl -s -o /dev/null -w "%{http_code}" https://${{ steps.deploy.outputs.hostname }}/health | grep -q "200"; then
              echo "✅ Deployment is ready!"
              break
            fi
            echo "⏳ Waiting for deployment... ($i/10)"
            sleep 10
          done

      - name: 💬 Comment on PR (if applicable)
        if: github.event_name == 'pull_request'
        run: |
          gh pr comment ${{ github.event.pull_request.number }} \
            --body "## 🚀 Deployed to Test Environment!
          
          Your branch has been successfully deployed to the test environment:
          
          - **🌐 URL**: https://${{ needs.deploy-azure.outputs.webapp-hostname }}
          - **📦 Version**: ${{ needs.build-and-push.outputs.version }}
          - **🐳 Docker Image**: \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.build-and-push.outputs.version }}\`
          - **🌿 Branch**: \`${{ github.ref_name }}\`
          - **📝 Commit**: \`${{ github.sha }}\`
          - **🕐 Deployed**: $(date)
          
          ### 🧪 Testing
          You can now test your changes in the test environment.
          
          ### ⚠️ Important Notes
          - Test environment uses **mock authentication**
          - This deployment will be **replaced** by the next deployment
          - Container deployment via Docker Hub
          
          ---
          _Deployment executed after manual approval_" \
            --edit-last || \
          gh pr comment ${{ github.event.pull_request.number }} \
            --body "## 🚀 Deployed to Test Environment!
          
          Your branch has been successfully deployed to the test environment:
          
          - **🌐 URL**: https://${{ needs.deploy-azure.outputs.webapp-hostname }}
          - **📦 Version**: ${{ needs.build-and-push.outputs.version }}
          - **🐳 Docker Image**: \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.build-and-push.outputs.version }}\`
          - **🌿 Branch**: \`${{ github.ref_name }}\`
          - **📝 Commit**: \`${{ github.sha }}\`
          - **🕐 Deployed**: $(date)
          
          ### 🧪 Testing
          You can now test your changes in the test environment.
          
          ### ⚠️ Important Notes
          - Test environment uses **mock authentication**
          - This deployment will be **replaced** by the next deployment
          - Container deployment via Docker Hub
          
          ---
          _Deployment executed after manual approval_"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: 📝 Create deployment summary
        run: |
          echo "## 🚀 Test Environment Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Version**: ${{ needs.build-and-push.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **URL**: https://${{ needs.deploy-azure.outputs.webapp-hostname }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Docker Image**: \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.build-and-push.outputs.version }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment**: Test (Mock Auth)" >> $GITHUB_STEP_SUMMARY
          echo "- **Timestamp**: $(date)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🧪 Ready for Testing" >> $GITHUB_STEP_SUMMARY
          echo "The test environment is now ready for testing with your latest changes!" >> $GITHUB_STEP_SUMMARY

  # Optional E2E Tests against Staging Environment - REQUIRES MANUAL APPROVAL
  e2e-tests-approval:
    name: 🧪 Manual Approval - Run E2E Tests Against Staging
    runs-on: ubuntu-latest
    needs: [deploy-azure]
    environment: e2e-tests-approval
    steps:
      - name: 📋 E2E Testing Approval Completed
        run: |
          echo "## 🧪 Manual Approval Granted - Running E2E Tests" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ **Manual Approval**: Granted for E2E testing" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ **Deployment**: Completed successfully" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Test Configuration:" >> $GITHUB_STEP_SUMMARY
          echo "- **Staging URL**: https://heblo.stg.anela.cz" >> $GITHUB_STEP_SUMMARY
          echo "- **Target Environment**: Staging with Azure service principal auth" >> $GITHUB_STEP_SUMMARY
          echo "- **Test Suite**: Complete Playwright E2E tests" >> $GITHUB_STEP_SUMMARY
          echo "- **Browser**: Chromium (headless)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Running E2E Tests:" >> $GITHUB_STEP_SUMMARY
          echo "1. ✅ E2E tests will run against staging environment" >> $GITHUB_STEP_SUMMARY
          echo "2. ✅ Test results will be uploaded as artifacts" >> $GITHUB_STEP_SUMMARY
          echo "3. ✅ HTML test report will be generated (viewable via artifacts)" >> $GITHUB_STEP_SUMMARY
          echo "4. ✅ Screenshots will be captured for failed tests" >> $GITHUB_STEP_SUMMARY
          echo "5. ✅ PR comment will be added with test results summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### How to view test reports after completion:" >> $GITHUB_STEP_SUMMARY
          echo "1. Go to Actions tab → This workflow run" >> $GITHUB_STEP_SUMMARY
          echo "2. Download \`e2e-test-results\` artifact" >> $GITHUB_STEP_SUMMARY
          echo "3. Extract and open \`playwright-report/index.html\` in browser" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**⚠️ Warning**: Tests run against live staging environment using service principal authentication." >> $GITHUB_STEP_SUMMARY

  e2e-tests:
    name: 🎭 Run E2E Tests Against Staging
    runs-on: ubuntu-latest
    needs: [e2e-tests-approval]
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: 📦 Install dependencies
        working-directory: ./frontend
        run: npm install --legacy-peer-deps

      - name: 🎭 Install Playwright browsers
        working-directory: ./frontend
        run: npx playwright install chromium

      - name: 🧪 Run E2E tests against staging
        id: run-tests
        working-directory: ./frontend
        continue-on-error: true
        run: |
          set +e
          npx playwright test --reporter=list,html 2>&1 | tee test_output.log
          TEST_EXIT_CODE=$?
          set -e
          
          echo "test_exit_code=$TEST_EXIT_CODE" >> $GITHUB_OUTPUT
          
          # Parse test results from output
          if [ -f test_output.log ]; then
            PASSED=$(grep -E -c "(✓|passed)" test_output.log 2>/dev/null || echo "0")
            FAILED=$(grep -E -c "(✖|×|failed)" test_output.log 2>/dev/null || echo "0") 
            TOTAL=$((PASSED + FAILED))
            
            echo "parsed_passed=$PASSED" >> $GITHUB_OUTPUT
            echo "parsed_failed=$FAILED" >> $GITHUB_OUTPUT
            echo "parsed_total=$TOTAL" >> $GITHUB_OUTPUT
            
            echo "📊 Test Results: Total=$TOTAL, Passed=$PASSED, Failed=$FAILED, Exit Code=$TEST_EXIT_CODE"
          else
            echo "❌ Could not parse test results"
            echo "parsed_passed=0" >> $GITHUB_OUTPUT  
            echo "parsed_failed=0" >> $GITHUB_OUTPUT
            echo "parsed_total=0" >> $GITHUB_OUTPUT
          fi
        env:
          PLAYWRIGHT_BASE_URL: https://heblo.stg.anela.cz
          CI: true
          # Azure service principal credentials for E2E authentication
          E2E_CLIENT_ID: ${{ secrets.E2E_CLIENT_ID }}
          E2E_CLIENT_SECRET: ${{ secrets.E2E_CLIENT_SECRET }}
          AZURE_TENANT_ID: ${{ secrets.REACT_APP_AZURE_TENANT_ID }}

      - name: 📊 Upload E2E test results and HTML report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: e2e-test-results
          path: |
            frontend/test-results/
            frontend/playwright-report/
            frontend/test_output.log
          retention-days: 30

      - name: 📸 Upload E2E screenshots (failures only)
        uses: actions/upload-artifact@v4
        if: always() && steps.run-tests.outputs.parsed_failed != '0'
        with:
          name: e2e-failure-screenshots
          path: frontend/test-results/
          retention-days: 30
          
      - name: 📝 Create E2E test summary
        if: always()
        run: |
          echo "## 🎭 E2E Test Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          EXIT_CODE="${{ steps.run-tests.outputs.test_exit_code }}"
          PASSED="${{ steps.run-tests.outputs.parsed_passed }}"
          FAILED="${{ steps.run-tests.outputs.parsed_failed }}"
          TOTAL="${{ steps.run-tests.outputs.parsed_total }}"
          
          if [ "$EXIT_CODE" = "0" ]; then
            echo "✅ **All tests passed successfully!**" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Some tests failed.**" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Metric | Count |" >> $GITHUB_STEP_SUMMARY
          echo "|--------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| **Total Tests** | $TOTAL |" >> $GITHUB_STEP_SUMMARY
          echo "| ✅ **Passed** | $PASSED |" >> $GITHUB_STEP_SUMMARY
          echo "| ❌ **Failed** | $FAILED |" >> $GITHUB_STEP_SUMMARY
          echo "| **Exit Code** | $EXIT_CODE |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📋 How to View Detailed Results:" >> $GITHUB_STEP_SUMMARY
          echo "1. **Download artifacts**: Go to Actions → This workflow run → Artifacts" >> $GITHUB_STEP_SUMMARY
          echo "2. **Download** \`e2e-test-results\` artifact" >> $GITHUB_STEP_SUMMARY
          echo "3. **Extract** the ZIP file" >> $GITHUB_STEP_SUMMARY
          echo "4. **Open** \`playwright-report/index.html\` in your browser" >> $GITHUB_STEP_SUMMARY
          echo "5. **View** detailed test results, screenshots, and traces" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "📅 **Test completed at**: $(date)" >> $GITHUB_STEP_SUMMARY
          
      - name: ⚠️ Set warning status if tests failed
        if: always() && steps.run-tests.outputs.test_exit_code != '0'
        run: |
          FAILED="${{ steps.run-tests.outputs.parsed_failed }}"
          TOTAL="${{ steps.run-tests.outputs.parsed_total }}"
          
          echo "::warning title=E2E Tests Failed::$FAILED out of $TOTAL E2E tests failed. Check the test report artifacts for details."
          echo "::notice title=Test Report Available::Download 'e2e-test-results' artifact and open playwright-report/index.html to view detailed results."
          
          # Exit with warning status (but not failure)
          exit 0

      - name: 💬 Comment E2E results on PR
        if: github.event_name == 'pull_request' && always()
        run: |
          EXIT_CODE="${{ steps.run-tests.outputs.test_exit_code }}"
          PASSED="${{ steps.run-tests.outputs.parsed_passed }}"
          FAILED="${{ steps.run-tests.outputs.parsed_failed }}"
          TOTAL="${{ steps.run-tests.outputs.parsed_total }}"
          
          if [ "$EXIT_CODE" = "0" ]; then
            STATUS_EMOJI="✅"
            STATUS_TEXT="E2E Tests Passed"
            STATUS_COLOR="🟢"
            RESULT_DETAILS="### ✅ All Tests Passed
          Your changes work correctly in the staging environment!
          
          **Test Results**: $PASSED/$TOTAL tests passed"
          else
            STATUS_EMOJI="❌"  
            STATUS_TEXT="E2E Tests Failed"
            STATUS_COLOR="🔴"
            RESULT_DETAILS="### 🔍 Test Failures Detected
          
          **Test Results**: $PASSED/$TOTAL tests passed, $FAILED tests failed
          
          **Next Steps for Debugging**:
          1. Download the \`e2e-test-results\` artifact from this workflow run
          2. Extract the ZIP file and open \`playwright-report/index.html\`
          3. Review failed test screenshots and error details
          4. Check traces and network activity for failed tests"
          fi
          
          gh pr comment ${{ github.event.pull_request.number }} \
            --body "## 🎭 E2E Test Results $STATUS_EMOJI
          
          **$STATUS_COLOR $STATUS_TEXT** against staging environment:
          
          | Metric | Value |
          |--------|-------|
          | **🌐 Test Environment** | https://heblo.stg.anela.cz |
          | **🔐 Authentication** | Azure Service Principal |
          | **📊 Total Tests** | $TOTAL |
          | **✅ Passed** | $PASSED |
          | **❌ Failed** | $FAILED |
          | **📝 Exit Code** | $EXIT_CODE |
          | **🕐 Completed** | $(date '+%Y-%m-%d %H:%M:%S UTC') |
          
          $RESULT_DETAILS
          
          ### 📋 Test Coverage
          - User authentication flows and session management
          - Navigation and routing across all pages
          - Layout behavior (sidebar collapse/expand, responsive design)
          - Feature-specific user journeys and workflows
          - Cross-component integration and state management
          
          ### 📥 How to View Detailed Test Report
          
          1. **Go to Actions tab** → Click on this workflow run
          2. **Scroll to Artifacts section** at the bottom of the run
          3. **Download** the \`e2e-test-results\` artifact (ZIP file)
          4. **Extract** the ZIP file to your computer
          5. **Open** \`playwright-report/index.html\` in your web browser
          6. **Explore** detailed results with screenshots, traces, and logs
          
          $( [ "$FAILED" != "0" ] && echo "### 🖼️ Screenshots Available
          Failed test screenshots are also available in the \`e2e-failure-screenshots\` artifact." || echo "" )
          
          ---
          _E2E tests executed after manual approval against live staging environment_" \
            --edit-last || \
          gh pr comment ${{ github.event.pull_request.number }} \
            --body "## 🎭 E2E Test Results $STATUS_EMOJI
          
          **$STATUS_COLOR $STATUS_TEXT** against staging environment - see workflow run for details"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Notification
  notify:
    name: 📢 CI/CD Notification
    runs-on: ubuntu-latest
    needs: [build-and-push, deploy-azure, frontend-tests, e2e-tests]
    if: always()
    steps:
      - name: 📱 Send Teams Notification
        env:
          TEAMS_WEBHOOK_URL: ${{ secrets.TEAMS_WEBHOOK_URL }}
        run: |
          # Skip if webhook URL is not configured
          if [ -z "$TEAMS_WEBHOOK_URL" ]; then
            echo "⚠️ Teams webhook not configured, skipping notification"
            exit 0
          fi
          
          # Determine status color and emoji based on overall workflow status
          if [ "${{ needs.deploy-azure.result }}" = "success" ] && [ "${{ needs.frontend-tests.result }}" = "success" ] && [ "${{ needs.e2e-tests.result }}" != "failure" ]; then
            COLOR="28A745"  # Green for success
            STATUS_EMOJI="✅"
            STATUS_TEXT="CI/CD Pipeline Successful"
            if [ "${{ needs.e2e-tests.result }}" = "success" ]; then
              STATUS_TEXT="CI/CD Pipeline Successful (E2E Tests Passed)"
            elif [ "${{ needs.e2e-tests.result }}" = "skipped" ]; then
              STATUS_TEXT="CI/CD Pipeline Successful (E2E Tests Skipped)"
            fi
          elif [ "${{ needs.deploy-azure.result }}" = "failure" ] || [ "${{ needs.frontend-tests.result }}" = "failure" ] || [ "${{ needs.e2e-tests.result }}" = "failure" ]; then
            COLOR="FF0000"  # Red for failure
            STATUS_EMOJI="❌"
            STATUS_TEXT="CI/CD Pipeline Failed"
          else
            COLOR="FFA500"  # Orange for partial success/skipped
            STATUS_EMOJI="⚠️"
            STATUS_TEXT="CI/CD Pipeline Completed with Warnings"
          fi
          
          # Get GitHub username of PR author for mention
          PR_AUTHOR="${{ github.event.pull_request.user.login || github.actor }}"
          
          # Create Teams message payload with @mention
          PAYLOAD=$(cat <<EOF
          {
            "@type": "MessageCard",
            "@context": "http://schema.org/extensions",
            "themeColor": "$COLOR",
            "summary": "Heblo CI/CD - $STATUS_TEXT",
            "sections": [{
              "activityTitle": "$STATUS_EMOJI Heblo CI/CD Pipeline",
              "activitySubtitle": "$STATUS_TEXT",
              "activityImage": "https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png",
              "text": "<at>$PR_AUTHOR</at> Your CI/CD pipeline has completed.",
              "facts": [
                {
                  "name": "Branch",
                  "value": "${{ github.ref_name }}"
                },
                {
                  "name": "Environment",
                  "value": "Test/Staging"
                },
                {
                  "name": "Version",
                  "value": "${{ needs.build-and-push.outputs.version }}"
                },
                {
                  "name": "Commit",
                  "value": "\`${GITHUB_SHA:0:7}\`"
                },
                {
                  "name": "Author",
                  "value": "${{ github.event.pull_request.user.login || github.actor }}"
                },
                {
                  "name": "Tests Status",
                  "value": "${{ needs.frontend-tests.result == 'success' && '✅ Passed' || '❌ Failed' }}"
                },
                {
                  "name": "Deployment Status", 
                  "value": "${{ needs.deploy-azure.result == 'success' && '✅ Deployed' || '❌ Failed' }}"
                },
                {
                  "name": "E2E Tests Status",
                  "value": "${{ needs.e2e-tests.result == 'success' && '✅ Passed' || needs.e2e-tests.result == 'failure' && '❌ Failed' || '⏭️ Skipped' }}"
                }
              ],
              "markdown": true
            }],
            "potentialAction": [
              {
                "@type": "OpenUri",
                "name": "View Test Environment",
                "targets": [
                  {
                    "os": "default",
                    "uri": "https://${{ needs.deploy-azure.outputs.webapp-hostname }}"
                  }
                ]
              },
              {
                "@type": "OpenUri",
                "name": "View Pull Request",
                "targets": [
                  {
                    "os": "default",
                    "uri": "${{ github.event.pull_request.html_url || format('{0}/{1}/commit/{2}', github.server_url, github.repository, github.sha) }}"
                  }
                ]
              },
              {
                "@type": "OpenUri",
                "name": "View Workflow",
                "targets": [
                  {
                    "os": "default",
                    "uri": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
                  }
                ]
              }
            ]
          }
          EOF
          )
          
          # Send notification to Teams
          echo "📨 Sending Teams notification to @$PR_AUTHOR..."
          RESPONSE=$(curl -X POST "$TEAMS_WEBHOOK_URL" \
            -H "Content-Type: application/json" \
            -d "$PAYLOAD" \
            -s -w "\n%{http_code}")
          
          HTTP_CODE=$(echo "$RESPONSE" | tail -n1)
          
          if [ "$HTTP_CODE" = "200" ]; then
            echo "✅ Teams notification sent successfully"
          else
            echo "⚠️ Failed to send Teams notification (HTTP $HTTP_CODE)"
            echo "Response: $RESPONSE"
            # Don't fail the workflow if Teams notification fails
            exit 0
          fi