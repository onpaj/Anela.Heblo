name: üöÄ Deploy to Production

on:
  push:
    branches: [main]
    tags: ['v*']
  workflow_dispatch:
    inputs:
      skip_tests:
        description: 'Skip tests (emergency deployment)'
        required: false
        default: false
        type: boolean

permissions:
  contents: write
  packages: write

env:
  REGISTRY: docker.io
  IMAGE_NAME: heblo
  AZURE_WEBAPP_NAME: heblo

jobs:
  # Generate Version
  version:
    name: üîñ Generate Version
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      tag: ${{ steps.version.outputs.tag }}
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: üîñ Generate semantic version
        id: version
        run: |
          if [[ "${{ github.ref }}" == refs/tags/* ]]; then
            # If triggered by tag, use the tag as version
            VERSION=${GITHUB_REF#refs/tags/}
            echo "version=$VERSION" >> $GITHUB_OUTPUT
            echo "tag=$VERSION" >> $GITHUB_OUTPUT
            echo "üìå Using tag version: $VERSION"
          else
            # Generate version based on conventional commits
            # This is a simplified version - in real scenario, use semantic-release or similar
            LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
            COMMIT_COUNT=$(git rev-list $LAST_TAG..HEAD --count)
            
            if [ $COMMIT_COUNT -eq 0 ]; then
              VERSION=$LAST_TAG
            else
              # Simple versioning - increment patch version
              VERSION_NUMBER=${LAST_TAG#v}
              IFS='.' read -ra VERSION_PARTS <<< "$VERSION_NUMBER"
              PATCH=$((${VERSION_PARTS[2]} + 1))
              VERSION="v${VERSION_PARTS[0]}.${VERSION_PARTS[1]}.$PATCH"
            fi
            
            echo "version=$VERSION" >> $GITHUB_OUTPUT
            echo "tag=$VERSION" >> $GITHUB_OUTPUT
            echo "üî¢ Generated version: $VERSION"
          fi

  # Build and Push Docker Image
  build-and-push:
    name: üê≥ Build & Push Docker Image
    runs-on: ubuntu-latest
    needs: [version]
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üê≥ Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: üîê Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: üìù Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=tag
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value=${{ needs.version.outputs.version }}
            type=sha,prefix=sha-

      - name: üèóÔ∏è Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            REACT_APP_API_URL=https://heblo.azurewebsites.net

      - name: üîñ Create Git Tag
        if: github.ref == 'refs/heads/main' && !startsWith(github.ref, 'refs/tags/')
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag ${{ needs.version.outputs.tag }}
          git push origin ${{ needs.version.outputs.tag }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Deploy to Azure Web App
  deploy-azure:
    name: üöÄ Deploy to Azure
    runs-on: ubuntu-latest
    needs: [build-and-push, version]
    outputs:
      webapp-hostname: ${{ steps.deploy.outputs.hostname }}
    environment:
      name: production
      url: https://heblo.azurewebsites.net
    steps:
      - name: üîê Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS_PROD }}

      - name: üöÄ Deploy to Azure Web App
        id: deploy
        run: |
          # Get the actual web app name (Azure might have generated a different name)
          ACTUAL_WEBAPP_NAME=$(az webapp list \
            --resource-group rgHeblo \
            --query "[?contains(name, 'heblo') && !contains(name, 'test')].name" \
            --output tsv | head -1)
          
          if [ -z "$ACTUAL_WEBAPP_NAME" ]; then
            echo "‚ùå No production web app found in resource group rgHeblo"
            echo "Available web apps:"
            az webapp list --resource-group rgHeblo --query "[].name" -o table
            exit 1
          fi
          
          echo "üéØ Found production web app: $ACTUAL_WEBAPP_NAME"
          
          # Deploy container to the web app
          echo "üê≥ Setting Docker container..."
          
          # Build Docker image name with specific version
          DOCKER_IMAGE="remiiik/heblo:${{ needs.version.outputs.version }}"
          
          # Try to use build output first, fallback to versioned image
          BUILD_OUTPUT_IMAGE=$(echo "${{ needs.build-and-push.outputs.image-tag }}" | grep -E "remiiik/heblo:v[0-9]+\.[0-9]+\.[0-9]+" | head -1)
          if [ -n "$BUILD_OUTPUT_IMAGE" ]; then
            DOCKER_IMAGE="$BUILD_OUTPUT_IMAGE"
            echo "üìç Using build output image: $DOCKER_IMAGE"
          else
            echo "‚ö†Ô∏è Build output empty, using versioned image: $DOCKER_IMAGE"
          fi
          
          # Validate Docker image is set
          if [ -z "$DOCKER_IMAGE" ]; then
            echo "‚ùå Error: Docker image is empty!"
            echo "Build output: '${{ needs.build-and-push.outputs.image-tag }}'"
            echo "Version: '${{ needs.version.outputs.version }}'"
            exit 1
          fi
          
          # Configure container deployment using modern approach
          echo "üîß Configuring Web App for Container deployment..."
          echo "üè∑Ô∏è Image: $DOCKER_IMAGE"
          
          # Set the container image directly via config
          az webapp config set \
            --name $ACTUAL_WEBAPP_NAME \
            --resource-group rgHeblo \
            --linux-fx-version "DOCKER|$DOCKER_IMAGE" \
            --output none
          
          # Configure container registry settings
          az webapp config container set \
            --name $ACTUAL_WEBAPP_NAME \
            --resource-group rgHeblo \
            --container-image-name "$DOCKER_IMAGE" \
            --container-registry-url https://index.docker.io/v1/ \
            --output none
          
          # Restart web app to ensure container configuration is applied
          echo "üîÑ Restarting web app to apply container configuration..."
          az webapp restart \
            --name $ACTUAL_WEBAPP_NAME \
            --resource-group rgHeblo \
            --output none
          
          # Wait for restart to complete
          echo "‚è±Ô∏è Waiting for restart to complete..."
          sleep 15
          
          # Verify container configuration
          echo "üîç Verifying container configuration..."
          WEBAPP_CONFIG=$(az webapp config show \
            --name $ACTUAL_WEBAPP_NAME \
            --resource-group rgHeblo \
            --query '{linuxFxVersion: linuxFxVersion}' \
            --output json)
          
          LINUX_FX_VERSION=$(echo $WEBAPP_CONFIG | jq -r '.linuxFxVersion')
          echo "üìã Container Configuration: $LINUX_FX_VERSION"
          
          if [[ "$LINUX_FX_VERSION" == DOCKER* ]]; then
            echo "‚úÖ Container mode successfully configured"
          else
            echo "‚ùå Error: Container mode not properly set"
            echo "Expected: DOCKER|$DOCKER_IMAGE"
            echo "Actual: $LINUX_FX_VERSION"
            exit 1
          fi
            
          echo "‚úÖ Container deployment completed"
          
          # Get hostname for output
          WEBAPP_HOSTNAME=$(az webapp show \
            --name $ACTUAL_WEBAPP_NAME \
            --resource-group rgHeblo \
            --query "defaultHostName" \
            --output tsv)
          
          # Store for later steps
          echo "ACTUAL_WEBAPP_NAME=$ACTUAL_WEBAPP_NAME" >> $GITHUB_ENV
          echo "hostname=$WEBAPP_HOSTNAME" >> $GITHUB_OUTPUT

      - name: üîß Configure App Settings
        run: |
          # Get the actual hostname for the web app
          WEBAPP_HOSTNAME=$(az webapp show \
            --name $ACTUAL_WEBAPP_NAME \
            --resource-group rgHeblo \
            --query "defaultHostName" -o tsv)
          
          echo "üåê Web app hostname: $WEBAPP_HOSTNAME"
          
          # Get Application Insights instrumentation key
          AI_INSTRUMENTATION_KEY=$(az monitor app-insights component show \
            --app aiHeblo \
            --resource-group rgHeblo \
            --query instrumentationKey -o tsv 2>/dev/null || echo "")
          
          # Configure only deployment-specific settings, preserve Azure AD configuration
          echo "üîß Configuring deployment-specific app settings..."
          echo "‚ÑπÔ∏è Azure AD settings are managed manually in Azure Portal"
          
          # Configure minimal deployment settings - Azure AD settings preserved
          az webapp config appsettings set \
            --resource-group rgHeblo \
            --name $ACTUAL_WEBAPP_NAME \
            --settings \
              ASPNETCORE_ENVIRONMENT=Production \
              REACT_APP_API_URL=https://$WEBAPP_HOSTNAME \
              REACT_APP_USE_MOCK_AUTH=false \
              WEBSITES_PORT=8080 \
              WEBSITES_ENABLE_APP_SERVICE_STORAGE=false \
              DOCKER_REGISTRY_SERVER_URL=https://index.docker.io \
              SCM_DO_BUILD_DURING_DEPLOYMENT=false \
              APP_VERSION=${{ needs.version.outputs.version }} \
              ${AI_INSTRUMENTATION_KEY:+APPINSIGHTS_INSTRUMENTATIONKEY=$AI_INSTRUMENTATION_KEY} \
              ${AI_INSTRUMENTATION_KEY:+APPLICATIONINSIGHTS_CONNECTION_STRING=InstrumentationKey=$AI_INSTRUMENTATION_KEY}
          
          echo "‚úÖ Deployment settings configured"
          echo "‚ö†Ô∏è Ensure Azure AD settings are manually configured in Azure Portal:"
          echo "   - AzureAd__TenantId"
          echo "   - AzureAd__ClientId" 
          echo "   - AzureAd__Instance"
          echo "   - AzureAd__Domain"
          echo "   - AzureAd__Scopes"
          echo "   - AzureAd__CallbackPath"
          echo "   - REACT_APP_AZURE_CLIENT_ID"
          echo "   - REACT_APP_AZURE_AUTHORITY"
          
          # Store hostname for smoke tests
          echo "WEBAPP_HOSTNAME=$WEBAPP_HOSTNAME" >> $GITHUB_ENV

  # Smoke Tests
  smoke-tests:
    name: üí® Smoke Tests
    runs-on: ubuntu-latest
    needs: [deploy-azure]
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üí® Run smoke tests
        run: |
          echo "üß™ Running production smoke tests..."
          
          BASE_URL="https://${{ needs.deploy-azure.outputs.webapp-hostname }}"
          
          # Test 1: Health check
          echo "üè• Testing health endpoint..."
          HEALTH_STATUS=$(curl -s -o /dev/null -w "%{http_code}" $BASE_URL/health)
          if [ "$HEALTH_STATUS" != "200" ]; then
            echo "‚ùå Health check failed: $HEALTH_STATUS"
            exit 1
          fi
          echo "‚úÖ Health check passed"
          
          # Test 2: Main page loads
          echo "üåê Testing main page..."
          MAIN_STATUS=$(curl -s -o /dev/null -w "%{http_code}" $BASE_URL/)
          if [ "$MAIN_STATUS" != "200" ]; then
            echo "‚ùå Main page failed: $MAIN_STATUS"
            exit 1
          fi
          echo "‚úÖ Main page loads"
          
          # Test 3: API endpoint responds (may require auth)
          echo "üîå Testing API endpoint..."
          API_STATUS=$(curl -s -o /dev/null -w "%{http_code}" $BASE_URL/WeatherForecast)
          if [ "$API_STATUS" != "200" ] && [ "$API_STATUS" != "401" ]; then
            echo "‚ùå API endpoint failed: $API_STATUS"
            exit 1
          fi
          echo "‚úÖ API endpoint responds (status: $API_STATUS)"
          
          echo "üéâ All smoke tests passed!"

  # Create GitHub Release
  create-release:
    name: üì¶ Create GitHub Release
    runs-on: ubuntu-latest
    needs: [smoke-tests, version, build-and-push]
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/')
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: üìù Generate changelog
        id: changelog
        run: |
          if [[ "${{ github.ref }}" == refs/tags/* ]]; then
            PREVIOUS_TAG=$(git describe --tags --abbrev=0 ${{ needs.version.outputs.tag }}^)
          else
            PREVIOUS_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          fi
          
          if [ -n "$PREVIOUS_TAG" ]; then
            echo "## Changes since $PREVIOUS_TAG" > CHANGELOG.md
            git log $PREVIOUS_TAG..HEAD --pretty=format:"- %s (%h)" >> CHANGELOG.md
          else
            echo "## Initial Release" > CHANGELOG.md
            echo "- First production deployment" >> CHANGELOG.md
          fi
          
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          cat CHANGELOG.md >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: üì¶ Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.version.outputs.tag }}
          release_name: Release ${{ needs.version.outputs.version }}
          body: |
            ${{ steps.changelog.outputs.changelog }}
            
            ## Deployment Info
            - **Environment:** Production
            - **URL:** https://${{ needs.deploy-azure.outputs.webapp-hostname }}
            - **Docker Image:** `${{ needs.build-and-push.outputs.image-tag }}`
            - **Deployed at:** ${{ github.event.head_commit.timestamp }}
          draft: false
          prerelease: false

  # Notification
  notify:
    name: üì¢ Deployment Notification
    runs-on: ubuntu-latest
    needs: [deploy-azure, smoke-tests, create-release, version]
    if: always()
    steps:
      - name: üì¢ Production Deployment Summary
        run: |
          echo "## üöÄ Production Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Version:** \`${{ needs.version.outputs.version }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Environment:** Production" >> $GITHUB_STEP_SUMMARY
          echo "**URL:** https://${{ needs.deploy-azure.outputs.webapp-hostname }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.smoke-tests.result }}" = "success" ]; then
            echo "‚úÖ **Status:** Deployment successful" >> $GITHUB_STEP_SUMMARY
            echo "üéâ **Production is live!**" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ùå **Status:** Deployment failed" >> $GITHUB_STEP_SUMMARY
            echo "üö® **Production deployment needs attention!**" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Release:** [View on GitHub](https://github.com/${{ github.repository }}/releases/tag/${{ needs.version.outputs.tag }})" >> $GITHUB_STEP_SUMMARY