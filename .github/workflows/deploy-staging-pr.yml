name: 🚀 Deploy PR to Staging

on:
  workflow_dispatch:
    inputs:
      pr_number:
        description: 'Pull Request number to deploy'
        required: true
        type: string
      run_e2e_tests:
        description: 'Run E2E tests after deployment'
        required: false
        default: 'true'
        type: choice
        options:
          - 'true'
          - 'false'
      branch_name:
        description: 'Branch name (auto-filled by PR)'
        required: false
        type: string

env:
  REGISTRY: docker.io
  IMAGE_NAME: onpaj/heblo
  AZURE_WEBAPP_NAME: heblo-test
  SLOT_NAME: staging

jobs:
  deploy-pr-to-staging:
    name: 🚀 Deploy PR #${{ github.event.inputs.pr_number }} to Staging
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Get PR information
        id: pr-info
        run: |
          PR_INFO=$(gh api repos/${{ github.repository }}/pulls/${{ github.event.inputs.pr_number }})
          BRANCH_NAME=$(echo "$PR_INFO" | jq -r '.head.ref')
          COMMIT_SHA=$(echo "$PR_INFO" | jq -r '.head.sha')
          PR_TITLE=$(echo "$PR_INFO" | jq -r '.title')
          PR_AUTHOR=$(echo "$PR_INFO" | jq -r '.user.login')
          
          echo "branch=$BRANCH_NAME" >> $GITHUB_OUTPUT
          echo "commit=$COMMIT_SHA" >> $GITHUB_OUTPUT  
          echo "title=$PR_TITLE" >> $GITHUB_OUTPUT
          echo "author=$PR_AUTHOR" >> $GITHUB_OUTPUT
          
          echo "📋 PR Information:"
          echo "  - Branch: $BRANCH_NAME"
          echo "  - Commit: $COMMIT_SHA"
          echo "  - Title: $PR_TITLE"
          echo "  - Author: $PR_AUTHOR"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: 📥 Checkout PR branch
        uses: actions/checkout@v4
        with:
          ref: ${{ steps.pr-info.outputs.branch }}
          fetch-depth: 0

      - name: 🔧 Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: 📦 Install frontend dependencies
        working-directory: ./frontend
        run: npm install --legacy-peer-deps

      - name: 🏗️ Build frontend
        working-directory: ./frontend
        run: npm run build
        env:
          REACT_APP_API_URL: https://heblo-test-staging.azurewebsites.net
          REACT_APP_USE_MOCK_AUTH: true
          REACT_APP_ENVIRONMENT: staging

      - name: 📦 Copy frontend to backend
        run: |
          rm -rf backend/src/Anela.Heblo.API/wwwroot
          cp -r frontend/build backend/src/Anela.Heblo.API/wwwroot

      - name: 🏗️ Build backend
        run: dotnet build backend/src/Anela.Heblo.API --configuration Release

      - name: 📦 Publish backend
        run: dotnet publish backend/src/Anela.Heblo.API --configuration Release --output ./publish

      - name: 🔒 Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: 🏷️ Generate version tag
        id: version
        run: |
          VERSION="pr-${{ github.event.inputs.pr_number }}-$(date +%Y%m%d)-$(git rev-parse --short HEAD)"
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "📌 Version: $VERSION"

      - name: 🐳 Build and push Docker image
        run: |
          docker build -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.version }} .
          docker tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.version }} \
                     ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:staging-pr
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.version }}
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:staging-pr

      - name: 🔐 Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: 🚀 Deploy to Azure Web App Staging Slot
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ env.AZURE_WEBAPP_NAME }}
          slot-name: ${{ env.SLOT_NAME }}
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.version }}

      - name: ⚙️ Configure Azure App Settings
        uses: azure/appservice-settings@v1
        with:
          app-name: ${{ env.AZURE_WEBAPP_NAME }}
          slot-name: ${{ env.SLOT_NAME }}
          app-settings-json: |
            [
              {
                "name": "ASPNETCORE_ENVIRONMENT",
                "value": "Staging"
              },
              {
                "name": "REACT_APP_API_URL", 
                "value": "https://heblo-test-staging.azurewebsites.net"
              },
              {
                "name": "REACT_APP_USE_MOCK_AUTH",
                "value": "true"
              },
              {
                "name": "WEBSITES_PORT",
                "value": "8080"
              },
              {
                "name": "DatabaseSeeding__EnableAutoSeed",
                "value": "true"
              },
              {
                "name": "DatabaseSeeding__TruncateOnStartup", 
                "value": "true"
              },
              {
                "name": "DEPLOYMENT_SOURCE",
                "value": "PR-${{ github.event.inputs.pr_number }}"
              }
            ]
          connection-strings-json: |
            [
              {
                "name": "DefaultConnection",
                "value": "${{ secrets.STAGING_DB_CONNECTION_STRING }}",
                "type": "PostgreSQL"
              }
            ]

      - name: 🔄 Restart staging slot
        run: |
          az webapp restart --name ${{ env.AZURE_WEBAPP_NAME }} --slot ${{ env.SLOT_NAME }} --resource-group rgHeblo

      - name: ⏳ Wait for deployment to be ready
        run: |
          echo "⏳ Waiting for staging slot to be ready..."
          sleep 30
          for i in {1..10}; do
            if curl -s -o /dev/null -w "%{http_code}" https://heblo-test-staging.azurewebsites.net/health | grep -q "200"; then
              echo "✅ Staging slot is ready!"
              break
            fi
            echo "⏳ Waiting for staging slot... ($i/10)"
            sleep 10
          done

      - name: 💬 Comment on PR about deployment
        run: |
          gh pr comment ${{ github.event.inputs.pr_number }} \
            --body "## 🚀 PR Deployed to Staging!
          
          Your pull request has been successfully deployed to the staging environment:
          
          - **🌐 URL**: https://heblo-test-staging.azurewebsites.net
          - **📦 Version**: ${{ steps.version.outputs.version }}
          - **🌿 Branch**: \`${{ steps.pr-info.outputs.branch }}\`
          - **📝 Commit**: \`${{ steps.pr-info.outputs.commit }}\`
          - **🕐 Deployed**: $(date)
          
          ### 🧪 Testing
          You can now test your changes in the staging environment. The database is automatically seeded with test data.
          
          ### ⚠️ Important Notes
          - Staging environment uses **mock authentication**
          - Database is **automatically reset** on each deployment
          - This deployment will be **replaced** by the next PR deployment
          
          ---
          _Deployment triggered by: @${{ github.actor }}_" \
            --edit-last || \
          gh pr comment ${{ github.event.inputs.pr_number }} \
            --body "## 🚀 PR Deployed to Staging!
          
          Your pull request has been successfully deployed to the staging environment:
          
          - **🌐 URL**: https://heblo-test-staging.azurewebsites.net
          - **📦 Version**: ${{ steps.version.outputs.version }}
          - **🌿 Branch**: \`${{ steps.pr-info.outputs.branch }}\`
          - **📝 Commit**: \`${{ steps.pr-info.outputs.commit }}\`
          - **🕐 Deployed**: $(date)
          
          ### 🧪 Testing
          You can now test your changes in the staging environment. The database is automatically seeded with test data.
          
          ### ⚠️ Important Notes
          - Staging environment uses **mock authentication**
          - Database is **automatically reset** on each deployment
          - This deployment will be **replaced** by the next PR deployment
          
          ---
          _Deployment triggered by: @${{ github.actor }}_"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: 📝 Create deployment summary
        run: |
          echo "## 🚀 PR Staging Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **PR**: #${{ github.event.inputs.pr_number }} - ${{ steps.pr-info.outputs.title }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Author**: @${{ steps.pr-info.outputs.author }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch**: ${{ steps.pr-info.outputs.branch }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit**: ${{ steps.pr-info.outputs.commit }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Version**: ${{ steps.version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **URL**: https://heblo-test-staging.azurewebsites.net" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment**: Staging (Mock Auth + Auto-seeded DB)" >> $GITHUB_STEP_SUMMARY
          echo "- **Timestamp**: $(date)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🧪 Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "1. Test your changes at the staging URL" >> $GITHUB_STEP_SUMMARY
          echo "2. Verify functionality with mock authentication" >> $GITHUB_STEP_SUMMARY
          echo "3. Check database seeding and data operations" >> $GITHUB_STEP_SUMMARY

  run-e2e-tests:
    name: 🎭 Run E2E Tests on Staging
    runs-on: ubuntu-latest
    needs: deploy-pr-to-staging
    if: github.event.inputs.run_e2e_tests == 'true'
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.deploy-pr-to-staging.outputs.branch }}

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: 📦 Install dependencies
        working-directory: ./frontend
        run: npm install --legacy-peer-deps

      - name: 🎭 Install Playwright browsers
        working-directory: ./frontend
        run: npx playwright install --with-deps chromium

      - name: 🧪 Run E2E tests against staging
        working-directory: ./frontend
        run: npx playwright test --reporter=list
        env:
          PLAYWRIGHT_BASE_URL: https://heblo-test-staging.azurewebsites.net
          CI: true

      - name: 📤 Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: pr-${{ github.event.inputs.pr_number }}-e2e-results
          path: |
            frontend/test-results/
            frontend/playwright-report/
          retention-days: 7

      - name: 💬 Comment E2E results on PR
        if: always()
        run: |
          if [ -f frontend/test-results/results.json ]; then
            PASSED=$(grep -o '"status":"passed"' frontend/test-results/results.json | wc -l || echo "0")
            FAILED=$(grep -o '"status":"failed"' frontend/test-results/results.json | wc -l || echo "0")
            
            if [ "$FAILED" -eq "0" ]; then
              STATUS="✅ All tests passed!"
              ICON="✅"
            else
              STATUS="❌ Some tests failed"
              ICON="❌"
            fi
          else
            PASSED="N/A"
            FAILED="N/A" 
            STATUS="❓ Test results unavailable"
            ICON="❓"
          fi
          
          gh pr comment ${{ github.event.inputs.pr_number }} \
            --body "## 🎭 E2E Test Results (Staging)
          
          ${STATUS}
          
          - **✅ Passed**: ${PASSED}
          - **❌ Failed**: ${FAILED}
          - **🌐 Tested on**: https://heblo-test-staging.azurewebsites.net
          
          📄 **Test artifacts** are available in the workflow run.
          
          ---
          _Tests run automatically after PR staging deployment_" \
            --edit-last || \
          gh pr comment ${{ github.event.inputs.pr_number }} \
            --body "## 🎭 E2E Test Results (Staging)
          
          ${STATUS}
          
          - **✅ Passed**: ${PASSED}
          - **❌ Failed**: ${FAILED}
          - **🌐 Tested on**: https://heblo-test-staging.azurewebsites.net
          
          📄 **Test artifacts** are available in the workflow run.
          
          ---
          _Tests run automatically after PR staging deployment_"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: 📝 Add test results to summary
        if: always()
        run: |
          echo "## 🎭 E2E Test Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          if [ -f frontend/test-results/results.json ]; then
            PASSED=$(grep -o '"status":"passed"' frontend/test-results/results.json | wc -l || echo "0")
            FAILED=$(grep -o '"status":"failed"' frontend/test-results/results.json | wc -l || echo "0")
            echo "- **Passed**: $PASSED" >> $GITHUB_STEP_SUMMARY
            echo "- **Failed**: $FAILED" >> $GITHUB_STEP_SUMMARY
            
            if [ "$FAILED" -eq "0" ]; then
              echo "- **Status**: ✅ All tests passed" >> $GITHUB_STEP_SUMMARY
            else
              echo "- **Status**: ❌ Some tests failed" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "- **Status**: ❓ Test results not available" >> $GITHUB_STEP_SUMMARY
          fi
          echo "- **Environment**: https://heblo-test-staging.azurewebsites.net" >> $GITHUB_STEP_SUMMARY