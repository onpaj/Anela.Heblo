name: 🎭 Manual E2E Tests - Staging Environment

on:
  workflow_dispatch:
    inputs:
      test_pattern:
        description: 'Test pattern (e.g., "catalog" or "auth", leave empty for all E2E tests)'
        required: false
        default: ''
        type: string
      browser:
        description: 'Browser to run tests on'
        required: false
        default: 'chromium'
        type: choice
        options:
          - 'chromium'
          - 'firefox'
          - 'webkit'
          - 'all'

env:
  STAGING_URL: https://heblo.stg.anela.cz
  NODE_VERSION: '18'

jobs:
  validate-staging-health:
    name: 🏥 Validate Staging Health
    runs-on: ubuntu-latest
    
    steps:
      - name: 📊 Check Liveness Endpoint
        id: liveness
        run: |
          echo "🔍 Checking liveness endpoint..."
          response=$(curl -s -w "%{http_code}:%{response_code}" -o response_body.txt "${{ env.STAGING_URL }}/health/live")
          http_code=$(echo $response | cut -d':' -f1)
          
          echo "HTTP Status: $http_code"
          echo "Response body:"
          cat response_body.txt
          
          if [ "$http_code" = "200" ]; then
            echo "✅ Liveness check passed"
            echo "liveness_status=success" >> $GITHUB_OUTPUT
          else
            echo "❌ Liveness check failed with status $http_code"
            echo "liveness_status=failed" >> $GITHUB_OUTPUT
            exit 1
          fi

      - name: 📊 Check Readiness Endpoint
        id: readiness
        run: |
          echo "🔍 Checking readiness endpoint..."
          response=$(curl -s -w "%{http_code}:%{response_code}" -o response_body.txt "${{ env.STAGING_URL }}/health/ready")
          http_code=$(echo $response | cut -d':' -f1)
          
          echo "HTTP Status: $http_code"
          echo "Response body:"
          cat response_body.txt
          
          if [ "$http_code" = "200" ]; then
            echo "✅ Readiness check passed"
            echo "readiness_status=success" >> $GITHUB_OUTPUT
          else
            echo "❌ Readiness check failed with status $http_code"
            echo "readiness_status=failed" >> $GITHUB_OUTPUT
            exit 1
          fi

      - name: 📊 Check General Health Endpoint
        id: health
        run: |
          echo "🔍 Checking general health endpoint..."
          response=$(curl -s -w "%{http_code}:%{response_code}" -o response_body.txt "${{ env.STAGING_URL }}/health")
          http_code=$(echo $response | cut -d':' -f1)
          
          echo "HTTP Status: $http_code"
          echo "Response body:"
          cat response_body.txt
          
          if [ "$http_code" = "200" ]; then
            echo "✅ General health check passed"
            echo "health_status=success" >> $GITHUB_OUTPUT
          else
            echo "❌ General health check failed with status $http_code"
            echo "health_status=failed" >> $GITHUB_OUTPUT
            exit 1
          fi

      - name: 📝 Health Check Summary
        run: |
          echo "## 🏥 Staging Health Check Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Endpoint | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|----------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Liveness | ✅ Passed |" >> $GITHUB_STEP_SUMMARY
          echo "| Readiness | ✅ Passed |" >> $GITHUB_STEP_SUMMARY
          echo "| General Health | ✅ Passed |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🔗 **Staging URL:** ${{ env.STAGING_URL }}" >> $GITHUB_STEP_SUMMARY
          echo "🕐 **Validated at:** $(date)" >> $GITHUB_STEP_SUMMARY

  run-e2e-tests:
    name: 🎭 Run E2E Tests
    runs-on: ubuntu-latest
    needs: validate-staging-health
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: 📦 Install dependencies
        working-directory: ./frontend
        run: npm install --legacy-peer-deps

      - name: 🎭 Install Playwright browsers
        working-directory: ./frontend
        run: |
          if [ "${{ github.event.inputs.browser }}" = "all" ]; then
            npx playwright install --with-deps
          else
            npx playwright install --with-deps ${{ github.event.inputs.browser || 'chromium' }}
          fi

      - name: 📂 List E2E test files
        working-directory: ./frontend
        run: |
          echo "🔍 Available E2E test files:"
          find test/e2e -name "*.spec.ts" -type f | sort
          echo ""
          
          if [ -n "${{ github.event.inputs.test_pattern }}" ]; then
            echo "🎯 Tests matching pattern '${{ github.event.inputs.test_pattern }}':"
            find test/e2e -name "*${{ github.event.inputs.test_pattern }}*.spec.ts" -type f | sort
          else
            echo "🎯 Running ALL E2E tests"
          fi

      - name: 🔐 Validate Azure credentials
        working-directory: ./frontend
        run: |
          echo "🔍 Validating Azure service principal credentials..."
          
          # Check if credentials are present
          if [ -z "$AZURE_CLIENT_ID" ] || [ -z "$AZURE_CLIENT_SECRET" ] || [ -z "$AZURE_TENANT_ID" ]; then
            echo "❌ Missing Azure credentials"
            echo "AZURE_CLIENT_ID: ${AZURE_CLIENT_ID:+Present}"
            echo "AZURE_CLIENT_SECRET: ${AZURE_CLIENT_SECRET:+Present}"  
            echo "AZURE_TENANT_ID: ${AZURE_TENANT_ID:+Present}"
            exit 1
          fi
          
          # Test basic token acquisition
          echo "🔑 Testing token acquisition..."
          RESPONSE=$(curl -s -X POST "https://login.microsoftonline.com/$AZURE_TENANT_ID/oauth2/v2.0/token" \
            -H "Content-Type: application/x-www-form-urlencoded" \
            -d "grant_type=client_credentials&client_id=$AZURE_CLIENT_ID&client_secret=$AZURE_CLIENT_SECRET&scope=https://graph.microsoft.com/.default")
          
          if echo "$RESPONSE" | grep -q "access_token"; then
            echo "✅ Basic token acquisition successful"
          else
            echo "❌ Token acquisition failed:"
            echo "$RESPONSE" | jq '.' || echo "$RESPONSE"
            exit 1
          fi
          
          # Test backend API scope specifically
          echo "🔑 Testing backend API scope access..."
          API_RESPONSE=$(curl -s -X POST "https://login.microsoftonline.com/$AZURE_TENANT_ID/oauth2/v2.0/token" \
            -H "Content-Type: application/x-www-form-urlencoded" \
            -d "grant_type=client_credentials&client_id=$AZURE_CLIENT_ID&client_secret=$AZURE_CLIENT_SECRET&scope=api://8b34be89-f86f-422f-af40-7dbcd30cb66a/.default")
          
          if echo "$API_RESPONSE" | grep -q "access_token"; then
            echo "✅ Backend API scope access successful"
          else
            echo "❌ Backend API scope access failed:"
            echo "$API_RESPONSE" | jq '.' || echo "$API_RESPONSE"
            echo ""
            echo "💡 This likely means the service principal needs to be granted permissions to the backend API."
            echo "💡 The backend API scope is: api://8b34be89-f86f-422f-af40-7dbcd30cb66a/.default"
            exit 1
          fi
        env:
          AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
          AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}

      - name: 🧪 Run E2E tests against staging
        id: run-tests
        working-directory: ./frontend
        continue-on-error: true
        run: |
          # Determine test pattern
          if [ -n "${{ github.event.inputs.test_pattern }}" ]; then
            TEST_PATTERN="test/e2e/**/*${{ github.event.inputs.test_pattern }}*.spec.ts"
            echo "🎯 Running tests with pattern: $TEST_PATTERN"
          else
            TEST_PATTERN="test/e2e/"
            echo "🎯 Running all E2E tests from: $TEST_PATTERN"
          fi
          
          # Determine browser(s)
          if [ "${{ github.event.inputs.browser }}" = "all" ]; then
            echo "🌐 Running tests on all browsers"
            BROWSER_FLAG=""
          else
            BROWSER="${{ github.event.inputs.browser || 'chromium' }}"
            echo "🌐 Running tests on browser: $BROWSER"
            BROWSER_FLAG="--project=$BROWSER"
          fi
          
          # Run the tests  
          set +e
          npx playwright test $TEST_PATTERN $BROWSER_FLAG \
            --reporter=list 2>&1 | tee test_output.log
          TEST_EXIT_CODE=$?
          set -e
          
          echo "test_exit_code=$TEST_EXIT_CODE" >> $GITHUB_OUTPUT
          
          # Basic parsing from output log
          if [ -f test_output.log ]; then
            PASSED=$(grep -c "✓" test_output.log || echo "0")
            FAILED=$(grep -c "✖" test_output.log || echo "0")
            echo "parsed_passed=$PASSED" >> $GITHUB_OUTPUT
            echo "parsed_failed=$FAILED" >> $GITHUB_OUTPUT
          else
            echo "parsed_passed=0" >> $GITHUB_OUTPUT
            echo "parsed_failed=0" >> $GITHUB_OUTPUT
          fi
        env:
          PLAYWRIGHT_BASE_URL: ${{ env.STAGING_URL }}
          CI: true
          # Real Azure credentials for staging environment
          AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
          AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          # Additional test environment variables
          PLAYWRIGHT_FRONTEND_URL: ${{ env.STAGING_URL }}

      - name: 📤 Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: staging-e2e-test-results-${{ github.run_number }}
          path: |
            frontend/playwright-report/
            frontend/test-results/
          retention-days: 30

      - name: 📊 Parse test results
        if: always()
        id: test-results
        working-directory: ./frontend
        run: |
          # Use results from the test run step
          PASSED="${{ steps.run-tests.outputs.parsed_passed }}"
          FAILED="${{ steps.run-tests.outputs.parsed_failed }}"
          TOTAL=$((PASSED + FAILED))
          EXIT_CODE="${{ steps.run-tests.outputs.test_exit_code }}"
          
          echo "total=$TOTAL" >> $GITHUB_OUTPUT
          echo "passed=$PASSED" >> $GITHUB_OUTPUT  
          echo "failed=$FAILED" >> $GITHUB_OUTPUT
          echo "skipped=0" >> $GITHUB_OUTPUT
          echo "flaky=0" >> $GITHUB_OUTPUT
          echo "exit_code=$EXIT_CODE" >> $GITHUB_OUTPUT
          
          echo "📊 Test Results Summary:"
          echo "Total: $TOTAL, Passed: $PASSED, Failed: $FAILED, Exit Code: $EXIT_CODE"

      - name: 📝 Create test results summary
        if: always()
        run: |
          echo "## 🎭 E2E Test Results Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Metric | Count |" >> $GITHUB_STEP_SUMMARY
          echo "|--------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| **Total Tests** | ${{ steps.test-results.outputs.total }} |" >> $GITHUB_STEP_SUMMARY
          echo "| ✅ **Passed** | ${{ steps.test-results.outputs.passed }} |" >> $GITHUB_STEP_SUMMARY
          echo "| ❌ **Failed** | ${{ steps.test-results.outputs.failed }} |" >> $GITHUB_STEP_SUMMARY
          echo "| ⏭️ **Skipped** | ${{ steps.test-results.outputs.skipped }} |" >> $GITHUB_STEP_SUMMARY
          echo "| 🟡 **Flaky** | ${{ steps.test-results.outputs.flaky }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Test configuration details
          echo "### 🔧 Test Configuration" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment:** Staging" >> $GITHUB_STEP_SUMMARY
          echo "- **Base URL:** ${{ env.STAGING_URL }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Browser:** ${{ github.event.inputs.browser || 'chromium' }}" >> $GITHUB_STEP_SUMMARY
          
          if [ -n "${{ github.event.inputs.test_pattern }}" ]; then
            echo "- **Test Pattern:** ${{ github.event.inputs.test_pattern }}" >> $GITHUB_STEP_SUMMARY
          else
            echo "- **Test Scope:** All E2E tests" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "- **Timestamp:** $(date)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Add status badge based on exit code
          if [ "${{ steps.test-results.outputs.exit_code }}" = "0" ]; then
            echo "🎉 **All tests passed successfully!**" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ **Some tests failed. Check the test report for details.**" >> $GITHUB_STEP_SUMMARY
            echo "- **Exit Code:** ${{ steps.test-results.outputs.exit_code }}" >> $GITHUB_STEP_SUMMARY
          fi

      - name: 📋 Comment on failure
        if: failure()
        run: |
          echo "## ❌ E2E Test Execution Failed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "The E2E test execution failed. This could be due to:" >> $GITHUB_STEP_SUMMARY
          echo "- Environment issues with staging" >> $GITHUB_STEP_SUMMARY
          echo "- Test flakiness or timeout issues" >> $GITHUB_STEP_SUMMARY
          echo "- Application bugs in the staging environment" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Please check the test artifacts and logs for more details." >> $GITHUB_STEP_SUMMARY