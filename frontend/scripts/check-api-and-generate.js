const { execSync } = require('child_process');
const fs = require('fs');
const path = require('path');

console.log('üîç Checking if API client generation is needed...');

const OUTPUT_FILE = 'src/services/generated/api-client.ts';

// Check if client already exists
if (fs.existsSync(OUTPUT_FILE)) {
  const stats = fs.statSync(OUTPUT_FILE);
  const ageInMinutes = (Date.now() - stats.mtime.getTime()) / (1000 * 60);
  
  console.log(`üìÑ Existing client found (${Math.round(ageInMinutes)} minutes old)`);
  
  // If client is newer than 5 minutes, skip generation
  if (ageInMinutes < 5) {
    console.log('‚è≠Ô∏è  Skipping generation (client is recent)');
    process.exit(0);
  }
}

// Check if API is running
console.log('üåê Checking if API is accessible...');
try {
  execSync('curl -f -s "http://localhost:8080/swagger/v1/swagger.json" > /dev/null', { 
    stdio: 'pipe',
    timeout: 3000 
  });
  
  console.log('‚úÖ API is accessible, generating client...');
  
  // Run the generation script
  try {
    execSync('node scripts/generate-api-client.js', { stdio: 'inherit' });
  } catch (error) {
    console.warn('‚ö†Ô∏è  Client generation failed, but continuing build...');
    console.log('   The build will proceed with the existing client (if any)');
  }
  
} catch (error) {
  console.warn('‚ö†Ô∏è  API not accessible, skipping client generation');
  console.log('   This is normal if the API is not running during build');
  console.log('   The build will proceed with the existing client (if any)');
  
  if (!fs.existsSync(OUTPUT_FILE)) {
    console.log('üìù Creating placeholder client file...');
    
    const placeholderContent = `//----------------------
// <auto-generated>
//     This is a placeholder API client.
//     Run 'npm run generate-client' when the API is available.
// </auto-generated>
//----------------------

export class AnelaHebloApiClient {
  constructor(private baseUrl: string = 'http://localhost:8080') {}
  
  // Placeholder - will be replaced when API client is generated
}

export interface WeatherForecast {
  date: string;
  temperatureC: number;
  temperatureF: number;
  summary?: string;
}
`;
    
    fs.mkdirSync(path.dirname(OUTPUT_FILE), { recursive: true });
    fs.writeFileSync(OUTPUT_FILE, placeholderContent);
    console.log('‚úÖ Placeholder client created');
  }
}