const { execSync } = require('child_process');
const fs = require('fs');
const path = require('path');

console.log('üîß Generating TypeScript API client...');

// Configuration
const BACKEND_API_CLIENT_PATH = '../backend/src/Anela.Heblo.API.Client';
const NSWAG_CONFIG = 'nswag.typescript.json';
const OUTPUT_FILE = 'src/services/generated/api-client.ts';

try {
  // Check if backend project exists
  const backendPath = path.resolve(BACKEND_API_CLIENT_PATH);
  if (!fs.existsSync(backendPath)) {
    console.error(`‚ùå Backend API.Client project not found at: ${backendPath}`);
    process.exit(1);
  }

  const configPath = path.join(backendPath, NSWAG_CONFIG);
  if (!fs.existsSync(configPath)) {
    console.error(`‚ùå NSwag configuration not found at: ${configPath}`);
    process.exit(1);
  }

  // Check if API is accessible
  console.log('üåê Checking API accessibility...');
  try {
    execSync('curl -s "http://localhost:5000/swagger/v1/swagger.json" > /dev/null', { 
      stdio: 'pipe',
      timeout: 5000 
    });
    console.log('‚úÖ API is accessible');
  } catch (error) {
    console.warn('‚ö†Ô∏è  Warning: API might not be running on localhost:5000');
    console.log('   Make sure the backend API is running before generating the client');
    console.log('   You can start it with: cd ../backend/src/Anela.Heblo.API && dotnet run');
  }

  // Ensure output directory exists
  const outputDir = path.dirname(OUTPUT_FILE);
  if (!fs.existsSync(outputDir)) {
    fs.mkdirSync(outputDir, { recursive: true });
    console.log(`üìÅ Created output directory: ${outputDir}`);
  }

  // Generate the client
  console.log('‚öôÔ∏è  Running NSwag generation...');
  const command = `cd "${backendPath}" && dotnet nswag run "${NSWAG_CONFIG}"`;
  
  try {
    execSync(command, { stdio: 'inherit' });
    
    // Check if file was generated
    if (fs.existsSync(OUTPUT_FILE)) {
      const stats = fs.statSync(OUTPUT_FILE);
      console.log('‚úÖ TypeScript API client generated successfully!');
      console.log(`üìÑ Generated file: ${OUTPUT_FILE} (${Math.round(stats.size / 1024)}KB)`);
      
      // Add header comment to generated file
      const generatedContent = fs.readFileSync(OUTPUT_FILE, 'utf8');
      const headerComment = `//----------------------
// <auto-generated>
//     This code was generated by NSwag toolchain.
//     
//     Generated at: ${new Date().toISOString()}
//     Do not edit this file manually, changes will be overwritten.
// </auto-generated>
//----------------------

`;
      
      if (!generatedContent.startsWith('//----------------------')) {
        fs.writeFileSync(OUTPUT_FILE, headerComment + generatedContent);
        console.log('üìù Added generation header to client file');
      }
      
    } else {
      console.error('‚ùå Generated file not found at expected location');
      process.exit(1);
    }
    
  } catch (error) {
    console.error('‚ùå Failed to generate API client:', error.message);
    console.log('\nüí° Troubleshooting:');
    console.log('   1. Make sure NSwag is installed: dotnet tool install -g NSwag.ConsoleCore');
    console.log('   2. Ensure the backend API is running on localhost:5000');
    console.log('   3. Check that the API exposes Swagger at /swagger/v1/swagger.json');
    process.exit(1);
  }

} catch (error) {
  console.error('‚ùå Unexpected error:', error.message);
  process.exit(1);
}

console.log('üéâ API client generation completed!');