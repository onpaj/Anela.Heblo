//----------------------
// <auto-generated>
//     This is a placeholder API client for testing compilation.
//     This will be replaced by NSwag generated client.
// </auto-generated>
//----------------------

export interface WeatherForecast {
  date: string;
  temperatureC: number;
  temperatureF: number;
  summary?: string;
}

export class ApiClient {
  private baseUrl: string;
  private getAccessToken?: () => Promise<string | null>;

  constructor(baseUrl?: string, getAccessToken?: () => Promise<string | null>) {
    this.baseUrl = baseUrl || 'http://localhost:8080';
    this.getAccessToken = getAccessToken;
  }

  private async getAuthHeaders(): Promise<HeadersInit> {
    const headers: HeadersInit = {
      'Content-Type': 'application/json',
    };

    if (this.getAccessToken) {
      try {
        const token = await this.getAccessToken();
        if (token) {
          headers['Authorization'] = `Bearer ${token}`;
        }
      } catch (error) {
        console.warn('Failed to get access token:', error);
      }
    }

    return headers;
  }

  async weatherForecast(): Promise<WeatherForecast[]> {
    const headers = await this.getAuthHeaders();
    const response = await fetch(`${this.baseUrl}/WeatherForecast`, {
      method: 'GET',
      headers,
    });
    
    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }
    return response.json();
  }
}

export class ApiException extends Error {
  constructor(
    public message: string,
    public status: number,
    public response: string,
    public headers: { [key: string]: any },
    public result?: any
  ) {
    super(message);
  }
}