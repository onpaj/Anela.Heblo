//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

export class ApiClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl ?? "";
    }

    audit_GetDataLoadAuditLogs(limit: number | null | undefined, fromDate: Date | null | undefined, toDate: Date | null | undefined): Promise<FileResponse> {
        let url_ = this.baseUrl + "/api/Audit/data-loads?";
        if (limit !== undefined && limit !== null)
            url_ += "limit=" + encodeURIComponent("" + limit) + "&";
        if (fromDate !== undefined && fromDate !== null)
            url_ += "fromDate=" + encodeURIComponent(fromDate ? "" + fromDate.toISOString() : "") + "&";
        if (toDate !== undefined && toDate !== null)
            url_ += "toDate=" + encodeURIComponent(toDate ? "" + toDate.toISOString() : "") + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/octet-stream"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processAudit_GetDataLoadAuditLogs(_response);
        });
    }

    protected processAudit_GetDataLoadAuditLogs(response: Response): Promise<FileResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            let fileNameMatch = contentDisposition ? /filename\*=(?:(\\?['"])(.*?)\1|(?:[^\s]+'.*?')?([^;\n]*))/g.exec(contentDisposition) : undefined;
            let fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[3] || fileNameMatch[2] : undefined;
            if (fileName) {
                fileName = decodeURIComponent(fileName);
            } else {
                fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
                fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            }
            return response.blob().then(blob => { return { fileName: fileName, data: blob, status: status, headers: _headers }; });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<FileResponse>(null as any);
    }

    audit_GetAuditSummary(fromDate: Date | null | undefined, toDate: Date | null | undefined): Promise<FileResponse> {
        let url_ = this.baseUrl + "/api/Audit/summary?";
        if (fromDate !== undefined && fromDate !== null)
            url_ += "fromDate=" + encodeURIComponent(fromDate ? "" + fromDate.toISOString() : "") + "&";
        if (toDate !== undefined && toDate !== null)
            url_ += "toDate=" + encodeURIComponent(toDate ? "" + toDate.toISOString() : "") + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/octet-stream"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processAudit_GetAuditSummary(_response);
        });
    }

    protected processAudit_GetAuditSummary(response: Response): Promise<FileResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            let fileNameMatch = contentDisposition ? /filename\*=(?:(\\?['"])(.*?)\1|(?:[^\s]+'.*?')?([^;\n]*))/g.exec(contentDisposition) : undefined;
            let fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[3] || fileNameMatch[2] : undefined;
            if (fileName) {
                fileName = decodeURIComponent(fileName);
            } else {
                fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
                fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            }
            return response.blob().then(blob => { return { fileName: fileName, data: blob, status: status, headers: _headers }; });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<FileResponse>(null as any);
    }

    catalog_GetCatalogList(type: ProductType | null | undefined, pageNumber: number | undefined, pageSize: number | undefined, sortBy: string | null | undefined, sortDescending: boolean | undefined, productName: string | null | undefined, productCode: string | null | undefined): Promise<GetCatalogListResponse> {
        let url_ = this.baseUrl + "/api/Catalog?";
        if (type !== undefined && type !== null)
            url_ += "Type=" + encodeURIComponent("" + type) + "&";
        if (pageNumber === null)
            throw new Error("The parameter 'pageNumber' cannot be null.");
        else if (pageNumber !== undefined)
            url_ += "PageNumber=" + encodeURIComponent("" + pageNumber) + "&";
        if (pageSize === null)
            throw new Error("The parameter 'pageSize' cannot be null.");
        else if (pageSize !== undefined)
            url_ += "PageSize=" + encodeURIComponent("" + pageSize) + "&";
        if (sortBy !== undefined && sortBy !== null)
            url_ += "SortBy=" + encodeURIComponent("" + sortBy) + "&";
        if (sortDescending === null)
            throw new Error("The parameter 'sortDescending' cannot be null.");
        else if (sortDescending !== undefined)
            url_ += "SortDescending=" + encodeURIComponent("" + sortDescending) + "&";
        if (productName !== undefined && productName !== null)
            url_ += "ProductName=" + encodeURIComponent("" + productName) + "&";
        if (productCode !== undefined && productCode !== null)
            url_ += "ProductCode=" + encodeURIComponent("" + productCode) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCatalog_GetCatalogList(_response);
        });
    }

    protected processCatalog_GetCatalogList(response: Response): Promise<GetCatalogListResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GetCatalogListResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<GetCatalogListResponse>(null as any);
    }

    catalog_GetCatalogDetail(productCode: string, monthsBack: number | undefined): Promise<GetCatalogDetailResponse> {
        let url_ = this.baseUrl + "/api/Catalog/{productCode}?";
        if (productCode === undefined || productCode === null)
            throw new Error("The parameter 'productCode' must be defined.");
        url_ = url_.replace("{productCode}", encodeURIComponent("" + productCode));
        if (monthsBack === null)
            throw new Error("The parameter 'monthsBack' cannot be null.");
        else if (monthsBack !== undefined)
            url_ += "monthsBack=" + encodeURIComponent("" + monthsBack) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCatalog_GetCatalogDetail(_response);
        });
    }

    protected processCatalog_GetCatalogDetail(response: Response): Promise<GetCatalogDetailResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GetCatalogDetailResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<GetCatalogDetailResponse>(null as any);
    }

    catalog_RefreshTransportData(): Promise<FileResponse> {
        let url_ = this.baseUrl + "/api/Catalog/refresh/transport";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "POST",
            headers: {
                "Accept": "application/octet-stream"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCatalog_RefreshTransportData(_response);
        });
    }

    protected processCatalog_RefreshTransportData(response: Response): Promise<FileResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            let fileNameMatch = contentDisposition ? /filename\*=(?:(\\?['"])(.*?)\1|(?:[^\s]+'.*?')?([^;\n]*))/g.exec(contentDisposition) : undefined;
            let fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[3] || fileNameMatch[2] : undefined;
            if (fileName) {
                fileName = decodeURIComponent(fileName);
            } else {
                fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
                fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            }
            return response.blob().then(blob => { return { fileName: fileName, data: blob, status: status, headers: _headers }; });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<FileResponse>(null as any);
    }

    catalog_RefreshReserveData(): Promise<FileResponse> {
        let url_ = this.baseUrl + "/api/Catalog/refresh/reserve";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "POST",
            headers: {
                "Accept": "application/octet-stream"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCatalog_RefreshReserveData(_response);
        });
    }

    protected processCatalog_RefreshReserveData(response: Response): Promise<FileResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            let fileNameMatch = contentDisposition ? /filename\*=(?:(\\?['"])(.*?)\1|(?:[^\s]+'.*?')?([^;\n]*))/g.exec(contentDisposition) : undefined;
            let fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[3] || fileNameMatch[2] : undefined;
            if (fileName) {
                fileName = decodeURIComponent(fileName);
            } else {
                fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
                fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            }
            return response.blob().then(blob => { return { fileName: fileName, data: blob, status: status, headers: _headers }; });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<FileResponse>(null as any);
    }

    catalog_RefreshSalesData(): Promise<FileResponse> {
        let url_ = this.baseUrl + "/api/Catalog/refresh/sales";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "POST",
            headers: {
                "Accept": "application/octet-stream"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCatalog_RefreshSalesData(_response);
        });
    }

    protected processCatalog_RefreshSalesData(response: Response): Promise<FileResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            let fileNameMatch = contentDisposition ? /filename\*=(?:(\\?['"])(.*?)\1|(?:[^\s]+'.*?')?([^;\n]*))/g.exec(contentDisposition) : undefined;
            let fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[3] || fileNameMatch[2] : undefined;
            if (fileName) {
                fileName = decodeURIComponent(fileName);
            } else {
                fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
                fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            }
            return response.blob().then(blob => { return { fileName: fileName, data: blob, status: status, headers: _headers }; });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<FileResponse>(null as any);
    }

    catalog_RefreshAttributesData(): Promise<FileResponse> {
        let url_ = this.baseUrl + "/api/Catalog/refresh/attributes";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "POST",
            headers: {
                "Accept": "application/octet-stream"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCatalog_RefreshAttributesData(_response);
        });
    }

    protected processCatalog_RefreshAttributesData(response: Response): Promise<FileResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            let fileNameMatch = contentDisposition ? /filename\*=(?:(\\?['"])(.*?)\1|(?:[^\s]+'.*?')?([^;\n]*))/g.exec(contentDisposition) : undefined;
            let fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[3] || fileNameMatch[2] : undefined;
            if (fileName) {
                fileName = decodeURIComponent(fileName);
            } else {
                fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
                fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            }
            return response.blob().then(blob => { return { fileName: fileName, data: blob, status: status, headers: _headers }; });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<FileResponse>(null as any);
    }

    catalog_RefreshErpStockData(): Promise<FileResponse> {
        let url_ = this.baseUrl + "/api/Catalog/refresh/erp-stock";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "POST",
            headers: {
                "Accept": "application/octet-stream"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCatalog_RefreshErpStockData(_response);
        });
    }

    protected processCatalog_RefreshErpStockData(response: Response): Promise<FileResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            let fileNameMatch = contentDisposition ? /filename\*=(?:(\\?['"])(.*?)\1|(?:[^\s]+'.*?')?([^;\n]*))/g.exec(contentDisposition) : undefined;
            let fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[3] || fileNameMatch[2] : undefined;
            if (fileName) {
                fileName = decodeURIComponent(fileName);
            } else {
                fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
                fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            }
            return response.blob().then(blob => { return { fileName: fileName, data: blob, status: status, headers: _headers }; });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<FileResponse>(null as any);
    }

    catalog_RefreshEshopStockData(): Promise<FileResponse> {
        let url_ = this.baseUrl + "/api/Catalog/refresh/eshop-stock";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "POST",
            headers: {
                "Accept": "application/octet-stream"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCatalog_RefreshEshopStockData(_response);
        });
    }

    protected processCatalog_RefreshEshopStockData(response: Response): Promise<FileResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            let fileNameMatch = contentDisposition ? /filename\*=(?:(\\?['"])(.*?)\1|(?:[^\s]+'.*?')?([^;\n]*))/g.exec(contentDisposition) : undefined;
            let fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[3] || fileNameMatch[2] : undefined;
            if (fileName) {
                fileName = decodeURIComponent(fileName);
            } else {
                fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
                fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            }
            return response.blob().then(blob => { return { fileName: fileName, data: blob, status: status, headers: _headers }; });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<FileResponse>(null as any);
    }

    catalog_RefreshPurchaseHistoryData(): Promise<FileResponse> {
        let url_ = this.baseUrl + "/api/Catalog/refresh/purchase-history";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "POST",
            headers: {
                "Accept": "application/octet-stream"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCatalog_RefreshPurchaseHistoryData(_response);
        });
    }

    protected processCatalog_RefreshPurchaseHistoryData(response: Response): Promise<FileResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            let fileNameMatch = contentDisposition ? /filename\*=(?:(\\?['"])(.*?)\1|(?:[^\s]+'.*?')?([^;\n]*))/g.exec(contentDisposition) : undefined;
            let fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[3] || fileNameMatch[2] : undefined;
            if (fileName) {
                fileName = decodeURIComponent(fileName);
            } else {
                fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
                fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            }
            return response.blob().then(blob => { return { fileName: fileName, data: blob, status: status, headers: _headers }; });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<FileResponse>(null as any);
    }

    catalog_RefreshManufactureHistoryData(): Promise<FileResponse> {
        let url_ = this.baseUrl + "/api/Catalog/refresh/manufacture-history";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "POST",
            headers: {
                "Accept": "application/octet-stream"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCatalog_RefreshManufactureHistoryData(_response);
        });
    }

    protected processCatalog_RefreshManufactureHistoryData(response: Response): Promise<FileResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            let fileNameMatch = contentDisposition ? /filename\*=(?:(\\?['"])(.*?)\1|(?:[^\s]+'.*?')?([^;\n]*))/g.exec(contentDisposition) : undefined;
            let fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[3] || fileNameMatch[2] : undefined;
            if (fileName) {
                fileName = decodeURIComponent(fileName);
            } else {
                fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
                fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            }
            return response.blob().then(blob => { return { fileName: fileName, data: blob, status: status, headers: _headers }; });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<FileResponse>(null as any);
    }

    catalog_RefreshConsumedHistoryData(): Promise<FileResponse> {
        let url_ = this.baseUrl + "/api/Catalog/refresh/consumed-history";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "POST",
            headers: {
                "Accept": "application/octet-stream"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCatalog_RefreshConsumedHistoryData(_response);
        });
    }

    protected processCatalog_RefreshConsumedHistoryData(response: Response): Promise<FileResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            let fileNameMatch = contentDisposition ? /filename\*=(?:(\\?['"])(.*?)\1|(?:[^\s]+'.*?')?([^;\n]*))/g.exec(contentDisposition) : undefined;
            let fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[3] || fileNameMatch[2] : undefined;
            if (fileName) {
                fileName = decodeURIComponent(fileName);
            } else {
                fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
                fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            }
            return response.blob().then(blob => { return { fileName: fileName, data: blob, status: status, headers: _headers }; });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<FileResponse>(null as any);
    }

    catalog_RefreshStockTakingData(): Promise<FileResponse> {
        let url_ = this.baseUrl + "/api/Catalog/refresh/stock-taking";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "POST",
            headers: {
                "Accept": "application/octet-stream"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCatalog_RefreshStockTakingData(_response);
        });
    }

    protected processCatalog_RefreshStockTakingData(response: Response): Promise<FileResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            let fileNameMatch = contentDisposition ? /filename\*=(?:(\\?['"])(.*?)\1|(?:[^\s]+'.*?')?([^;\n]*))/g.exec(contentDisposition) : undefined;
            let fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[3] || fileNameMatch[2] : undefined;
            if (fileName) {
                fileName = decodeURIComponent(fileName);
            } else {
                fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
                fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            }
            return response.blob().then(blob => { return { fileName: fileName, data: blob, status: status, headers: _headers }; });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<FileResponse>(null as any);
    }

    catalog_RefreshLotsData(): Promise<FileResponse> {
        let url_ = this.baseUrl + "/api/Catalog/refresh/lots";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "POST",
            headers: {
                "Accept": "application/octet-stream"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCatalog_RefreshLotsData(_response);
        });
    }

    protected processCatalog_RefreshLotsData(response: Response): Promise<FileResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            let fileNameMatch = contentDisposition ? /filename\*=(?:(\\?['"])(.*?)\1|(?:[^\s]+'.*?')?([^;\n]*))/g.exec(contentDisposition) : undefined;
            let fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[3] || fileNameMatch[2] : undefined;
            if (fileName) {
                fileName = decodeURIComponent(fileName);
            } else {
                fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
                fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            }
            return response.blob().then(blob => { return { fileName: fileName, data: blob, status: status, headers: _headers }; });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<FileResponse>(null as any);
    }

    catalog_RefreshEshopPricesData(): Promise<FileResponse> {
        let url_ = this.baseUrl + "/api/Catalog/refresh/eshop-prices";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "POST",
            headers: {
                "Accept": "application/octet-stream"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCatalog_RefreshEshopPricesData(_response);
        });
    }

    protected processCatalog_RefreshEshopPricesData(response: Response): Promise<FileResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            let fileNameMatch = contentDisposition ? /filename\*=(?:(\\?['"])(.*?)\1|(?:[^\s]+'.*?')?([^;\n]*))/g.exec(contentDisposition) : undefined;
            let fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[3] || fileNameMatch[2] : undefined;
            if (fileName) {
                fileName = decodeURIComponent(fileName);
            } else {
                fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
                fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            }
            return response.blob().then(blob => { return { fileName: fileName, data: blob, status: status, headers: _headers }; });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<FileResponse>(null as any);
    }

    catalog_RefreshErpPricesData(): Promise<FileResponse> {
        let url_ = this.baseUrl + "/api/Catalog/refresh/erp-prices";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "POST",
            headers: {
                "Accept": "application/octet-stream"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCatalog_RefreshErpPricesData(_response);
        });
    }

    protected processCatalog_RefreshErpPricesData(response: Response): Promise<FileResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            let fileNameMatch = contentDisposition ? /filename\*=(?:(\\?['"])(.*?)\1|(?:[^\s]+'.*?')?([^;\n]*))/g.exec(contentDisposition) : undefined;
            let fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[3] || fileNameMatch[2] : undefined;
            if (fileName) {
                fileName = decodeURIComponent(fileName);
            } else {
                fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
                fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            }
            return response.blob().then(blob => { return { fileName: fileName, data: blob, status: status, headers: _headers }; });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<FileResponse>(null as any);
    }

    catalog_RefreshManufactureDifficultyData(): Promise<FileResponse> {
        let url_ = this.baseUrl + "/api/Catalog/refresh/manufacture-difficulty";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "POST",
            headers: {
                "Accept": "application/octet-stream"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCatalog_RefreshManufactureDifficultyData(_response);
        });
    }

    protected processCatalog_RefreshManufactureDifficultyData(response: Response): Promise<FileResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            let fileNameMatch = contentDisposition ? /filename\*=(?:(\\?['"])(.*?)\1|(?:[^\s]+'.*?')?([^;\n]*))/g.exec(contentDisposition) : undefined;
            let fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[3] || fileNameMatch[2] : undefined;
            if (fileName) {
                fileName = decodeURIComponent(fileName);
            } else {
                fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
                fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            }
            return response.blob().then(blob => { return { fileName: fileName, data: blob, status: status, headers: _headers }; });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<FileResponse>(null as any);
    }

    catalog_GetMaterialsForPurchase(searchTerm: string | null | undefined, limit: number | undefined): Promise<GetMaterialsForPurchaseResponse> {
        let url_ = this.baseUrl + "/api/Catalog/materials-for-purchase?";
        if (searchTerm !== undefined && searchTerm !== null)
            url_ += "SearchTerm=" + encodeURIComponent("" + searchTerm) + "&";
        if (limit === null)
            throw new Error("The parameter 'limit' cannot be null.");
        else if (limit !== undefined)
            url_ += "Limit=" + encodeURIComponent("" + limit) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCatalog_GetMaterialsForPurchase(_response);
        });
    }

    protected processCatalog_GetMaterialsForPurchase(response: Response): Promise<GetMaterialsForPurchaseResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GetMaterialsForPurchaseResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<GetMaterialsForPurchaseResponse>(null as any);
    }

    catalog_GetProductsForAutocomplete(searchTerm: string | null | undefined, limit: number | undefined, productTypes: ProductType[] | null | undefined): Promise<GetCatalogListResponse> {
        let url_ = this.baseUrl + "/api/Catalog/autocomplete?";
        if (searchTerm !== undefined && searchTerm !== null)
            url_ += "searchTerm=" + encodeURIComponent("" + searchTerm) + "&";
        if (limit === null)
            throw new Error("The parameter 'limit' cannot be null.");
        else if (limit !== undefined)
            url_ += "limit=" + encodeURIComponent("" + limit) + "&";
        if (productTypes !== undefined && productTypes !== null)
            productTypes && productTypes.forEach(item => { url_ += "productTypes=" + encodeURIComponent("" + item) + "&"; });
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCatalog_GetProductsForAutocomplete(_response);
        });
    }

    protected processCatalog_GetProductsForAutocomplete(response: Response): Promise<GetCatalogListResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GetCatalogListResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<GetCatalogListResponse>(null as any);
    }

    configuration_GetConfiguration(): Promise<GetConfigurationResponse> {
        let url_ = this.baseUrl + "/api/Configuration";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processConfiguration_GetConfiguration(_response);
        });
    }

    protected processConfiguration_GetConfiguration(response: Response): Promise<GetConfigurationResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GetConfigurationResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<GetConfigurationResponse>(null as any);
    }

    diagnostics_TestLogging(): Promise<FileResponse> {
        let url_ = this.baseUrl + "/api/Diagnostics/test-logging";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/octet-stream"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDiagnostics_TestLogging(_response);
        });
    }

    protected processDiagnostics_TestLogging(response: Response): Promise<FileResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            let fileNameMatch = contentDisposition ? /filename\*=(?:(\\?['"])(.*?)\1|(?:[^\s]+'.*?')?([^;\n]*))/g.exec(contentDisposition) : undefined;
            let fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[3] || fileNameMatch[2] : undefined;
            if (fileName) {
                fileName = decodeURIComponent(fileName);
            } else {
                fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
                fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            }
            return response.blob().then(blob => { return { fileName: fileName, data: blob, status: status, headers: _headers }; });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<FileResponse>(null as any);
    }

    diagnostics_TestException(): Promise<FileResponse> {
        let url_ = this.baseUrl + "/api/Diagnostics/test-exception";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/octet-stream"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDiagnostics_TestException(_response);
        });
    }

    protected processDiagnostics_TestException(response: Response): Promise<FileResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            let fileNameMatch = contentDisposition ? /filename\*=(?:(\\?['"])(.*?)\1|(?:[^\s]+'.*?')?([^;\n]*))/g.exec(contentDisposition) : undefined;
            let fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[3] || fileNameMatch[2] : undefined;
            if (fileName) {
                fileName = decodeURIComponent(fileName);
            } else {
                fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
                fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            }
            return response.blob().then(blob => { return { fileName: fileName, data: blob, status: status, headers: _headers }; });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<FileResponse>(null as any);
    }

    diagnostics_Health(): Promise<FileResponse> {
        let url_ = this.baseUrl + "/api/Diagnostics/health";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/octet-stream"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDiagnostics_Health(_response);
        });
    }

    protected processDiagnostics_Health(response: Response): Promise<FileResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            let fileNameMatch = contentDisposition ? /filename\*=(?:(\\?['"])(.*?)\1|(?:[^\s]+'.*?')?([^;\n]*))/g.exec(contentDisposition) : undefined;
            let fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[3] || fileNameMatch[2] : undefined;
            if (fileName) {
                fileName = decodeURIComponent(fileName);
            } else {
                fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
                fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            }
            return response.blob().then(blob => { return { fileName: fileName, data: blob, status: status, headers: _headers }; });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<FileResponse>(null as any);
    }

    diagnostics_GetApplicationInsightsConfig(): Promise<FileResponse> {
        let url_ = this.baseUrl + "/api/Diagnostics/appinsights-config";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/octet-stream"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDiagnostics_GetApplicationInsightsConfig(_response);
        });
    }

    protected processDiagnostics_GetApplicationInsightsConfig(response: Response): Promise<FileResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            let fileNameMatch = contentDisposition ? /filename\*=(?:(\\?['"])(.*?)\1|(?:[^\s]+'.*?')?([^;\n]*))/g.exec(contentDisposition) : undefined;
            let fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[3] || fileNameMatch[2] : undefined;
            if (fileName) {
                fileName = decodeURIComponent(fileName);
            } else {
                fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
                fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            }
            return response.blob().then(blob => { return { fileName: fileName, data: blob, status: status, headers: _headers }; });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<FileResponse>(null as any);
    }

    financialOverview_GetFinancialOverview(months: number | null | undefined, includeStockData: boolean | undefined): Promise<GetFinancialOverviewResponse> {
        let url_ = this.baseUrl + "/api/FinancialOverview?";
        if (months !== undefined && months !== null)
            url_ += "months=" + encodeURIComponent("" + months) + "&";
        if (includeStockData === null)
            throw new Error("The parameter 'includeStockData' cannot be null.");
        else if (includeStockData !== undefined)
            url_ += "includeStockData=" + encodeURIComponent("" + includeStockData) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processFinancialOverview_GetFinancialOverview(_response);
        });
    }

    protected processFinancialOverview_GetFinancialOverview(response: Response): Promise<GetFinancialOverviewResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GetFinancialOverviewResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status === 403) {
            return response.text().then((_responseText) => {
            let result403: any = null;
            let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result403 = ProblemDetails.fromJS(resultData403);
            return throwException("A server side error occurred.", status, _responseText, _headers, result403);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<GetFinancialOverviewResponse>(null as any);
    }

    journal_GetJournalEntries(pageNumber: number | undefined, pageSize: number | undefined, sortBy: string | undefined, sortDirection: string | undefined): Promise<GetJournalEntriesResponse> {
        let url_ = this.baseUrl + "/api/Journal?";
        if (pageNumber === null)
            throw new Error("The parameter 'pageNumber' cannot be null.");
        else if (pageNumber !== undefined)
            url_ += "PageNumber=" + encodeURIComponent("" + pageNumber) + "&";
        if (pageSize === null)
            throw new Error("The parameter 'pageSize' cannot be null.");
        else if (pageSize !== undefined)
            url_ += "PageSize=" + encodeURIComponent("" + pageSize) + "&";
        if (sortBy === null)
            throw new Error("The parameter 'sortBy' cannot be null.");
        else if (sortBy !== undefined)
            url_ += "SortBy=" + encodeURIComponent("" + sortBy) + "&";
        if (sortDirection === null)
            throw new Error("The parameter 'sortDirection' cannot be null.");
        else if (sortDirection !== undefined)
            url_ += "SortDirection=" + encodeURIComponent("" + sortDirection) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processJournal_GetJournalEntries(_response);
        });
    }

    protected processJournal_GetJournalEntries(response: Response): Promise<GetJournalEntriesResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GetJournalEntriesResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<GetJournalEntriesResponse>(null as any);
    }

    journal_CreateJournalEntry(request: CreateJournalEntryRequest): Promise<CreateJournalEntryResponse> {
        let url_ = this.baseUrl + "/api/Journal";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processJournal_CreateJournalEntry(_response);
        });
    }

    protected processJournal_CreateJournalEntry(response: Response): Promise<CreateJournalEntryResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 201) {
            return response.text().then((_responseText) => {
            let result201: any = null;
            let resultData201 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result201 = CreateJournalEntryResponse.fromJS(resultData201);
            return result201;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<CreateJournalEntryResponse>(null as any);
    }

    journal_SearchJournalEntries(searchText: string | null | undefined, dateFrom: Date | null | undefined, dateTo: Date | null | undefined, productCodes: string[] | null | undefined, productCodePrefixes: string[] | null | undefined, tagIds: number[] | null | undefined, createdByUserId: string | null | undefined, pageNumber: number | undefined, pageSize: number | undefined, sortBy: string | undefined, sortDirection: string | undefined): Promise<SearchJournalEntriesResponse> {
        let url_ = this.baseUrl + "/api/Journal/search?";
        if (searchText !== undefined && searchText !== null)
            url_ += "SearchText=" + encodeURIComponent("" + searchText) + "&";
        if (dateFrom !== undefined && dateFrom !== null)
            url_ += "DateFrom=" + encodeURIComponent(dateFrom ? "" + dateFrom.toISOString() : "") + "&";
        if (dateTo !== undefined && dateTo !== null)
            url_ += "DateTo=" + encodeURIComponent(dateTo ? "" + dateTo.toISOString() : "") + "&";
        if (productCodes !== undefined && productCodes !== null)
            productCodes && productCodes.forEach(item => { url_ += "ProductCodes=" + encodeURIComponent("" + item) + "&"; });
        if (productCodePrefixes !== undefined && productCodePrefixes !== null)
            productCodePrefixes && productCodePrefixes.forEach(item => { url_ += "ProductCodePrefixes=" + encodeURIComponent("" + item) + "&"; });
        if (tagIds !== undefined && tagIds !== null)
            tagIds && tagIds.forEach(item => { url_ += "TagIds=" + encodeURIComponent("" + item) + "&"; });
        if (createdByUserId !== undefined && createdByUserId !== null)
            url_ += "CreatedByUserId=" + encodeURIComponent("" + createdByUserId) + "&";
        if (pageNumber === null)
            throw new Error("The parameter 'pageNumber' cannot be null.");
        else if (pageNumber !== undefined)
            url_ += "PageNumber=" + encodeURIComponent("" + pageNumber) + "&";
        if (pageSize === null)
            throw new Error("The parameter 'pageSize' cannot be null.");
        else if (pageSize !== undefined)
            url_ += "PageSize=" + encodeURIComponent("" + pageSize) + "&";
        if (sortBy === null)
            throw new Error("The parameter 'sortBy' cannot be null.");
        else if (sortBy !== undefined)
            url_ += "SortBy=" + encodeURIComponent("" + sortBy) + "&";
        if (sortDirection === null)
            throw new Error("The parameter 'sortDirection' cannot be null.");
        else if (sortDirection !== undefined)
            url_ += "SortDirection=" + encodeURIComponent("" + sortDirection) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processJournal_SearchJournalEntries(_response);
        });
    }

    protected processJournal_SearchJournalEntries(response: Response): Promise<SearchJournalEntriesResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = SearchJournalEntriesResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<SearchJournalEntriesResponse>(null as any);
    }

    journal_GetJournalEntry(id: number): Promise<JournalEntryDto> {
        let url_ = this.baseUrl + "/api/Journal/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processJournal_GetJournalEntry(_response);
        });
    }

    protected processJournal_GetJournalEntry(response: Response): Promise<JournalEntryDto> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = JournalEntryDto.fromJS(resultData200);
            return result200;
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("A server side error occurred.", status, _responseText, _headers, result404);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<JournalEntryDto>(null as any);
    }

    journal_UpdateJournalEntry(id: number, request: UpdateJournalEntryRequest): Promise<UpdateJournalEntryResponse> {
        let url_ = this.baseUrl + "/api/Journal/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_: RequestInit = {
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processJournal_UpdateJournalEntry(_response);
        });
    }

    protected processJournal_UpdateJournalEntry(response: Response): Promise<UpdateJournalEntryResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = UpdateJournalEntryResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("A server side error occurred.", status, _responseText, _headers, result404);
            });
        } else if (status === 403) {
            return response.text().then((_responseText) => {
            let result403: any = null;
            let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result403 = ProblemDetails.fromJS(resultData403);
            return throwException("A server side error occurred.", status, _responseText, _headers, result403);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<UpdateJournalEntryResponse>(null as any);
    }

    journal_DeleteJournalEntry(id: number): Promise<void> {
        let url_ = this.baseUrl + "/api/Journal/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "DELETE",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processJournal_DeleteJournalEntry(_response);
        });
    }

    protected processJournal_DeleteJournalEntry(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 204) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("A server side error occurred.", status, _responseText, _headers, result404);
            });
        } else if (status === 403) {
            return response.text().then((_responseText) => {
            let result403: any = null;
            let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result403 = ProblemDetails.fromJS(resultData403);
            return throwException("A server side error occurred.", status, _responseText, _headers, result403);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    journal_GetJournalTags(): Promise<GetJournalTagsResponse> {
        let url_ = this.baseUrl + "/api/Journal/tags";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processJournal_GetJournalTags(_response);
        });
    }

    protected processJournal_GetJournalTags(response: Response): Promise<GetJournalTagsResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GetJournalTagsResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<GetJournalTagsResponse>(null as any);
    }

    journal_CreateJournalTag(request: CreateJournalTagRequest): Promise<CreateJournalTagResponse> {
        let url_ = this.baseUrl + "/api/Journal/tags";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processJournal_CreateJournalTag(_response);
        });
    }

    protected processJournal_CreateJournalTag(response: Response): Promise<CreateJournalTagResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 201) {
            return response.text().then((_responseText) => {
            let result201: any = null;
            let resultData201 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result201 = CreateJournalTagResponse.fromJS(resultData201);
            return result201;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<CreateJournalTagResponse>(null as any);
    }

    productMargins_GetProductMargins(productCode: string | null | undefined, productName: string | null | undefined, productType: ProductType | null | undefined, pageNumber: number | undefined, pageSize: number | undefined, sortBy: string | null | undefined, sortDescending: boolean | undefined, dateFrom: Date | null | undefined, dateTo: Date | null | undefined): Promise<GetProductMarginsResponse> {
        let url_ = this.baseUrl + "/api/ProductMargins?";
        if (productCode !== undefined && productCode !== null)
            url_ += "ProductCode=" + encodeURIComponent("" + productCode) + "&";
        if (productName !== undefined && productName !== null)
            url_ += "ProductName=" + encodeURIComponent("" + productName) + "&";
        if (productType !== undefined && productType !== null)
            url_ += "ProductType=" + encodeURIComponent("" + productType) + "&";
        if (pageNumber === null)
            throw new Error("The parameter 'pageNumber' cannot be null.");
        else if (pageNumber !== undefined)
            url_ += "PageNumber=" + encodeURIComponent("" + pageNumber) + "&";
        if (pageSize === null)
            throw new Error("The parameter 'pageSize' cannot be null.");
        else if (pageSize !== undefined)
            url_ += "PageSize=" + encodeURIComponent("" + pageSize) + "&";
        if (sortBy !== undefined && sortBy !== null)
            url_ += "SortBy=" + encodeURIComponent("" + sortBy) + "&";
        if (sortDescending === null)
            throw new Error("The parameter 'sortDescending' cannot be null.");
        else if (sortDescending !== undefined)
            url_ += "SortDescending=" + encodeURIComponent("" + sortDescending) + "&";
        if (dateFrom !== undefined && dateFrom !== null)
            url_ += "DateFrom=" + encodeURIComponent(dateFrom ? "" + dateFrom.toISOString() : "") + "&";
        if (dateTo !== undefined && dateTo !== null)
            url_ += "DateTo=" + encodeURIComponent(dateTo ? "" + dateTo.toISOString() : "") + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processProductMargins_GetProductMargins(_response);
        });
    }

    protected processProductMargins_GetProductMargins(response: Response): Promise<GetProductMarginsResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GetProductMarginsResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<GetProductMarginsResponse>(null as any);
    }

    purchaseOrders_GetPurchaseOrders(searchTerm: string | null | undefined, status: string | null | undefined, fromDate: Date | null | undefined, toDate: Date | null | undefined, supplierId: number | null | undefined, pageNumber: number | undefined, pageSize: number | undefined, sortBy: string | undefined, sortDescending: boolean | undefined): Promise<GetPurchaseOrdersResponse> {
        let url_ = this.baseUrl + "/api/purchase-orders?";
        if (searchTerm !== undefined && searchTerm !== null)
            url_ += "SearchTerm=" + encodeURIComponent("" + searchTerm) + "&";
        if (status !== undefined && status !== null)
            url_ += "Status=" + encodeURIComponent("" + status) + "&";
        if (fromDate !== undefined && fromDate !== null)
            url_ += "FromDate=" + encodeURIComponent(fromDate ? "" + fromDate.toISOString() : "") + "&";
        if (toDate !== undefined && toDate !== null)
            url_ += "ToDate=" + encodeURIComponent(toDate ? "" + toDate.toISOString() : "") + "&";
        if (supplierId !== undefined && supplierId !== null)
            url_ += "SupplierId=" + encodeURIComponent("" + supplierId) + "&";
        if (pageNumber === null)
            throw new Error("The parameter 'pageNumber' cannot be null.");
        else if (pageNumber !== undefined)
            url_ += "PageNumber=" + encodeURIComponent("" + pageNumber) + "&";
        if (pageSize === null)
            throw new Error("The parameter 'pageSize' cannot be null.");
        else if (pageSize !== undefined)
            url_ += "PageSize=" + encodeURIComponent("" + pageSize) + "&";
        if (sortBy === null)
            throw new Error("The parameter 'sortBy' cannot be null.");
        else if (sortBy !== undefined)
            url_ += "SortBy=" + encodeURIComponent("" + sortBy) + "&";
        if (sortDescending === null)
            throw new Error("The parameter 'sortDescending' cannot be null.");
        else if (sortDescending !== undefined)
            url_ += "SortDescending=" + encodeURIComponent("" + sortDescending) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processPurchaseOrders_GetPurchaseOrders(_response);
        });
    }

    protected processPurchaseOrders_GetPurchaseOrders(response: Response): Promise<GetPurchaseOrdersResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GetPurchaseOrdersResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<GetPurchaseOrdersResponse>(null as any);
    }

    purchaseOrders_CreatePurchaseOrder(request: CreatePurchaseOrderRequest): Promise<CreatePurchaseOrderResponse> {
        let url_ = this.baseUrl + "/api/purchase-orders";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processPurchaseOrders_CreatePurchaseOrder(_response);
        });
    }

    protected processPurchaseOrders_CreatePurchaseOrder(response: Response): Promise<CreatePurchaseOrderResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CreatePurchaseOrderResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<CreatePurchaseOrderResponse>(null as any);
    }

    purchaseOrders_GetPurchaseOrderById(id: number): Promise<GetPurchaseOrderByIdResponse> {
        let url_ = this.baseUrl + "/api/purchase-orders/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processPurchaseOrders_GetPurchaseOrderById(_response);
        });
    }

    protected processPurchaseOrders_GetPurchaseOrderById(response: Response): Promise<GetPurchaseOrderByIdResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GetPurchaseOrderByIdResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<GetPurchaseOrderByIdResponse>(null as any);
    }

    purchaseOrders_UpdatePurchaseOrder(id: number, request: UpdatePurchaseOrderRequest): Promise<UpdatePurchaseOrderResponse> {
        let url_ = this.baseUrl + "/api/purchase-orders/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_: RequestInit = {
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processPurchaseOrders_UpdatePurchaseOrder(_response);
        });
    }

    protected processPurchaseOrders_UpdatePurchaseOrder(response: Response): Promise<UpdatePurchaseOrderResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = UpdatePurchaseOrderResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<UpdatePurchaseOrderResponse>(null as any);
    }

    purchaseOrders_UpdatePurchaseOrderStatus(id: number, request: UpdatePurchaseOrderStatusRequest): Promise<UpdatePurchaseOrderStatusResponse> {
        let url_ = this.baseUrl + "/api/purchase-orders/{id}/status";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_: RequestInit = {
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processPurchaseOrders_UpdatePurchaseOrderStatus(_response);
        });
    }

    protected processPurchaseOrders_UpdatePurchaseOrderStatus(response: Response): Promise<UpdatePurchaseOrderStatusResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = UpdatePurchaseOrderStatusResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<UpdatePurchaseOrderStatusResponse>(null as any);
    }

    purchaseOrders_GetPurchaseOrderHistory(id: number): Promise<PurchaseOrderHistoryDto[]> {
        let url_ = this.baseUrl + "/api/purchase-orders/{id}/history";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processPurchaseOrders_GetPurchaseOrderHistory(_response);
        });
    }

    protected processPurchaseOrders_GetPurchaseOrderHistory(response: Response): Promise<PurchaseOrderHistoryDto[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(PurchaseOrderHistoryDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<PurchaseOrderHistoryDto[]>(null as any);
    }

    purchaseStockAnalysis_GetStockAnalysis(fromDate: Date | null | undefined, toDate: Date | null | undefined, stockStatus: StockStatusFilter | undefined, onlyConfigured: boolean | undefined, searchTerm: string | null | undefined, pageNumber: number | undefined, pageSize: number | undefined, sortBy: StockAnalysisSortBy | undefined, sortDescending: boolean | undefined): Promise<GetPurchaseStockAnalysisResponse> {
        let url_ = this.baseUrl + "/api/purchase-stock-analysis?";
        if (fromDate !== undefined && fromDate !== null)
            url_ += "FromDate=" + encodeURIComponent(fromDate ? "" + fromDate.toISOString() : "") + "&";
        if (toDate !== undefined && toDate !== null)
            url_ += "ToDate=" + encodeURIComponent(toDate ? "" + toDate.toISOString() : "") + "&";
        if (stockStatus === null)
            throw new Error("The parameter 'stockStatus' cannot be null.");
        else if (stockStatus !== undefined)
            url_ += "StockStatus=" + encodeURIComponent("" + stockStatus) + "&";
        if (onlyConfigured === null)
            throw new Error("The parameter 'onlyConfigured' cannot be null.");
        else if (onlyConfigured !== undefined)
            url_ += "OnlyConfigured=" + encodeURIComponent("" + onlyConfigured) + "&";
        if (searchTerm !== undefined && searchTerm !== null)
            url_ += "SearchTerm=" + encodeURIComponent("" + searchTerm) + "&";
        if (pageNumber === null)
            throw new Error("The parameter 'pageNumber' cannot be null.");
        else if (pageNumber !== undefined)
            url_ += "PageNumber=" + encodeURIComponent("" + pageNumber) + "&";
        if (pageSize === null)
            throw new Error("The parameter 'pageSize' cannot be null.");
        else if (pageSize !== undefined)
            url_ += "PageSize=" + encodeURIComponent("" + pageSize) + "&";
        if (sortBy === null)
            throw new Error("The parameter 'sortBy' cannot be null.");
        else if (sortBy !== undefined)
            url_ += "SortBy=" + encodeURIComponent("" + sortBy) + "&";
        if (sortDescending === null)
            throw new Error("The parameter 'sortDescending' cannot be null.");
        else if (sortDescending !== undefined)
            url_ += "SortDescending=" + encodeURIComponent("" + sortDescending) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processPurchaseStockAnalysis_GetStockAnalysis(_response);
        });
    }

    protected processPurchaseStockAnalysis_GetStockAnalysis(response: Response): Promise<GetPurchaseStockAnalysisResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GetPurchaseStockAnalysisResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<GetPurchaseStockAnalysisResponse>(null as any);
    }
}

export class GetCatalogListResponse implements IGetCatalogListResponse {
    items?: CatalogItemDto[];
    totalCount?: number;
    pageNumber?: number;
    pageSize?: number;
    totalPages?: number;

    constructor(data?: IGetCatalogListResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(CatalogItemDto.fromJS(item));
            }
            this.totalCount = _data["totalCount"];
            this.pageNumber = _data["pageNumber"];
            this.pageSize = _data["pageSize"];
            this.totalPages = _data["totalPages"];
        }
    }

    static fromJS(data: any): GetCatalogListResponse {
        data = typeof data === 'object' ? data : {};
        let result = new GetCatalogListResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["totalCount"] = this.totalCount;
        data["pageNumber"] = this.pageNumber;
        data["pageSize"] = this.pageSize;
        data["totalPages"] = this.totalPages;
        return data;
    }
}

export interface IGetCatalogListResponse {
    items?: CatalogItemDto[];
    totalCount?: number;
    pageNumber?: number;
    pageSize?: number;
    totalPages?: number;
}

export class CatalogItemDto implements ICatalogItemDto {
    productCode?: string;
    productName?: string;
    type?: ProductType;
    stock?: StockDto;
    price?: PriceDto;
    properties?: PropertiesDto;
    location?: string;
    minimalOrderQuantity?: string;
    minimalManufactureQuantity?: number;
    manufactureDifficulty?: number;
    marginPercentage?: number;
    marginAmount?: number;

    constructor(data?: ICatalogItemDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.productCode = _data["productCode"];
            this.productName = _data["productName"];
            this.type = _data["type"];
            this.stock = _data["stock"] ? StockDto.fromJS(_data["stock"]) : <any>undefined;
            this.price = _data["price"] ? PriceDto.fromJS(_data["price"]) : <any>undefined;
            this.properties = _data["properties"] ? PropertiesDto.fromJS(_data["properties"]) : <any>undefined;
            this.location = _data["location"];
            this.minimalOrderQuantity = _data["minimalOrderQuantity"];
            this.minimalManufactureQuantity = _data["minimalManufactureQuantity"];
            this.manufactureDifficulty = _data["manufactureDifficulty"];
            this.marginPercentage = _data["marginPercentage"];
            this.marginAmount = _data["marginAmount"];
        }
    }

    static fromJS(data: any): CatalogItemDto {
        data = typeof data === 'object' ? data : {};
        let result = new CatalogItemDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["productCode"] = this.productCode;
        data["productName"] = this.productName;
        data["type"] = this.type;
        data["stock"] = this.stock ? this.stock.toJSON() : <any>undefined;
        data["price"] = this.price ? this.price.toJSON() : <any>undefined;
        data["properties"] = this.properties ? this.properties.toJSON() : <any>undefined;
        data["location"] = this.location;
        data["minimalOrderQuantity"] = this.minimalOrderQuantity;
        data["minimalManufactureQuantity"] = this.minimalManufactureQuantity;
        data["manufactureDifficulty"] = this.manufactureDifficulty;
        data["marginPercentage"] = this.marginPercentage;
        data["marginAmount"] = this.marginAmount;
        return data;
    }
}

export interface ICatalogItemDto {
    productCode?: string;
    productName?: string;
    type?: ProductType;
    stock?: StockDto;
    price?: PriceDto;
    properties?: PropertiesDto;
    location?: string;
    minimalOrderQuantity?: string;
    minimalManufactureQuantity?: number;
    manufactureDifficulty?: number;
    marginPercentage?: number;
    marginAmount?: number;
}

export enum ProductType {
    UNDEFINED = 0,
    Goods = 1,
    Material = 3,
    SemiProduct = 7,
    Product = 8,
}

export class StockDto implements IStockDto {
    eshop?: number;
    erp?: number;
    transport?: number;
    reserve?: number;
    available?: number;

    constructor(data?: IStockDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.eshop = _data["eshop"];
            this.erp = _data["erp"];
            this.transport = _data["transport"];
            this.reserve = _data["reserve"];
            this.available = _data["available"];
        }
    }

    static fromJS(data: any): StockDto {
        data = typeof data === 'object' ? data : {};
        let result = new StockDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["eshop"] = this.eshop;
        data["erp"] = this.erp;
        data["transport"] = this.transport;
        data["reserve"] = this.reserve;
        data["available"] = this.available;
        return data;
    }
}

export interface IStockDto {
    eshop?: number;
    erp?: number;
    transport?: number;
    reserve?: number;
    available?: number;
}

export class PriceDto implements IPriceDto {
    currentSellingPrice?: number | undefined;
    currentPurchasePrice?: number | undefined;
    sellingPriceWithVat?: number | undefined;
    purchasePriceWithVat?: number | undefined;
    eshopPrice?: EshopPriceDto | undefined;
    erpPrice?: ErpPriceDto | undefined;

    constructor(data?: IPriceDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.currentSellingPrice = _data["currentSellingPrice"];
            this.currentPurchasePrice = _data["currentPurchasePrice"];
            this.sellingPriceWithVat = _data["sellingPriceWithVat"];
            this.purchasePriceWithVat = _data["purchasePriceWithVat"];
            this.eshopPrice = _data["eshopPrice"] ? EshopPriceDto.fromJS(_data["eshopPrice"]) : <any>undefined;
            this.erpPrice = _data["erpPrice"] ? ErpPriceDto.fromJS(_data["erpPrice"]) : <any>undefined;
        }
    }

    static fromJS(data: any): PriceDto {
        data = typeof data === 'object' ? data : {};
        let result = new PriceDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["currentSellingPrice"] = this.currentSellingPrice;
        data["currentPurchasePrice"] = this.currentPurchasePrice;
        data["sellingPriceWithVat"] = this.sellingPriceWithVat;
        data["purchasePriceWithVat"] = this.purchasePriceWithVat;
        data["eshopPrice"] = this.eshopPrice ? this.eshopPrice.toJSON() : <any>undefined;
        data["erpPrice"] = this.erpPrice ? this.erpPrice.toJSON() : <any>undefined;
        return data;
    }
}

export interface IPriceDto {
    currentSellingPrice?: number | undefined;
    currentPurchasePrice?: number | undefined;
    sellingPriceWithVat?: number | undefined;
    purchasePriceWithVat?: number | undefined;
    eshopPrice?: EshopPriceDto | undefined;
    erpPrice?: ErpPriceDto | undefined;
}

export class EshopPriceDto implements IEshopPriceDto {
    priceWithVat?: number;
    purchasePrice?: number;
    priceWithoutVat?: number;

    constructor(data?: IEshopPriceDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.priceWithVat = _data["priceWithVat"];
            this.purchasePrice = _data["purchasePrice"];
            this.priceWithoutVat = _data["priceWithoutVat"];
        }
    }

    static fromJS(data: any): EshopPriceDto {
        data = typeof data === 'object' ? data : {};
        let result = new EshopPriceDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["priceWithVat"] = this.priceWithVat;
        data["purchasePrice"] = this.purchasePrice;
        data["priceWithoutVat"] = this.priceWithoutVat;
        return data;
    }
}

export interface IEshopPriceDto {
    priceWithVat?: number;
    purchasePrice?: number;
    priceWithoutVat?: number;
}

export class ErpPriceDto implements IErpPriceDto {
    priceWithoutVat?: number;
    priceWithVat?: number;
    purchasePrice?: number;
    purchasePriceWithVat?: number;

    constructor(data?: IErpPriceDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.priceWithoutVat = _data["priceWithoutVat"];
            this.priceWithVat = _data["priceWithVat"];
            this.purchasePrice = _data["purchasePrice"];
            this.purchasePriceWithVat = _data["purchasePriceWithVat"];
        }
    }

    static fromJS(data: any): ErpPriceDto {
        data = typeof data === 'object' ? data : {};
        let result = new ErpPriceDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["priceWithoutVat"] = this.priceWithoutVat;
        data["priceWithVat"] = this.priceWithVat;
        data["purchasePrice"] = this.purchasePrice;
        data["purchasePriceWithVat"] = this.purchasePriceWithVat;
        return data;
    }
}

export interface IErpPriceDto {
    priceWithoutVat?: number;
    priceWithVat?: number;
    purchasePrice?: number;
    purchasePriceWithVat?: number;
}

export class PropertiesDto implements IPropertiesDto {
    optimalStockDaysSetup?: number;
    stockMinSetup?: number;
    batchSize?: number;
    seasonMonths?: number[];

    constructor(data?: IPropertiesDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.optimalStockDaysSetup = _data["optimalStockDaysSetup"];
            this.stockMinSetup = _data["stockMinSetup"];
            this.batchSize = _data["batchSize"];
            if (Array.isArray(_data["seasonMonths"])) {
                this.seasonMonths = [] as any;
                for (let item of _data["seasonMonths"])
                    this.seasonMonths!.push(item);
            }
        }
    }

    static fromJS(data: any): PropertiesDto {
        data = typeof data === 'object' ? data : {};
        let result = new PropertiesDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["optimalStockDaysSetup"] = this.optimalStockDaysSetup;
        data["stockMinSetup"] = this.stockMinSetup;
        data["batchSize"] = this.batchSize;
        if (Array.isArray(this.seasonMonths)) {
            data["seasonMonths"] = [];
            for (let item of this.seasonMonths)
                data["seasonMonths"].push(item);
        }
        return data;
    }
}

export interface IPropertiesDto {
    optimalStockDaysSetup?: number;
    stockMinSetup?: number;
    batchSize?: number;
    seasonMonths?: number[];
}

export class GetCatalogDetailResponse implements IGetCatalogDetailResponse {
    item?: CatalogItemDto;
    historicalData?: CatalogHistoricalDataDto;

    constructor(data?: IGetCatalogDetailResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.item = _data["item"] ? CatalogItemDto.fromJS(_data["item"]) : <any>undefined;
            this.historicalData = _data["historicalData"] ? CatalogHistoricalDataDto.fromJS(_data["historicalData"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetCatalogDetailResponse {
        data = typeof data === 'object' ? data : {};
        let result = new GetCatalogDetailResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["item"] = this.item ? this.item.toJSON() : <any>undefined;
        data["historicalData"] = this.historicalData ? this.historicalData.toJSON() : <any>undefined;
        return data;
    }
}

export interface IGetCatalogDetailResponse {
    item?: CatalogItemDto;
    historicalData?: CatalogHistoricalDataDto;
}

export class CatalogHistoricalDataDto implements ICatalogHistoricalDataDto {
    salesHistory?: CatalogSalesRecordDto[];
    purchaseHistory?: CatalogPurchaseRecordDto[];
    consumedHistory?: CatalogConsumedRecordDto[];
    manufactureHistory?: CatalogManufactureRecordDto[];
    manufactureCostHistory?: ManufactureCostDto[];

    constructor(data?: ICatalogHistoricalDataDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["salesHistory"])) {
                this.salesHistory = [] as any;
                for (let item of _data["salesHistory"])
                    this.salesHistory!.push(CatalogSalesRecordDto.fromJS(item));
            }
            if (Array.isArray(_data["purchaseHistory"])) {
                this.purchaseHistory = [] as any;
                for (let item of _data["purchaseHistory"])
                    this.purchaseHistory!.push(CatalogPurchaseRecordDto.fromJS(item));
            }
            if (Array.isArray(_data["consumedHistory"])) {
                this.consumedHistory = [] as any;
                for (let item of _data["consumedHistory"])
                    this.consumedHistory!.push(CatalogConsumedRecordDto.fromJS(item));
            }
            if (Array.isArray(_data["manufactureHistory"])) {
                this.manufactureHistory = [] as any;
                for (let item of _data["manufactureHistory"])
                    this.manufactureHistory!.push(CatalogManufactureRecordDto.fromJS(item));
            }
            if (Array.isArray(_data["manufactureCostHistory"])) {
                this.manufactureCostHistory = [] as any;
                for (let item of _data["manufactureCostHistory"])
                    this.manufactureCostHistory!.push(ManufactureCostDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CatalogHistoricalDataDto {
        data = typeof data === 'object' ? data : {};
        let result = new CatalogHistoricalDataDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.salesHistory)) {
            data["salesHistory"] = [];
            for (let item of this.salesHistory)
                data["salesHistory"].push(item.toJSON());
        }
        if (Array.isArray(this.purchaseHistory)) {
            data["purchaseHistory"] = [];
            for (let item of this.purchaseHistory)
                data["purchaseHistory"].push(item.toJSON());
        }
        if (Array.isArray(this.consumedHistory)) {
            data["consumedHistory"] = [];
            for (let item of this.consumedHistory)
                data["consumedHistory"].push(item.toJSON());
        }
        if (Array.isArray(this.manufactureHistory)) {
            data["manufactureHistory"] = [];
            for (let item of this.manufactureHistory)
                data["manufactureHistory"].push(item.toJSON());
        }
        if (Array.isArray(this.manufactureCostHistory)) {
            data["manufactureCostHistory"] = [];
            for (let item of this.manufactureCostHistory)
                data["manufactureCostHistory"].push(item.toJSON());
        }
        return data;
    }
}

export interface ICatalogHistoricalDataDto {
    salesHistory?: CatalogSalesRecordDto[];
    purchaseHistory?: CatalogPurchaseRecordDto[];
    consumedHistory?: CatalogConsumedRecordDto[];
    manufactureHistory?: CatalogManufactureRecordDto[];
    manufactureCostHistory?: ManufactureCostDto[];
}

export class CatalogSalesRecordDto implements ICatalogSalesRecordDto {
    year?: number;
    month?: number;
    amountTotal?: number;
    amountB2B?: number;
    amountB2C?: number;
    sumTotal?: number;
    sumB2B?: number;
    sumB2C?: number;

    constructor(data?: ICatalogSalesRecordDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.year = _data["year"];
            this.month = _data["month"];
            this.amountTotal = _data["amountTotal"];
            this.amountB2B = _data["amountB2B"];
            this.amountB2C = _data["amountB2C"];
            this.sumTotal = _data["sumTotal"];
            this.sumB2B = _data["sumB2B"];
            this.sumB2C = _data["sumB2C"];
        }
    }

    static fromJS(data: any): CatalogSalesRecordDto {
        data = typeof data === 'object' ? data : {};
        let result = new CatalogSalesRecordDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["year"] = this.year;
        data["month"] = this.month;
        data["amountTotal"] = this.amountTotal;
        data["amountB2B"] = this.amountB2B;
        data["amountB2C"] = this.amountB2C;
        data["sumTotal"] = this.sumTotal;
        data["sumB2B"] = this.sumB2B;
        data["sumB2C"] = this.sumB2C;
        return data;
    }
}

export interface ICatalogSalesRecordDto {
    year?: number;
    month?: number;
    amountTotal?: number;
    amountB2B?: number;
    amountB2C?: number;
    sumTotal?: number;
    sumB2B?: number;
    sumB2C?: number;
}

export class CatalogPurchaseRecordDto implements ICatalogPurchaseRecordDto {
    date?: Date;
    supplierName?: string;
    amount?: number;
    pricePerPiece?: number;
    priceTotal?: number;
    documentNumber?: string;
    year?: number;
    month?: number;

    constructor(data?: ICatalogPurchaseRecordDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.date = _data["date"] ? new Date(_data["date"].toString()) : <any>undefined;
            this.supplierName = _data["supplierName"];
            this.amount = _data["amount"];
            this.pricePerPiece = _data["pricePerPiece"];
            this.priceTotal = _data["priceTotal"];
            this.documentNumber = _data["documentNumber"];
            this.year = _data["year"];
            this.month = _data["month"];
        }
    }

    static fromJS(data: any): CatalogPurchaseRecordDto {
        data = typeof data === 'object' ? data : {};
        let result = new CatalogPurchaseRecordDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["date"] = this.date ? this.date.toISOString() : <any>undefined;
        data["supplierName"] = this.supplierName;
        data["amount"] = this.amount;
        data["pricePerPiece"] = this.pricePerPiece;
        data["priceTotal"] = this.priceTotal;
        data["documentNumber"] = this.documentNumber;
        data["year"] = this.year;
        data["month"] = this.month;
        return data;
    }
}

export interface ICatalogPurchaseRecordDto {
    date?: Date;
    supplierName?: string;
    amount?: number;
    pricePerPiece?: number;
    priceTotal?: number;
    documentNumber?: string;
    year?: number;
    month?: number;
}

export class CatalogConsumedRecordDto implements ICatalogConsumedRecordDto {
    year?: number;
    month?: number;
    amount?: number;
    productName?: string;

    constructor(data?: ICatalogConsumedRecordDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.year = _data["year"];
            this.month = _data["month"];
            this.amount = _data["amount"];
            this.productName = _data["productName"];
        }
    }

    static fromJS(data: any): CatalogConsumedRecordDto {
        data = typeof data === 'object' ? data : {};
        let result = new CatalogConsumedRecordDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["year"] = this.year;
        data["month"] = this.month;
        data["amount"] = this.amount;
        data["productName"] = this.productName;
        return data;
    }
}

export interface ICatalogConsumedRecordDto {
    year?: number;
    month?: number;
    amount?: number;
    productName?: string;
}

export class CatalogManufactureRecordDto implements ICatalogManufactureRecordDto {
    date?: Date;
    amount?: number;
    pricePerPiece?: number;
    priceTotal?: number;
    productCode?: string;
    documentNumber?: string;
    year?: number | undefined;
    month?: number | undefined;

    constructor(data?: ICatalogManufactureRecordDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.date = _data["date"] ? new Date(_data["date"].toString()) : <any>undefined;
            this.amount = _data["amount"];
            this.pricePerPiece = _data["pricePerPiece"];
            this.priceTotal = _data["priceTotal"];
            this.productCode = _data["productCode"];
            this.documentNumber = _data["documentNumber"];
            this.year = _data["year"];
            this.month = _data["month"];
        }
    }

    static fromJS(data: any): CatalogManufactureRecordDto {
        data = typeof data === 'object' ? data : {};
        let result = new CatalogManufactureRecordDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["date"] = this.date ? this.date.toISOString() : <any>undefined;
        data["amount"] = this.amount;
        data["pricePerPiece"] = this.pricePerPiece;
        data["priceTotal"] = this.priceTotal;
        data["productCode"] = this.productCode;
        data["documentNumber"] = this.documentNumber;
        data["year"] = this.year;
        data["month"] = this.month;
        return data;
    }
}

export interface ICatalogManufactureRecordDto {
    date?: Date;
    amount?: number;
    pricePerPiece?: number;
    priceTotal?: number;
    productCode?: string;
    documentNumber?: string;
    year?: number | undefined;
    month?: number | undefined;
}

export class ManufactureCostDto implements IManufactureCostDto {
    date?: Date;
    materialCost?: number;
    handlingCost?: number;
    total?: number;

    constructor(data?: IManufactureCostDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.date = _data["date"] ? new Date(_data["date"].toString()) : <any>undefined;
            this.materialCost = _data["materialCost"];
            this.handlingCost = _data["handlingCost"];
            this.total = _data["total"];
        }
    }

    static fromJS(data: any): ManufactureCostDto {
        data = typeof data === 'object' ? data : {};
        let result = new ManufactureCostDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["date"] = this.date ? this.date.toISOString() : <any>undefined;
        data["materialCost"] = this.materialCost;
        data["handlingCost"] = this.handlingCost;
        data["total"] = this.total;
        return data;
    }
}

export interface IManufactureCostDto {
    date?: Date;
    materialCost?: number;
    handlingCost?: number;
    total?: number;
}

export class GetMaterialsForPurchaseResponse implements IGetMaterialsForPurchaseResponse {
    materials?: MaterialForPurchaseDto[];

    constructor(data?: IGetMaterialsForPurchaseResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["materials"])) {
                this.materials = [] as any;
                for (let item of _data["materials"])
                    this.materials!.push(MaterialForPurchaseDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetMaterialsForPurchaseResponse {
        data = typeof data === 'object' ? data : {};
        let result = new GetMaterialsForPurchaseResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.materials)) {
            data["materials"] = [];
            for (let item of this.materials)
                data["materials"].push(item.toJSON());
        }
        return data;
    }
}

export interface IGetMaterialsForPurchaseResponse {
    materials?: MaterialForPurchaseDto[];
}

export class MaterialForPurchaseDto implements IMaterialForPurchaseDto {
    productCode?: string;
    productName?: string;
    productType?: string;
    lastPurchasePrice?: number | undefined;
    location?: string | undefined;
    currentStock?: number;
    minimalOrderQuantity?: string | undefined;

    constructor(data?: IMaterialForPurchaseDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.productCode = _data["productCode"];
            this.productName = _data["productName"];
            this.productType = _data["productType"];
            this.lastPurchasePrice = _data["lastPurchasePrice"];
            this.location = _data["location"];
            this.currentStock = _data["currentStock"];
            this.minimalOrderQuantity = _data["minimalOrderQuantity"];
        }
    }

    static fromJS(data: any): MaterialForPurchaseDto {
        data = typeof data === 'object' ? data : {};
        let result = new MaterialForPurchaseDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["productCode"] = this.productCode;
        data["productName"] = this.productName;
        data["productType"] = this.productType;
        data["lastPurchasePrice"] = this.lastPurchasePrice;
        data["location"] = this.location;
        data["currentStock"] = this.currentStock;
        data["minimalOrderQuantity"] = this.minimalOrderQuantity;
        return data;
    }
}

export interface IMaterialForPurchaseDto {
    productCode?: string;
    productName?: string;
    productType?: string;
    lastPurchasePrice?: number | undefined;
    location?: string | undefined;
    currentStock?: number;
    minimalOrderQuantity?: string | undefined;
}

export class GetConfigurationResponse implements IGetConfigurationResponse {
    version?: string;
    environment?: string;
    useMockAuth?: boolean;
    timestamp?: Date;

    constructor(data?: IGetConfigurationResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.version = _data["version"];
            this.environment = _data["environment"];
            this.useMockAuth = _data["useMockAuth"];
            this.timestamp = _data["timestamp"] ? new Date(_data["timestamp"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): GetConfigurationResponse {
        data = typeof data === 'object' ? data : {};
        let result = new GetConfigurationResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["version"] = this.version;
        data["environment"] = this.environment;
        data["useMockAuth"] = this.useMockAuth;
        data["timestamp"] = this.timestamp ? this.timestamp.toISOString() : <any>undefined;
        return data;
    }
}

export interface IGetConfigurationResponse {
    version?: string;
    environment?: string;
    useMockAuth?: boolean;
    timestamp?: Date;
}

export class GetFinancialOverviewResponse implements IGetFinancialOverviewResponse {
    data!: MonthlyFinancialDataDto[];
    summary!: FinancialSummaryDto;

    constructor(data?: IGetFinancialOverviewResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.data = [];
            this.summary = new FinancialSummaryDto();
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(MonthlyFinancialDataDto.fromJS(item));
            }
            this.summary = _data["summary"] ? FinancialSummaryDto.fromJS(_data["summary"]) : new FinancialSummaryDto();
        }
    }

    static fromJS(data: any): GetFinancialOverviewResponse {
        data = typeof data === 'object' ? data : {};
        let result = new GetFinancialOverviewResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        data["summary"] = this.summary ? this.summary.toJSON() : <any>undefined;
        return data;
    }
}

export interface IGetFinancialOverviewResponse {
    data: MonthlyFinancialDataDto[];
    summary: FinancialSummaryDto;
}

export class MonthlyFinancialDataDto implements IMonthlyFinancialDataDto {
    year!: number;
    month!: number;
    monthYearDisplay!: string;
    income!: number;
    expenses!: number;
    financialBalance!: number;
    stockChanges?: StockChangeDto | undefined;
    totalStockValueChange?: number | undefined;
    totalBalance?: number | undefined;

    constructor(data?: IMonthlyFinancialDataDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.year = _data["year"];
            this.month = _data["month"];
            this.monthYearDisplay = _data["monthYearDisplay"];
            this.income = _data["income"];
            this.expenses = _data["expenses"];
            this.financialBalance = _data["financialBalance"];
            this.stockChanges = _data["stockChanges"] ? StockChangeDto.fromJS(_data["stockChanges"]) : <any>undefined;
            this.totalStockValueChange = _data["totalStockValueChange"];
            this.totalBalance = _data["totalBalance"];
        }
    }

    static fromJS(data: any): MonthlyFinancialDataDto {
        data = typeof data === 'object' ? data : {};
        let result = new MonthlyFinancialDataDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["year"] = this.year;
        data["month"] = this.month;
        data["monthYearDisplay"] = this.monthYearDisplay;
        data["income"] = this.income;
        data["expenses"] = this.expenses;
        data["financialBalance"] = this.financialBalance;
        data["stockChanges"] = this.stockChanges ? this.stockChanges.toJSON() : <any>undefined;
        data["totalStockValueChange"] = this.totalStockValueChange;
        data["totalBalance"] = this.totalBalance;
        return data;
    }
}

export interface IMonthlyFinancialDataDto {
    year: number;
    month: number;
    monthYearDisplay: string;
    income: number;
    expenses: number;
    financialBalance: number;
    stockChanges?: StockChangeDto | undefined;
    totalStockValueChange?: number | undefined;
    totalBalance?: number | undefined;
}

export class StockChangeDto implements IStockChangeDto {
    materials?: number;
    semiProducts?: number;
    products?: number;

    constructor(data?: IStockChangeDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.materials = _data["materials"];
            this.semiProducts = _data["semiProducts"];
            this.products = _data["products"];
        }
    }

    static fromJS(data: any): StockChangeDto {
        data = typeof data === 'object' ? data : {};
        let result = new StockChangeDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["materials"] = this.materials;
        data["semiProducts"] = this.semiProducts;
        data["products"] = this.products;
        return data;
    }
}

export interface IStockChangeDto {
    materials?: number;
    semiProducts?: number;
    products?: number;
}

export class FinancialSummaryDto implements IFinancialSummaryDto {
    totalIncome!: number;
    totalExpenses!: number;
    totalBalance!: number;
    averageMonthlyIncome!: number;
    averageMonthlyExpenses!: number;
    averageMonthlyBalance!: number;
    stockSummary?: StockSummaryDto | undefined;

    constructor(data?: IFinancialSummaryDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.totalIncome = _data["totalIncome"];
            this.totalExpenses = _data["totalExpenses"];
            this.totalBalance = _data["totalBalance"];
            this.averageMonthlyIncome = _data["averageMonthlyIncome"];
            this.averageMonthlyExpenses = _data["averageMonthlyExpenses"];
            this.averageMonthlyBalance = _data["averageMonthlyBalance"];
            this.stockSummary = _data["stockSummary"] ? StockSummaryDto.fromJS(_data["stockSummary"]) : <any>undefined;
        }
    }

    static fromJS(data: any): FinancialSummaryDto {
        data = typeof data === 'object' ? data : {};
        let result = new FinancialSummaryDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalIncome"] = this.totalIncome;
        data["totalExpenses"] = this.totalExpenses;
        data["totalBalance"] = this.totalBalance;
        data["averageMonthlyIncome"] = this.averageMonthlyIncome;
        data["averageMonthlyExpenses"] = this.averageMonthlyExpenses;
        data["averageMonthlyBalance"] = this.averageMonthlyBalance;
        data["stockSummary"] = this.stockSummary ? this.stockSummary.toJSON() : <any>undefined;
        return data;
    }
}

export interface IFinancialSummaryDto {
    totalIncome: number;
    totalExpenses: number;
    totalBalance: number;
    averageMonthlyIncome: number;
    averageMonthlyExpenses: number;
    averageMonthlyBalance: number;
    stockSummary?: StockSummaryDto | undefined;
}

export class StockSummaryDto implements IStockSummaryDto {
    totalStockValueChange?: number;
    averageMonthlyStockChange?: number;
    totalBalanceWithStock?: number;
    averageMonthlyTotalBalance?: number;

    constructor(data?: IStockSummaryDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.totalStockValueChange = _data["totalStockValueChange"];
            this.averageMonthlyStockChange = _data["averageMonthlyStockChange"];
            this.totalBalanceWithStock = _data["totalBalanceWithStock"];
            this.averageMonthlyTotalBalance = _data["averageMonthlyTotalBalance"];
        }
    }

    static fromJS(data: any): StockSummaryDto {
        data = typeof data === 'object' ? data : {};
        let result = new StockSummaryDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalStockValueChange"] = this.totalStockValueChange;
        data["averageMonthlyStockChange"] = this.averageMonthlyStockChange;
        data["totalBalanceWithStock"] = this.totalBalanceWithStock;
        data["averageMonthlyTotalBalance"] = this.averageMonthlyTotalBalance;
        return data;
    }
}

export interface IStockSummaryDto {
    totalStockValueChange?: number;
    averageMonthlyStockChange?: number;
    totalBalanceWithStock?: number;
    averageMonthlyTotalBalance?: number;
}

export class ProblemDetails implements IProblemDetails {
    type?: string | undefined;
    title?: string | undefined;
    status?: number | undefined;
    detail?: string | undefined;
    instance?: string | undefined;

    [key: string]: any;

    constructor(data?: IProblemDetails) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.type = _data["type"];
            this.title = _data["title"];
            this.status = _data["status"];
            this.detail = _data["detail"];
            this.instance = _data["instance"];
        }
    }

    static fromJS(data: any): ProblemDetails {
        data = typeof data === 'object' ? data : {};
        let result = new ProblemDetails();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["type"] = this.type;
        data["title"] = this.title;
        data["status"] = this.status;
        data["detail"] = this.detail;
        data["instance"] = this.instance;
        return data;
    }
}

export interface IProblemDetails {
    type?: string | undefined;
    title?: string | undefined;
    status?: number | undefined;
    detail?: string | undefined;
    instance?: string | undefined;

    [key: string]: any;
}

export class GetJournalEntriesResponse implements IGetJournalEntriesResponse {
    entries?: JournalEntryDto[];
    totalCount?: number;
    pageNumber?: number;
    pageSize?: number;
    totalPages?: number;
    hasNextPage?: boolean;
    hasPreviousPage?: boolean;

    constructor(data?: IGetJournalEntriesResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["entries"])) {
                this.entries = [] as any;
                for (let item of _data["entries"])
                    this.entries!.push(JournalEntryDto.fromJS(item));
            }
            this.totalCount = _data["totalCount"];
            this.pageNumber = _data["pageNumber"];
            this.pageSize = _data["pageSize"];
            this.totalPages = _data["totalPages"];
            this.hasNextPage = _data["hasNextPage"];
            this.hasPreviousPage = _data["hasPreviousPage"];
        }
    }

    static fromJS(data: any): GetJournalEntriesResponse {
        data = typeof data === 'object' ? data : {};
        let result = new GetJournalEntriesResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.entries)) {
            data["entries"] = [];
            for (let item of this.entries)
                data["entries"].push(item.toJSON());
        }
        data["totalCount"] = this.totalCount;
        data["pageNumber"] = this.pageNumber;
        data["pageSize"] = this.pageSize;
        data["totalPages"] = this.totalPages;
        data["hasNextPage"] = this.hasNextPage;
        data["hasPreviousPage"] = this.hasPreviousPage;
        return data;
    }
}

export interface IGetJournalEntriesResponse {
    entries?: JournalEntryDto[];
    totalCount?: number;
    pageNumber?: number;
    pageSize?: number;
    totalPages?: number;
    hasNextPage?: boolean;
    hasPreviousPage?: boolean;
}

export class JournalEntryDto implements IJournalEntryDto {
    id?: number;
    title?: string | undefined;
    content?: string;
    entryDate?: Date;
    createdAt?: Date;
    modifiedAt?: Date;
    createdByUserId?: string;
    modifiedByUserId?: string | undefined;
    associatedProducts?: string[];
    tags?: JournalEntryTagDto[];
    contentPreview?: string | undefined;
    highlightedTerms?: string[];

    constructor(data?: IJournalEntryDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.title = _data["title"];
            this.content = _data["content"];
            this.entryDate = _data["entryDate"] ? new Date(_data["entryDate"].toString()) : <any>undefined;
            this.createdAt = _data["createdAt"] ? new Date(_data["createdAt"].toString()) : <any>undefined;
            this.modifiedAt = _data["modifiedAt"] ? new Date(_data["modifiedAt"].toString()) : <any>undefined;
            this.createdByUserId = _data["createdByUserId"];
            this.modifiedByUserId = _data["modifiedByUserId"];
            if (Array.isArray(_data["associatedProducts"])) {
                this.associatedProducts = [] as any;
                for (let item of _data["associatedProducts"])
                    this.associatedProducts!.push(item);
            }
            if (Array.isArray(_data["tags"])) {
                this.tags = [] as any;
                for (let item of _data["tags"])
                    this.tags!.push(JournalEntryTagDto.fromJS(item));
            }
            this.contentPreview = _data["contentPreview"];
            if (Array.isArray(_data["highlightedTerms"])) {
                this.highlightedTerms = [] as any;
                for (let item of _data["highlightedTerms"])
                    this.highlightedTerms!.push(item);
            }
        }
    }

    static fromJS(data: any): JournalEntryDto {
        data = typeof data === 'object' ? data : {};
        let result = new JournalEntryDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["title"] = this.title;
        data["content"] = this.content;
        data["entryDate"] = this.entryDate ? this.entryDate.toISOString() : <any>undefined;
        data["createdAt"] = this.createdAt ? this.createdAt.toISOString() : <any>undefined;
        data["modifiedAt"] = this.modifiedAt ? this.modifiedAt.toISOString() : <any>undefined;
        data["createdByUserId"] = this.createdByUserId;
        data["modifiedByUserId"] = this.modifiedByUserId;
        if (Array.isArray(this.associatedProducts)) {
            data["associatedProducts"] = [];
            for (let item of this.associatedProducts)
                data["associatedProducts"].push(item);
        }
        if (Array.isArray(this.tags)) {
            data["tags"] = [];
            for (let item of this.tags)
                data["tags"].push(item.toJSON());
        }
        data["contentPreview"] = this.contentPreview;
        if (Array.isArray(this.highlightedTerms)) {
            data["highlightedTerms"] = [];
            for (let item of this.highlightedTerms)
                data["highlightedTerms"].push(item);
        }
        return data;
    }
}

export interface IJournalEntryDto {
    id?: number;
    title?: string | undefined;
    content?: string;
    entryDate?: Date;
    createdAt?: Date;
    modifiedAt?: Date;
    createdByUserId?: string;
    modifiedByUserId?: string | undefined;
    associatedProducts?: string[];
    tags?: JournalEntryTagDto[];
    contentPreview?: string | undefined;
    highlightedTerms?: string[];
}

export class JournalEntryTagDto implements IJournalEntryTagDto {
    id?: number;
    name?: string;
    color?: string;

    constructor(data?: IJournalEntryTagDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.color = _data["color"];
        }
    }

    static fromJS(data: any): JournalEntryTagDto {
        data = typeof data === 'object' ? data : {};
        let result = new JournalEntryTagDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["color"] = this.color;
        return data;
    }
}

export interface IJournalEntryTagDto {
    id?: number;
    name?: string;
    color?: string;
}

export class SearchJournalEntriesResponse implements ISearchJournalEntriesResponse {
    entries?: JournalEntryDto[];
    totalCount?: number;
    pageNumber?: number;
    pageSize?: number;
    totalPages?: number;
    hasNextPage?: boolean;
    hasPreviousPage?: boolean;

    constructor(data?: ISearchJournalEntriesResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["entries"])) {
                this.entries = [] as any;
                for (let item of _data["entries"])
                    this.entries!.push(JournalEntryDto.fromJS(item));
            }
            this.totalCount = _data["totalCount"];
            this.pageNumber = _data["pageNumber"];
            this.pageSize = _data["pageSize"];
            this.totalPages = _data["totalPages"];
            this.hasNextPage = _data["hasNextPage"];
            this.hasPreviousPage = _data["hasPreviousPage"];
        }
    }

    static fromJS(data: any): SearchJournalEntriesResponse {
        data = typeof data === 'object' ? data : {};
        let result = new SearchJournalEntriesResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.entries)) {
            data["entries"] = [];
            for (let item of this.entries)
                data["entries"].push(item.toJSON());
        }
        data["totalCount"] = this.totalCount;
        data["pageNumber"] = this.pageNumber;
        data["pageSize"] = this.pageSize;
        data["totalPages"] = this.totalPages;
        data["hasNextPage"] = this.hasNextPage;
        data["hasPreviousPage"] = this.hasPreviousPage;
        return data;
    }
}

export interface ISearchJournalEntriesResponse {
    entries?: JournalEntryDto[];
    totalCount?: number;
    pageNumber?: number;
    pageSize?: number;
    totalPages?: number;
    hasNextPage?: boolean;
    hasPreviousPage?: boolean;
}

export class CreateJournalEntryResponse implements ICreateJournalEntryResponse {
    id?: number;
    createdAt?: Date;
    message?: string;

    constructor(data?: ICreateJournalEntryResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.createdAt = _data["createdAt"] ? new Date(_data["createdAt"].toString()) : <any>undefined;
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): CreateJournalEntryResponse {
        data = typeof data === 'object' ? data : {};
        let result = new CreateJournalEntryResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["createdAt"] = this.createdAt ? this.createdAt.toISOString() : <any>undefined;
        data["message"] = this.message;
        return data;
    }
}

export interface ICreateJournalEntryResponse {
    id?: number;
    createdAt?: Date;
    message?: string;
}

export class CreateJournalEntryRequest implements ICreateJournalEntryRequest {
    title?: string | undefined;
    content!: string;
    entryDate!: Date;
    associatedProducts?: string[] | undefined;
    tagIds?: number[] | undefined;

    constructor(data?: ICreateJournalEntryRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.title = _data["title"];
            this.content = _data["content"];
            this.entryDate = _data["entryDate"] ? new Date(_data["entryDate"].toString()) : <any>undefined;
            if (Array.isArray(_data["associatedProducts"])) {
                this.associatedProducts = [] as any;
                for (let item of _data["associatedProducts"])
                    this.associatedProducts!.push(item);
            }
            if (Array.isArray(_data["tagIds"])) {
                this.tagIds = [] as any;
                for (let item of _data["tagIds"])
                    this.tagIds!.push(item);
            }
        }
    }

    static fromJS(data: any): CreateJournalEntryRequest {
        data = typeof data === 'object' ? data : {};
        let result = new CreateJournalEntryRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["title"] = this.title;
        data["content"] = this.content;
        data["entryDate"] = this.entryDate ? this.entryDate.toISOString() : <any>undefined;
        if (Array.isArray(this.associatedProducts)) {
            data["associatedProducts"] = [];
            for (let item of this.associatedProducts)
                data["associatedProducts"].push(item);
        }
        if (Array.isArray(this.tagIds)) {
            data["tagIds"] = [];
            for (let item of this.tagIds)
                data["tagIds"].push(item);
        }
        return data;
    }
}

export interface ICreateJournalEntryRequest {
    title?: string | undefined;
    content: string;
    entryDate: Date;
    associatedProducts?: string[] | undefined;
    tagIds?: number[] | undefined;
}

export class UpdateJournalEntryResponse implements IUpdateJournalEntryResponse {
    id?: number;
    modifiedAt?: Date;
    message?: string;

    constructor(data?: IUpdateJournalEntryResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.modifiedAt = _data["modifiedAt"] ? new Date(_data["modifiedAt"].toString()) : <any>undefined;
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): UpdateJournalEntryResponse {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateJournalEntryResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["modifiedAt"] = this.modifiedAt ? this.modifiedAt.toISOString() : <any>undefined;
        data["message"] = this.message;
        return data;
    }
}

export interface IUpdateJournalEntryResponse {
    id?: number;
    modifiedAt?: Date;
    message?: string;
}

export class UpdateJournalEntryRequest implements IUpdateJournalEntryRequest {
    id?: number;
    title?: string | undefined;
    content!: string;
    entryDate!: Date;
    associatedProducts?: string[] | undefined;
    tagIds?: number[] | undefined;

    constructor(data?: IUpdateJournalEntryRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.title = _data["title"];
            this.content = _data["content"];
            this.entryDate = _data["entryDate"] ? new Date(_data["entryDate"].toString()) : <any>undefined;
            if (Array.isArray(_data["associatedProducts"])) {
                this.associatedProducts = [] as any;
                for (let item of _data["associatedProducts"])
                    this.associatedProducts!.push(item);
            }
            if (Array.isArray(_data["tagIds"])) {
                this.tagIds = [] as any;
                for (let item of _data["tagIds"])
                    this.tagIds!.push(item);
            }
        }
    }

    static fromJS(data: any): UpdateJournalEntryRequest {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateJournalEntryRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["title"] = this.title;
        data["content"] = this.content;
        data["entryDate"] = this.entryDate ? this.entryDate.toISOString() : <any>undefined;
        if (Array.isArray(this.associatedProducts)) {
            data["associatedProducts"] = [];
            for (let item of this.associatedProducts)
                data["associatedProducts"].push(item);
        }
        if (Array.isArray(this.tagIds)) {
            data["tagIds"] = [];
            for (let item of this.tagIds)
                data["tagIds"].push(item);
        }
        return data;
    }
}

export interface IUpdateJournalEntryRequest {
    id?: number;
    title?: string | undefined;
    content: string;
    entryDate: Date;
    associatedProducts?: string[] | undefined;
    tagIds?: number[] | undefined;
}

export class GetJournalTagsResponse implements IGetJournalTagsResponse {
    tags?: JournalEntryTagDto[];

    constructor(data?: IGetJournalTagsResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["tags"])) {
                this.tags = [] as any;
                for (let item of _data["tags"])
                    this.tags!.push(JournalEntryTagDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetJournalTagsResponse {
        data = typeof data === 'object' ? data : {};
        let result = new GetJournalTagsResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.tags)) {
            data["tags"] = [];
            for (let item of this.tags)
                data["tags"].push(item.toJSON());
        }
        return data;
    }
}

export interface IGetJournalTagsResponse {
    tags?: JournalEntryTagDto[];
}

export class CreateJournalTagResponse implements ICreateJournalTagResponse {
    id?: number;
    name?: string;
    color?: string;

    constructor(data?: ICreateJournalTagResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.color = _data["color"];
        }
    }

    static fromJS(data: any): CreateJournalTagResponse {
        data = typeof data === 'object' ? data : {};
        let result = new CreateJournalTagResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["color"] = this.color;
        return data;
    }
}

export interface ICreateJournalTagResponse {
    id?: number;
    name?: string;
    color?: string;
}

export class CreateJournalTagRequest implements ICreateJournalTagRequest {
    name!: string;
    color?: string;

    constructor(data?: ICreateJournalTagRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.color = _data["color"];
        }
    }

    static fromJS(data: any): CreateJournalTagRequest {
        data = typeof data === 'object' ? data : {};
        let result = new CreateJournalTagRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["color"] = this.color;
        return data;
    }
}

export interface ICreateJournalTagRequest {
    name: string;
    color?: string;
}

export class GetProductMarginsResponse implements IGetProductMarginsResponse {
    items?: ProductMarginDto[];
    totalCount?: number;
    pageNumber?: number;
    pageSize?: number;
    totalPages?: number;

    constructor(data?: IGetProductMarginsResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(ProductMarginDto.fromJS(item));
            }
            this.totalCount = _data["totalCount"];
            this.pageNumber = _data["pageNumber"];
            this.pageSize = _data["pageSize"];
            this.totalPages = _data["totalPages"];
        }
    }

    static fromJS(data: any): GetProductMarginsResponse {
        data = typeof data === 'object' ? data : {};
        let result = new GetProductMarginsResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["totalCount"] = this.totalCount;
        data["pageNumber"] = this.pageNumber;
        data["pageSize"] = this.pageSize;
        data["totalPages"] = this.totalPages;
        return data;
    }
}

export interface IGetProductMarginsResponse {
    items?: ProductMarginDto[];
    totalCount?: number;
    pageNumber?: number;
    pageSize?: number;
    totalPages?: number;
}

export class ProductMarginDto implements IProductMarginDto {
    productCode?: string;
    productName?: string;
    priceWithoutVat?: number | undefined;
    purchasePrice?: number | undefined;
    averageMaterialCost?: number | undefined;
    averageHandlingCost?: number | undefined;
    manufactureDifficulty?: number;
    marginPercentage?: number;
    marginAmount?: number;

    constructor(data?: IProductMarginDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.productCode = _data["productCode"];
            this.productName = _data["productName"];
            this.priceWithoutVat = _data["priceWithoutVat"];
            this.purchasePrice = _data["purchasePrice"];
            this.averageMaterialCost = _data["averageMaterialCost"];
            this.averageHandlingCost = _data["averageHandlingCost"];
            this.manufactureDifficulty = _data["manufactureDifficulty"];
            this.marginPercentage = _data["marginPercentage"];
            this.marginAmount = _data["marginAmount"];
        }
    }

    static fromJS(data: any): ProductMarginDto {
        data = typeof data === 'object' ? data : {};
        let result = new ProductMarginDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["productCode"] = this.productCode;
        data["productName"] = this.productName;
        data["priceWithoutVat"] = this.priceWithoutVat;
        data["purchasePrice"] = this.purchasePrice;
        data["averageMaterialCost"] = this.averageMaterialCost;
        data["averageHandlingCost"] = this.averageHandlingCost;
        data["manufactureDifficulty"] = this.manufactureDifficulty;
        data["marginPercentage"] = this.marginPercentage;
        data["marginAmount"] = this.marginAmount;
        return data;
    }
}

export interface IProductMarginDto {
    productCode?: string;
    productName?: string;
    priceWithoutVat?: number | undefined;
    purchasePrice?: number | undefined;
    averageMaterialCost?: number | undefined;
    averageHandlingCost?: number | undefined;
    manufactureDifficulty?: number;
    marginPercentage?: number;
    marginAmount?: number;
}

export class GetPurchaseOrdersResponse implements IGetPurchaseOrdersResponse {
    orders?: PurchaseOrderSummaryDto[];
    totalCount?: number;
    pageNumber?: number;
    pageSize?: number;
    totalPages?: number;

    constructor(data?: IGetPurchaseOrdersResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["orders"])) {
                this.orders = [] as any;
                for (let item of _data["orders"])
                    this.orders!.push(PurchaseOrderSummaryDto.fromJS(item));
            }
            this.totalCount = _data["totalCount"];
            this.pageNumber = _data["pageNumber"];
            this.pageSize = _data["pageSize"];
            this.totalPages = _data["totalPages"];
        }
    }

    static fromJS(data: any): GetPurchaseOrdersResponse {
        data = typeof data === 'object' ? data : {};
        let result = new GetPurchaseOrdersResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.orders)) {
            data["orders"] = [];
            for (let item of this.orders)
                data["orders"].push(item.toJSON());
        }
        data["totalCount"] = this.totalCount;
        data["pageNumber"] = this.pageNumber;
        data["pageSize"] = this.pageSize;
        data["totalPages"] = this.totalPages;
        return data;
    }
}

export interface IGetPurchaseOrdersResponse {
    orders?: PurchaseOrderSummaryDto[];
    totalCount?: number;
    pageNumber?: number;
    pageSize?: number;
    totalPages?: number;
}

export class PurchaseOrderSummaryDto implements IPurchaseOrderSummaryDto {
    id?: number;
    orderNumber?: string;
    supplierId?: number;
    supplierName?: string;
    orderDate?: Date;
    expectedDeliveryDate?: Date | undefined;
    status?: string;
    totalAmount?: number;
    lineCount?: number;
    createdAt?: Date;
    createdBy?: string;

    constructor(data?: IPurchaseOrderSummaryDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.orderNumber = _data["orderNumber"];
            this.supplierId = _data["supplierId"];
            this.supplierName = _data["supplierName"];
            this.orderDate = _data["orderDate"] ? new Date(_data["orderDate"].toString()) : <any>undefined;
            this.expectedDeliveryDate = _data["expectedDeliveryDate"] ? new Date(_data["expectedDeliveryDate"].toString()) : <any>undefined;
            this.status = _data["status"];
            this.totalAmount = _data["totalAmount"];
            this.lineCount = _data["lineCount"];
            this.createdAt = _data["createdAt"] ? new Date(_data["createdAt"].toString()) : <any>undefined;
            this.createdBy = _data["createdBy"];
        }
    }

    static fromJS(data: any): PurchaseOrderSummaryDto {
        data = typeof data === 'object' ? data : {};
        let result = new PurchaseOrderSummaryDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["orderNumber"] = this.orderNumber;
        data["supplierId"] = this.supplierId;
        data["supplierName"] = this.supplierName;
        data["orderDate"] = this.orderDate ? this.orderDate.toISOString() : <any>undefined;
        data["expectedDeliveryDate"] = this.expectedDeliveryDate ? this.expectedDeliveryDate.toISOString() : <any>undefined;
        data["status"] = this.status;
        data["totalAmount"] = this.totalAmount;
        data["lineCount"] = this.lineCount;
        data["createdAt"] = this.createdAt ? this.createdAt.toISOString() : <any>undefined;
        data["createdBy"] = this.createdBy;
        return data;
    }
}

export interface IPurchaseOrderSummaryDto {
    id?: number;
    orderNumber?: string;
    supplierId?: number;
    supplierName?: string;
    orderDate?: Date;
    expectedDeliveryDate?: Date | undefined;
    status?: string;
    totalAmount?: number;
    lineCount?: number;
    createdAt?: Date;
    createdBy?: string;
}

export class CreatePurchaseOrderResponse implements ICreatePurchaseOrderResponse {
    id?: number;
    orderNumber?: string;
    supplierId?: number;
    supplierName?: string;
    orderDate?: Date;
    expectedDeliveryDate?: Date | undefined;
    status?: string;
    notes?: string | undefined;
    totalAmount?: number;
    lines?: PurchaseOrderLineDto[];
    history?: PurchaseOrderHistoryDto[];
    createdAt?: Date;
    createdBy?: string;
    updatedAt?: Date | undefined;
    updatedBy?: string | undefined;

    constructor(data?: ICreatePurchaseOrderResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.orderNumber = _data["orderNumber"];
            this.supplierId = _data["supplierId"];
            this.supplierName = _data["supplierName"];
            this.orderDate = _data["orderDate"] ? new Date(_data["orderDate"].toString()) : <any>undefined;
            this.expectedDeliveryDate = _data["expectedDeliveryDate"] ? new Date(_data["expectedDeliveryDate"].toString()) : <any>undefined;
            this.status = _data["status"];
            this.notes = _data["notes"];
            this.totalAmount = _data["totalAmount"];
            if (Array.isArray(_data["lines"])) {
                this.lines = [] as any;
                for (let item of _data["lines"])
                    this.lines!.push(PurchaseOrderLineDto.fromJS(item));
            }
            if (Array.isArray(_data["history"])) {
                this.history = [] as any;
                for (let item of _data["history"])
                    this.history!.push(PurchaseOrderHistoryDto.fromJS(item));
            }
            this.createdAt = _data["createdAt"] ? new Date(_data["createdAt"].toString()) : <any>undefined;
            this.createdBy = _data["createdBy"];
            this.updatedAt = _data["updatedAt"] ? new Date(_data["updatedAt"].toString()) : <any>undefined;
            this.updatedBy = _data["updatedBy"];
        }
    }

    static fromJS(data: any): CreatePurchaseOrderResponse {
        data = typeof data === 'object' ? data : {};
        let result = new CreatePurchaseOrderResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["orderNumber"] = this.orderNumber;
        data["supplierId"] = this.supplierId;
        data["supplierName"] = this.supplierName;
        data["orderDate"] = this.orderDate ? this.orderDate.toISOString() : <any>undefined;
        data["expectedDeliveryDate"] = this.expectedDeliveryDate ? this.expectedDeliveryDate.toISOString() : <any>undefined;
        data["status"] = this.status;
        data["notes"] = this.notes;
        data["totalAmount"] = this.totalAmount;
        if (Array.isArray(this.lines)) {
            data["lines"] = [];
            for (let item of this.lines)
                data["lines"].push(item.toJSON());
        }
        if (Array.isArray(this.history)) {
            data["history"] = [];
            for (let item of this.history)
                data["history"].push(item.toJSON());
        }
        data["createdAt"] = this.createdAt ? this.createdAt.toISOString() : <any>undefined;
        data["createdBy"] = this.createdBy;
        data["updatedAt"] = this.updatedAt ? this.updatedAt.toISOString() : <any>undefined;
        data["updatedBy"] = this.updatedBy;
        return data;
    }
}

export interface ICreatePurchaseOrderResponse {
    id?: number;
    orderNumber?: string;
    supplierId?: number;
    supplierName?: string;
    orderDate?: Date;
    expectedDeliveryDate?: Date | undefined;
    status?: string;
    notes?: string | undefined;
    totalAmount?: number;
    lines?: PurchaseOrderLineDto[];
    history?: PurchaseOrderHistoryDto[];
    createdAt?: Date;
    createdBy?: string;
    updatedAt?: Date | undefined;
    updatedBy?: string | undefined;
}

export class PurchaseOrderLineDto implements IPurchaseOrderLineDto {
    id?: number;
    materialId?: string;
    code?: string;
    materialName?: string;
    quantity?: number;
    unitPrice?: number;
    lineTotal?: number;
    notes?: string | undefined;

    constructor(data?: IPurchaseOrderLineDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.materialId = _data["materialId"];
            this.code = _data["code"];
            this.materialName = _data["materialName"];
            this.quantity = _data["quantity"];
            this.unitPrice = _data["unitPrice"];
            this.lineTotal = _data["lineTotal"];
            this.notes = _data["notes"];
        }
    }

    static fromJS(data: any): PurchaseOrderLineDto {
        data = typeof data === 'object' ? data : {};
        let result = new PurchaseOrderLineDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["materialId"] = this.materialId;
        data["code"] = this.code;
        data["materialName"] = this.materialName;
        data["quantity"] = this.quantity;
        data["unitPrice"] = this.unitPrice;
        data["lineTotal"] = this.lineTotal;
        data["notes"] = this.notes;
        return data;
    }
}

export interface IPurchaseOrderLineDto {
    id?: number;
    materialId?: string;
    code?: string;
    materialName?: string;
    quantity?: number;
    unitPrice?: number;
    lineTotal?: number;
    notes?: string | undefined;
}

export class PurchaseOrderHistoryDto implements IPurchaseOrderHistoryDto {
    id?: number;
    action?: string;
    oldValue?: string | undefined;
    newValue?: string | undefined;
    changedAt?: Date;
    changedBy?: string;

    constructor(data?: IPurchaseOrderHistoryDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.action = _data["action"];
            this.oldValue = _data["oldValue"];
            this.newValue = _data["newValue"];
            this.changedAt = _data["changedAt"] ? new Date(_data["changedAt"].toString()) : <any>undefined;
            this.changedBy = _data["changedBy"];
        }
    }

    static fromJS(data: any): PurchaseOrderHistoryDto {
        data = typeof data === 'object' ? data : {};
        let result = new PurchaseOrderHistoryDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["action"] = this.action;
        data["oldValue"] = this.oldValue;
        data["newValue"] = this.newValue;
        data["changedAt"] = this.changedAt ? this.changedAt.toISOString() : <any>undefined;
        data["changedBy"] = this.changedBy;
        return data;
    }
}

export interface IPurchaseOrderHistoryDto {
    id?: number;
    action?: string;
    oldValue?: string | undefined;
    newValue?: string | undefined;
    changedAt?: Date;
    changedBy?: string;
}

export class CreatePurchaseOrderRequest implements ICreatePurchaseOrderRequest {
    supplierName!: string;
    orderDate!: string;
    expectedDeliveryDate?: string | undefined;
    notes?: string | undefined;
    orderNumber?: string | undefined;
    lines?: CreatePurchaseOrderLineRequest[] | undefined;

    constructor(data?: ICreatePurchaseOrderRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.supplierName = _data["supplierName"];
            this.orderDate = _data["orderDate"];
            this.expectedDeliveryDate = _data["expectedDeliveryDate"];
            this.notes = _data["notes"];
            this.orderNumber = _data["orderNumber"];
            if (Array.isArray(_data["lines"])) {
                this.lines = [] as any;
                for (let item of _data["lines"])
                    this.lines!.push(CreatePurchaseOrderLineRequest.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CreatePurchaseOrderRequest {
        data = typeof data === 'object' ? data : {};
        let result = new CreatePurchaseOrderRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["supplierName"] = this.supplierName;
        data["orderDate"] = this.orderDate;
        data["expectedDeliveryDate"] = this.expectedDeliveryDate;
        data["notes"] = this.notes;
        data["orderNumber"] = this.orderNumber;
        if (Array.isArray(this.lines)) {
            data["lines"] = [];
            for (let item of this.lines)
                data["lines"].push(item.toJSON());
        }
        return data;
    }
}

export interface ICreatePurchaseOrderRequest {
    supplierName: string;
    orderDate: string;
    expectedDeliveryDate?: string | undefined;
    notes?: string | undefined;
    orderNumber?: string | undefined;
    lines?: CreatePurchaseOrderLineRequest[] | undefined;
}

export class CreatePurchaseOrderLineRequest implements ICreatePurchaseOrderLineRequest {
    materialId!: string;
    name?: string | undefined;
    quantity!: number;
    unitPrice!: number;
    notes?: string | undefined;

    constructor(data?: ICreatePurchaseOrderLineRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.materialId = _data["materialId"];
            this.name = _data["name"];
            this.quantity = _data["quantity"];
            this.unitPrice = _data["unitPrice"];
            this.notes = _data["notes"];
        }
    }

    static fromJS(data: any): CreatePurchaseOrderLineRequest {
        data = typeof data === 'object' ? data : {};
        let result = new CreatePurchaseOrderLineRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["materialId"] = this.materialId;
        data["name"] = this.name;
        data["quantity"] = this.quantity;
        data["unitPrice"] = this.unitPrice;
        data["notes"] = this.notes;
        return data;
    }
}

export interface ICreatePurchaseOrderLineRequest {
    materialId: string;
    name?: string | undefined;
    quantity: number;
    unitPrice: number;
    notes?: string | undefined;
}

export class GetPurchaseOrderByIdResponse implements IGetPurchaseOrderByIdResponse {
    id?: number;
    orderNumber?: string;
    supplierId?: number;
    supplierName?: string;
    orderDate?: Date;
    expectedDeliveryDate?: Date | undefined;
    status?: string;
    notes?: string | undefined;
    totalAmount?: number;
    lines?: PurchaseOrderLineDto[];
    history?: PurchaseOrderHistoryDto[];
    createdAt?: Date;
    createdBy?: string;
    updatedAt?: Date | undefined;
    updatedBy?: string | undefined;

    constructor(data?: IGetPurchaseOrderByIdResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.orderNumber = _data["orderNumber"];
            this.supplierId = _data["supplierId"];
            this.supplierName = _data["supplierName"];
            this.orderDate = _data["orderDate"] ? new Date(_data["orderDate"].toString()) : <any>undefined;
            this.expectedDeliveryDate = _data["expectedDeliveryDate"] ? new Date(_data["expectedDeliveryDate"].toString()) : <any>undefined;
            this.status = _data["status"];
            this.notes = _data["notes"];
            this.totalAmount = _data["totalAmount"];
            if (Array.isArray(_data["lines"])) {
                this.lines = [] as any;
                for (let item of _data["lines"])
                    this.lines!.push(PurchaseOrderLineDto.fromJS(item));
            }
            if (Array.isArray(_data["history"])) {
                this.history = [] as any;
                for (let item of _data["history"])
                    this.history!.push(PurchaseOrderHistoryDto.fromJS(item));
            }
            this.createdAt = _data["createdAt"] ? new Date(_data["createdAt"].toString()) : <any>undefined;
            this.createdBy = _data["createdBy"];
            this.updatedAt = _data["updatedAt"] ? new Date(_data["updatedAt"].toString()) : <any>undefined;
            this.updatedBy = _data["updatedBy"];
        }
    }

    static fromJS(data: any): GetPurchaseOrderByIdResponse {
        data = typeof data === 'object' ? data : {};
        let result = new GetPurchaseOrderByIdResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["orderNumber"] = this.orderNumber;
        data["supplierId"] = this.supplierId;
        data["supplierName"] = this.supplierName;
        data["orderDate"] = this.orderDate ? this.orderDate.toISOString() : <any>undefined;
        data["expectedDeliveryDate"] = this.expectedDeliveryDate ? this.expectedDeliveryDate.toISOString() : <any>undefined;
        data["status"] = this.status;
        data["notes"] = this.notes;
        data["totalAmount"] = this.totalAmount;
        if (Array.isArray(this.lines)) {
            data["lines"] = [];
            for (let item of this.lines)
                data["lines"].push(item.toJSON());
        }
        if (Array.isArray(this.history)) {
            data["history"] = [];
            for (let item of this.history)
                data["history"].push(item.toJSON());
        }
        data["createdAt"] = this.createdAt ? this.createdAt.toISOString() : <any>undefined;
        data["createdBy"] = this.createdBy;
        data["updatedAt"] = this.updatedAt ? this.updatedAt.toISOString() : <any>undefined;
        data["updatedBy"] = this.updatedBy;
        return data;
    }
}

export interface IGetPurchaseOrderByIdResponse {
    id?: number;
    orderNumber?: string;
    supplierId?: number;
    supplierName?: string;
    orderDate?: Date;
    expectedDeliveryDate?: Date | undefined;
    status?: string;
    notes?: string | undefined;
    totalAmount?: number;
    lines?: PurchaseOrderLineDto[];
    history?: PurchaseOrderHistoryDto[];
    createdAt?: Date;
    createdBy?: string;
    updatedAt?: Date | undefined;
    updatedBy?: string | undefined;
}

export class UpdatePurchaseOrderResponse implements IUpdatePurchaseOrderResponse {
    id?: number;
    orderNumber?: string;
    supplierId?: number;
    supplierName?: string;
    orderDate?: Date;
    expectedDeliveryDate?: Date | undefined;
    status?: string;
    notes?: string | undefined;
    totalAmount?: number;
    lines?: PurchaseOrderLineDto[];
    updatedAt?: Date | undefined;
    updatedBy?: string | undefined;

    constructor(data?: IUpdatePurchaseOrderResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.orderNumber = _data["orderNumber"];
            this.supplierId = _data["supplierId"];
            this.supplierName = _data["supplierName"];
            this.orderDate = _data["orderDate"] ? new Date(_data["orderDate"].toString()) : <any>undefined;
            this.expectedDeliveryDate = _data["expectedDeliveryDate"] ? new Date(_data["expectedDeliveryDate"].toString()) : <any>undefined;
            this.status = _data["status"];
            this.notes = _data["notes"];
            this.totalAmount = _data["totalAmount"];
            if (Array.isArray(_data["lines"])) {
                this.lines = [] as any;
                for (let item of _data["lines"])
                    this.lines!.push(PurchaseOrderLineDto.fromJS(item));
            }
            this.updatedAt = _data["updatedAt"] ? new Date(_data["updatedAt"].toString()) : <any>undefined;
            this.updatedBy = _data["updatedBy"];
        }
    }

    static fromJS(data: any): UpdatePurchaseOrderResponse {
        data = typeof data === 'object' ? data : {};
        let result = new UpdatePurchaseOrderResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["orderNumber"] = this.orderNumber;
        data["supplierId"] = this.supplierId;
        data["supplierName"] = this.supplierName;
        data["orderDate"] = this.orderDate ? this.orderDate.toISOString() : <any>undefined;
        data["expectedDeliveryDate"] = this.expectedDeliveryDate ? this.expectedDeliveryDate.toISOString() : <any>undefined;
        data["status"] = this.status;
        data["notes"] = this.notes;
        data["totalAmount"] = this.totalAmount;
        if (Array.isArray(this.lines)) {
            data["lines"] = [];
            for (let item of this.lines)
                data["lines"].push(item.toJSON());
        }
        data["updatedAt"] = this.updatedAt ? this.updatedAt.toISOString() : <any>undefined;
        data["updatedBy"] = this.updatedBy;
        return data;
    }
}

export interface IUpdatePurchaseOrderResponse {
    id?: number;
    orderNumber?: string;
    supplierId?: number;
    supplierName?: string;
    orderDate?: Date;
    expectedDeliveryDate?: Date | undefined;
    status?: string;
    notes?: string | undefined;
    totalAmount?: number;
    lines?: PurchaseOrderLineDto[];
    updatedAt?: Date | undefined;
    updatedBy?: string | undefined;
}

export class UpdatePurchaseOrderRequest implements IUpdatePurchaseOrderRequest {
    id!: number;
    supplierName!: string;
    expectedDeliveryDate?: Date | undefined;
    notes?: string | undefined;
    lines!: UpdatePurchaseOrderLineRequest[];
    orderNumber?: string | undefined;

    constructor(data?: IUpdatePurchaseOrderRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.lines = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.supplierName = _data["supplierName"];
            this.expectedDeliveryDate = _data["expectedDeliveryDate"] ? new Date(_data["expectedDeliveryDate"].toString()) : <any>undefined;
            this.notes = _data["notes"];
            if (Array.isArray(_data["lines"])) {
                this.lines = [] as any;
                for (let item of _data["lines"])
                    this.lines!.push(UpdatePurchaseOrderLineRequest.fromJS(item));
            }
            this.orderNumber = _data["orderNumber"];
        }
    }

    static fromJS(data: any): UpdatePurchaseOrderRequest {
        data = typeof data === 'object' ? data : {};
        let result = new UpdatePurchaseOrderRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["supplierName"] = this.supplierName;
        data["expectedDeliveryDate"] = this.expectedDeliveryDate ? this.expectedDeliveryDate.toISOString() : <any>undefined;
        data["notes"] = this.notes;
        if (Array.isArray(this.lines)) {
            data["lines"] = [];
            for (let item of this.lines)
                data["lines"].push(item.toJSON());
        }
        data["orderNumber"] = this.orderNumber;
        return data;
    }
}

export interface IUpdatePurchaseOrderRequest {
    id: number;
    supplierName: string;
    expectedDeliveryDate?: Date | undefined;
    notes?: string | undefined;
    lines: UpdatePurchaseOrderLineRequest[];
    orderNumber?: string | undefined;
}

export class UpdatePurchaseOrderLineRequest implements IUpdatePurchaseOrderLineRequest {
    id?: number | undefined;
    materialId!: string;
    name?: string | undefined;
    quantity!: number;
    unitPrice!: number;
    notes?: string | undefined;

    constructor(data?: IUpdatePurchaseOrderLineRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.materialId = _data["materialId"];
            this.name = _data["name"];
            this.quantity = _data["quantity"];
            this.unitPrice = _data["unitPrice"];
            this.notes = _data["notes"];
        }
    }

    static fromJS(data: any): UpdatePurchaseOrderLineRequest {
        data = typeof data === 'object' ? data : {};
        let result = new UpdatePurchaseOrderLineRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["materialId"] = this.materialId;
        data["name"] = this.name;
        data["quantity"] = this.quantity;
        data["unitPrice"] = this.unitPrice;
        data["notes"] = this.notes;
        return data;
    }
}

export interface IUpdatePurchaseOrderLineRequest {
    id?: number | undefined;
    materialId: string;
    name?: string | undefined;
    quantity: number;
    unitPrice: number;
    notes?: string | undefined;
}

export class UpdatePurchaseOrderStatusResponse implements IUpdatePurchaseOrderStatusResponse {
    id?: number;
    orderNumber?: string;
    status?: string;
    updatedAt?: Date | undefined;
    updatedBy?: string | undefined;

    constructor(data?: IUpdatePurchaseOrderStatusResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.orderNumber = _data["orderNumber"];
            this.status = _data["status"];
            this.updatedAt = _data["updatedAt"] ? new Date(_data["updatedAt"].toString()) : <any>undefined;
            this.updatedBy = _data["updatedBy"];
        }
    }

    static fromJS(data: any): UpdatePurchaseOrderStatusResponse {
        data = typeof data === 'object' ? data : {};
        let result = new UpdatePurchaseOrderStatusResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["orderNumber"] = this.orderNumber;
        data["status"] = this.status;
        data["updatedAt"] = this.updatedAt ? this.updatedAt.toISOString() : <any>undefined;
        data["updatedBy"] = this.updatedBy;
        return data;
    }
}

export interface IUpdatePurchaseOrderStatusResponse {
    id?: number;
    orderNumber?: string;
    status?: string;
    updatedAt?: Date | undefined;
    updatedBy?: string | undefined;
}

export class UpdatePurchaseOrderStatusRequest implements IUpdatePurchaseOrderStatusRequest {
    id?: number;
    status?: string;

    constructor(data?: IUpdatePurchaseOrderStatusRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.status = _data["status"];
        }
    }

    static fromJS(data: any): UpdatePurchaseOrderStatusRequest {
        data = typeof data === 'object' ? data : {};
        let result = new UpdatePurchaseOrderStatusRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["status"] = this.status;
        return data;
    }
}

export interface IUpdatePurchaseOrderStatusRequest {
    id?: number;
    status?: string;
}

export class GetPurchaseStockAnalysisResponse implements IGetPurchaseStockAnalysisResponse {
    items?: StockAnalysisItemDto[];
    totalCount?: number;
    pageNumber?: number;
    pageSize?: number;
    summary?: StockAnalysisSummaryDto;

    constructor(data?: IGetPurchaseStockAnalysisResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(StockAnalysisItemDto.fromJS(item));
            }
            this.totalCount = _data["totalCount"];
            this.pageNumber = _data["pageNumber"];
            this.pageSize = _data["pageSize"];
            this.summary = _data["summary"] ? StockAnalysisSummaryDto.fromJS(_data["summary"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetPurchaseStockAnalysisResponse {
        data = typeof data === 'object' ? data : {};
        let result = new GetPurchaseStockAnalysisResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["totalCount"] = this.totalCount;
        data["pageNumber"] = this.pageNumber;
        data["pageSize"] = this.pageSize;
        data["summary"] = this.summary ? this.summary.toJSON() : <any>undefined;
        return data;
    }
}

export interface IGetPurchaseStockAnalysisResponse {
    items?: StockAnalysisItemDto[];
    totalCount?: number;
    pageNumber?: number;
    pageSize?: number;
    summary?: StockAnalysisSummaryDto;
}

export class StockAnalysisItemDto implements IStockAnalysisItemDto {
    productCode?: string;
    productName?: string;
    productType?: string;
    availableStock?: number;
    minStockLevel?: number;
    optimalStockLevel?: number;
    consumptionInPeriod?: number;
    dailyConsumption?: number;
    daysUntilStockout?: number | undefined;
    stockEfficiencyPercentage?: number;
    severity?: StockSeverity;
    minimalOrderQuantity?: string;
    lastPurchase?: LastPurchaseInfoDto | undefined;
    suppliers?: string[];
    recommendedOrderQuantity?: number | undefined;
    isConfigured?: boolean;

    constructor(data?: IStockAnalysisItemDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.productCode = _data["productCode"];
            this.productName = _data["productName"];
            this.productType = _data["productType"];
            this.availableStock = _data["availableStock"];
            this.minStockLevel = _data["minStockLevel"];
            this.optimalStockLevel = _data["optimalStockLevel"];
            this.consumptionInPeriod = _data["consumptionInPeriod"];
            this.dailyConsumption = _data["dailyConsumption"];
            this.daysUntilStockout = _data["daysUntilStockout"];
            this.stockEfficiencyPercentage = _data["stockEfficiencyPercentage"];
            this.severity = _data["severity"];
            this.minimalOrderQuantity = _data["minimalOrderQuantity"];
            this.lastPurchase = _data["lastPurchase"] ? LastPurchaseInfoDto.fromJS(_data["lastPurchase"]) : <any>undefined;
            if (Array.isArray(_data["suppliers"])) {
                this.suppliers = [] as any;
                for (let item of _data["suppliers"])
                    this.suppliers!.push(item);
            }
            this.recommendedOrderQuantity = _data["recommendedOrderQuantity"];
            this.isConfigured = _data["isConfigured"];
        }
    }

    static fromJS(data: any): StockAnalysisItemDto {
        data = typeof data === 'object' ? data : {};
        let result = new StockAnalysisItemDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["productCode"] = this.productCode;
        data["productName"] = this.productName;
        data["productType"] = this.productType;
        data["availableStock"] = this.availableStock;
        data["minStockLevel"] = this.minStockLevel;
        data["optimalStockLevel"] = this.optimalStockLevel;
        data["consumptionInPeriod"] = this.consumptionInPeriod;
        data["dailyConsumption"] = this.dailyConsumption;
        data["daysUntilStockout"] = this.daysUntilStockout;
        data["stockEfficiencyPercentage"] = this.stockEfficiencyPercentage;
        data["severity"] = this.severity;
        data["minimalOrderQuantity"] = this.minimalOrderQuantity;
        data["lastPurchase"] = this.lastPurchase ? this.lastPurchase.toJSON() : <any>undefined;
        if (Array.isArray(this.suppliers)) {
            data["suppliers"] = [];
            for (let item of this.suppliers)
                data["suppliers"].push(item);
        }
        data["recommendedOrderQuantity"] = this.recommendedOrderQuantity;
        data["isConfigured"] = this.isConfigured;
        return data;
    }
}

export interface IStockAnalysisItemDto {
    productCode?: string;
    productName?: string;
    productType?: string;
    availableStock?: number;
    minStockLevel?: number;
    optimalStockLevel?: number;
    consumptionInPeriod?: number;
    dailyConsumption?: number;
    daysUntilStockout?: number | undefined;
    stockEfficiencyPercentage?: number;
    severity?: StockSeverity;
    minimalOrderQuantity?: string;
    lastPurchase?: LastPurchaseInfoDto | undefined;
    suppliers?: string[];
    recommendedOrderQuantity?: number | undefined;
    isConfigured?: boolean;
}

export enum StockSeverity {
    Critical = 0,
    Low = 1,
    Optimal = 2,
    Overstocked = 3,
    NotConfigured = 4,
}

export class LastPurchaseInfoDto implements ILastPurchaseInfoDto {
    date?: Date;
    supplierName?: string;
    amount?: number;
    unitPrice?: number;
    totalPrice?: number;

    constructor(data?: ILastPurchaseInfoDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.date = _data["date"] ? new Date(_data["date"].toString()) : <any>undefined;
            this.supplierName = _data["supplierName"];
            this.amount = _data["amount"];
            this.unitPrice = _data["unitPrice"];
            this.totalPrice = _data["totalPrice"];
        }
    }

    static fromJS(data: any): LastPurchaseInfoDto {
        data = typeof data === 'object' ? data : {};
        let result = new LastPurchaseInfoDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["date"] = this.date ? this.date.toISOString() : <any>undefined;
        data["supplierName"] = this.supplierName;
        data["amount"] = this.amount;
        data["unitPrice"] = this.unitPrice;
        data["totalPrice"] = this.totalPrice;
        return data;
    }
}

export interface ILastPurchaseInfoDto {
    date?: Date;
    supplierName?: string;
    amount?: number;
    unitPrice?: number;
    totalPrice?: number;
}

export class StockAnalysisSummaryDto implements IStockAnalysisSummaryDto {
    totalProducts?: number;
    criticalCount?: number;
    lowStockCount?: number;
    optimalCount?: number;
    overstockedCount?: number;
    notConfiguredCount?: number;
    totalInventoryValue?: number;
    analysisPeriodStart?: Date;
    analysisPeriodEnd?: Date;

    constructor(data?: IStockAnalysisSummaryDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.totalProducts = _data["totalProducts"];
            this.criticalCount = _data["criticalCount"];
            this.lowStockCount = _data["lowStockCount"];
            this.optimalCount = _data["optimalCount"];
            this.overstockedCount = _data["overstockedCount"];
            this.notConfiguredCount = _data["notConfiguredCount"];
            this.totalInventoryValue = _data["totalInventoryValue"];
            this.analysisPeriodStart = _data["analysisPeriodStart"] ? new Date(_data["analysisPeriodStart"].toString()) : <any>undefined;
            this.analysisPeriodEnd = _data["analysisPeriodEnd"] ? new Date(_data["analysisPeriodEnd"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): StockAnalysisSummaryDto {
        data = typeof data === 'object' ? data : {};
        let result = new StockAnalysisSummaryDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalProducts"] = this.totalProducts;
        data["criticalCount"] = this.criticalCount;
        data["lowStockCount"] = this.lowStockCount;
        data["optimalCount"] = this.optimalCount;
        data["overstockedCount"] = this.overstockedCount;
        data["notConfiguredCount"] = this.notConfiguredCount;
        data["totalInventoryValue"] = this.totalInventoryValue;
        data["analysisPeriodStart"] = this.analysisPeriodStart ? this.analysisPeriodStart.toISOString() : <any>undefined;
        data["analysisPeriodEnd"] = this.analysisPeriodEnd ? this.analysisPeriodEnd.toISOString() : <any>undefined;
        return data;
    }
}

export interface IStockAnalysisSummaryDto {
    totalProducts?: number;
    criticalCount?: number;
    lowStockCount?: number;
    optimalCount?: number;
    overstockedCount?: number;
    notConfiguredCount?: number;
    totalInventoryValue?: number;
    analysisPeriodStart?: Date;
    analysisPeriodEnd?: Date;
}

export enum StockStatusFilter {
    All = 0,
    Critical = 1,
    Low = 2,
    Optimal = 3,
    Overstocked = 4,
    NotConfigured = 5,
}

export enum StockAnalysisSortBy {
    ProductCode = 0,
    ProductName = 1,
    AvailableStock = 2,
    Consumption = 3,
    StockEfficiency = 4,
    LastPurchaseDate = 5,
}

export interface FileResponse {
    data: Blob;
    status: number;
    fileName?: string;
    headers?: { [name: string]: any };
}

export class SwaggerException extends Error {
    override message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isSwaggerException = true;

    static isSwaggerException(obj: any): obj is SwaggerException {
        return obj.isSwaggerException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new SwaggerException(message, status, response, headers, null);
}