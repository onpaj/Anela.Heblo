//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

export class ApiClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl ?? "";
    }

    getDataLoadAuditLogs(limit: number | null | undefined, fromDate: Date | null | undefined, toDate: Date | null | undefined): Promise<FileResponse> {
        let url_ = this.baseUrl + "/api/Audit/data-loads?";
        if (limit !== undefined && limit !== null)
            url_ += "limit=" + encodeURIComponent("" + limit) + "&";
        if (fromDate !== undefined && fromDate !== null)
            url_ += "fromDate=" + encodeURIComponent(fromDate ? "" + fromDate.toISOString() : "") + "&";
        if (toDate !== undefined && toDate !== null)
            url_ += "toDate=" + encodeURIComponent(toDate ? "" + toDate.toISOString() : "") + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/octet-stream"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetDataLoadAuditLogs(_response);
        });
    }

    protected processGetDataLoadAuditLogs(response: Response): Promise<FileResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            let fileNameMatch = contentDisposition ? /filename\*=(?:(\\?['"])(.*?)\1|(?:[^\s]+'.*?')?([^;\n]*))/g.exec(contentDisposition) : undefined;
            let fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[3] || fileNameMatch[2] : undefined;
            if (fileName) {
                fileName = decodeURIComponent(fileName);
            } else {
                fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
                fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            }
            return response.blob().then(blob => { return { fileName: fileName, data: blob, status: status, headers: _headers }; });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<FileResponse>(null as any);
    }

    getAuditSummary(fromDate: Date | null | undefined, toDate: Date | null | undefined): Promise<FileResponse> {
        let url_ = this.baseUrl + "/api/Audit/summary?";
        if (fromDate !== undefined && fromDate !== null)
            url_ += "fromDate=" + encodeURIComponent(fromDate ? "" + fromDate.toISOString() : "") + "&";
        if (toDate !== undefined && toDate !== null)
            url_ += "toDate=" + encodeURIComponent(toDate ? "" + toDate.toISOString() : "") + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/octet-stream"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetAuditSummary(_response);
        });
    }

    protected processGetAuditSummary(response: Response): Promise<FileResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            let fileNameMatch = contentDisposition ? /filename\*=(?:(\\?['"])(.*?)\1|(?:[^\s]+'.*?')?([^;\n]*))/g.exec(contentDisposition) : undefined;
            let fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[3] || fileNameMatch[2] : undefined;
            if (fileName) {
                fileName = decodeURIComponent(fileName);
            } else {
                fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
                fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            }
            return response.blob().then(blob => { return { fileName: fileName, data: blob, status: status, headers: _headers }; });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<FileResponse>(null as any);
    }
}

export class ApiClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl ?? "";
    }

    getCatalogList(type: ProductType | null | undefined, pageNumber: number | undefined, pageSize: number | undefined, sortBy: string | null | undefined, sortDescending: boolean | undefined, productName: string | null | undefined, productCode: string | null | undefined): Promise<GetCatalogListResponse> {
        let url_ = this.baseUrl + "/api/Catalog?";
        if (type !== undefined && type !== null)
            url_ += "Type=" + encodeURIComponent("" + type) + "&";
        if (pageNumber === null)
            throw new Error("The parameter 'pageNumber' cannot be null.");
        else if (pageNumber !== undefined)
            url_ += "PageNumber=" + encodeURIComponent("" + pageNumber) + "&";
        if (pageSize === null)
            throw new Error("The parameter 'pageSize' cannot be null.");
        else if (pageSize !== undefined)
            url_ += "PageSize=" + encodeURIComponent("" + pageSize) + "&";
        if (sortBy !== undefined && sortBy !== null)
            url_ += "SortBy=" + encodeURIComponent("" + sortBy) + "&";
        if (sortDescending === null)
            throw new Error("The parameter 'sortDescending' cannot be null.");
        else if (sortDescending !== undefined)
            url_ += "SortDescending=" + encodeURIComponent("" + sortDescending) + "&";
        if (productName !== undefined && productName !== null)
            url_ += "ProductName=" + encodeURIComponent("" + productName) + "&";
        if (productCode !== undefined && productCode !== null)
            url_ += "ProductCode=" + encodeURIComponent("" + productCode) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetCatalogList(_response);
        });
    }

    protected processGetCatalogList(response: Response): Promise<GetCatalogListResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GetCatalogListResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<GetCatalogListResponse>(null as any);
    }

    getCatalogDetail(productCode: string): Promise<GetCatalogDetailResponse> {
        let url_ = this.baseUrl + "/api/Catalog/{productCode}";
        if (productCode === undefined || productCode === null)
            throw new Error("The parameter 'productCode' must be defined.");
        url_ = url_.replace("{productCode}", encodeURIComponent("" + productCode));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetCatalogDetail(_response);
        });
    }

    protected processGetCatalogDetail(response: Response): Promise<GetCatalogDetailResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GetCatalogDetailResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<GetCatalogDetailResponse>(null as any);
    }

    refreshTransportData(): Promise<FileResponse> {
        let url_ = this.baseUrl + "/api/Catalog/refresh/transport";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "POST",
            headers: {
                "Accept": "application/octet-stream"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processRefreshTransportData(_response);
        });
    }

    protected processRefreshTransportData(response: Response): Promise<FileResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            let fileNameMatch = contentDisposition ? /filename\*=(?:(\\?['"])(.*?)\1|(?:[^\s]+'.*?')?([^;\n]*))/g.exec(contentDisposition) : undefined;
            let fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[3] || fileNameMatch[2] : undefined;
            if (fileName) {
                fileName = decodeURIComponent(fileName);
            } else {
                fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
                fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            }
            return response.blob().then(blob => { return { fileName: fileName, data: blob, status: status, headers: _headers }; });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<FileResponse>(null as any);
    }

    refreshReserveData(): Promise<FileResponse> {
        let url_ = this.baseUrl + "/api/Catalog/refresh/reserve";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "POST",
            headers: {
                "Accept": "application/octet-stream"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processRefreshReserveData(_response);
        });
    }

    protected processRefreshReserveData(response: Response): Promise<FileResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            let fileNameMatch = contentDisposition ? /filename\*=(?:(\\?['"])(.*?)\1|(?:[^\s]+'.*?')?([^;\n]*))/g.exec(contentDisposition) : undefined;
            let fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[3] || fileNameMatch[2] : undefined;
            if (fileName) {
                fileName = decodeURIComponent(fileName);
            } else {
                fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
                fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            }
            return response.blob().then(blob => { return { fileName: fileName, data: blob, status: status, headers: _headers }; });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<FileResponse>(null as any);
    }

    refreshSalesData(): Promise<FileResponse> {
        let url_ = this.baseUrl + "/api/Catalog/refresh/sales";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "POST",
            headers: {
                "Accept": "application/octet-stream"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processRefreshSalesData(_response);
        });
    }

    protected processRefreshSalesData(response: Response): Promise<FileResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            let fileNameMatch = contentDisposition ? /filename\*=(?:(\\?['"])(.*?)\1|(?:[^\s]+'.*?')?([^;\n]*))/g.exec(contentDisposition) : undefined;
            let fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[3] || fileNameMatch[2] : undefined;
            if (fileName) {
                fileName = decodeURIComponent(fileName);
            } else {
                fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
                fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            }
            return response.blob().then(blob => { return { fileName: fileName, data: blob, status: status, headers: _headers }; });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<FileResponse>(null as any);
    }

    refreshAttributesData(): Promise<FileResponse> {
        let url_ = this.baseUrl + "/api/Catalog/refresh/attributes";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "POST",
            headers: {
                "Accept": "application/octet-stream"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processRefreshAttributesData(_response);
        });
    }

    protected processRefreshAttributesData(response: Response): Promise<FileResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            let fileNameMatch = contentDisposition ? /filename\*=(?:(\\?['"])(.*?)\1|(?:[^\s]+'.*?')?([^;\n]*))/g.exec(contentDisposition) : undefined;
            let fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[3] || fileNameMatch[2] : undefined;
            if (fileName) {
                fileName = decodeURIComponent(fileName);
            } else {
                fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
                fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            }
            return response.blob().then(blob => { return { fileName: fileName, data: blob, status: status, headers: _headers }; });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<FileResponse>(null as any);
    }

    refreshErpStockData(): Promise<FileResponse> {
        let url_ = this.baseUrl + "/api/Catalog/refresh/erp-stock";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "POST",
            headers: {
                "Accept": "application/octet-stream"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processRefreshErpStockData(_response);
        });
    }

    protected processRefreshErpStockData(response: Response): Promise<FileResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            let fileNameMatch = contentDisposition ? /filename\*=(?:(\\?['"])(.*?)\1|(?:[^\s]+'.*?')?([^;\n]*))/g.exec(contentDisposition) : undefined;
            let fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[3] || fileNameMatch[2] : undefined;
            if (fileName) {
                fileName = decodeURIComponent(fileName);
            } else {
                fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
                fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            }
            return response.blob().then(blob => { return { fileName: fileName, data: blob, status: status, headers: _headers }; });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<FileResponse>(null as any);
    }

    refreshEshopStockData(): Promise<FileResponse> {
        let url_ = this.baseUrl + "/api/Catalog/refresh/eshop-stock";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "POST",
            headers: {
                "Accept": "application/octet-stream"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processRefreshEshopStockData(_response);
        });
    }

    protected processRefreshEshopStockData(response: Response): Promise<FileResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            let fileNameMatch = contentDisposition ? /filename\*=(?:(\\?['"])(.*?)\1|(?:[^\s]+'.*?')?([^;\n]*))/g.exec(contentDisposition) : undefined;
            let fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[3] || fileNameMatch[2] : undefined;
            if (fileName) {
                fileName = decodeURIComponent(fileName);
            } else {
                fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
                fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            }
            return response.blob().then(blob => { return { fileName: fileName, data: blob, status: status, headers: _headers }; });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<FileResponse>(null as any);
    }

    refreshPurchaseHistoryData(): Promise<FileResponse> {
        let url_ = this.baseUrl + "/api/Catalog/refresh/purchase-history";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "POST",
            headers: {
                "Accept": "application/octet-stream"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processRefreshPurchaseHistoryData(_response);
        });
    }

    protected processRefreshPurchaseHistoryData(response: Response): Promise<FileResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            let fileNameMatch = contentDisposition ? /filename\*=(?:(\\?['"])(.*?)\1|(?:[^\s]+'.*?')?([^;\n]*))/g.exec(contentDisposition) : undefined;
            let fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[3] || fileNameMatch[2] : undefined;
            if (fileName) {
                fileName = decodeURIComponent(fileName);
            } else {
                fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
                fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            }
            return response.blob().then(blob => { return { fileName: fileName, data: blob, status: status, headers: _headers }; });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<FileResponse>(null as any);
    }

    refreshConsumedHistoryData(): Promise<FileResponse> {
        let url_ = this.baseUrl + "/api/Catalog/refresh/consumed-history";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "POST",
            headers: {
                "Accept": "application/octet-stream"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processRefreshConsumedHistoryData(_response);
        });
    }

    protected processRefreshConsumedHistoryData(response: Response): Promise<FileResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            let fileNameMatch = contentDisposition ? /filename\*=(?:(\\?['"])(.*?)\1|(?:[^\s]+'.*?')?([^;\n]*))/g.exec(contentDisposition) : undefined;
            let fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[3] || fileNameMatch[2] : undefined;
            if (fileName) {
                fileName = decodeURIComponent(fileName);
            } else {
                fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
                fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            }
            return response.blob().then(blob => { return { fileName: fileName, data: blob, status: status, headers: _headers }; });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<FileResponse>(null as any);
    }

    refreshStockTakingData(): Promise<FileResponse> {
        let url_ = this.baseUrl + "/api/Catalog/refresh/stock-taking";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "POST",
            headers: {
                "Accept": "application/octet-stream"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processRefreshStockTakingData(_response);
        });
    }

    protected processRefreshStockTakingData(response: Response): Promise<FileResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            let fileNameMatch = contentDisposition ? /filename\*=(?:(\\?['"])(.*?)\1|(?:[^\s]+'.*?')?([^;\n]*))/g.exec(contentDisposition) : undefined;
            let fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[3] || fileNameMatch[2] : undefined;
            if (fileName) {
                fileName = decodeURIComponent(fileName);
            } else {
                fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
                fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            }
            return response.blob().then(blob => { return { fileName: fileName, data: blob, status: status, headers: _headers }; });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<FileResponse>(null as any);
    }

    refreshLotsData(): Promise<FileResponse> {
        let url_ = this.baseUrl + "/api/Catalog/refresh/lots";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "POST",
            headers: {
                "Accept": "application/octet-stream"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processRefreshLotsData(_response);
        });
    }

    protected processRefreshLotsData(response: Response): Promise<FileResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            let fileNameMatch = contentDisposition ? /filename\*=(?:(\\?['"])(.*?)\1|(?:[^\s]+'.*?')?([^;\n]*))/g.exec(contentDisposition) : undefined;
            let fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[3] || fileNameMatch[2] : undefined;
            if (fileName) {
                fileName = decodeURIComponent(fileName);
            } else {
                fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
                fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            }
            return response.blob().then(blob => { return { fileName: fileName, data: blob, status: status, headers: _headers }; });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<FileResponse>(null as any);
    }

    getMaterialsForPurchase(searchTerm: string | null | undefined, limit: number | undefined): Promise<GetMaterialsForPurchaseResponse> {
        let url_ = this.baseUrl + "/api/Catalog/materials-for-purchase?";
        if (searchTerm !== undefined && searchTerm !== null)
            url_ += "SearchTerm=" + encodeURIComponent("" + searchTerm) + "&";
        if (limit === null)
            throw new Error("The parameter 'limit' cannot be null.");
        else if (limit !== undefined)
            url_ += "Limit=" + encodeURIComponent("" + limit) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetMaterialsForPurchase(_response);
        });
    }

    protected processGetMaterialsForPurchase(response: Response): Promise<GetMaterialsForPurchaseResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GetMaterialsForPurchaseResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<GetMaterialsForPurchaseResponse>(null as any);
    }
}

export class ApiClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl ?? "";
    }

    getConfiguration(): Promise<GetConfigurationResponse> {
        let url_ = this.baseUrl + "/api/Configuration";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetConfiguration(_response);
        });
    }

    protected processGetConfiguration(response: Response): Promise<GetConfigurationResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GetConfigurationResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<GetConfigurationResponse>(null as any);
    }
}

export class ApiClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl ?? "";
    }

    testLogging(): Promise<FileResponse> {
        let url_ = this.baseUrl + "/api/Diagnostics/test-logging";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/octet-stream"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processTestLogging(_response);
        });
    }

    protected processTestLogging(response: Response): Promise<FileResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            let fileNameMatch = contentDisposition ? /filename\*=(?:(\\?['"])(.*?)\1|(?:[^\s]+'.*?')?([^;\n]*))/g.exec(contentDisposition) : undefined;
            let fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[3] || fileNameMatch[2] : undefined;
            if (fileName) {
                fileName = decodeURIComponent(fileName);
            } else {
                fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
                fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            }
            return response.blob().then(blob => { return { fileName: fileName, data: blob, status: status, headers: _headers }; });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<FileResponse>(null as any);
    }

    testException(): Promise<FileResponse> {
        let url_ = this.baseUrl + "/api/Diagnostics/test-exception";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/octet-stream"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processTestException(_response);
        });
    }

    protected processTestException(response: Response): Promise<FileResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            let fileNameMatch = contentDisposition ? /filename\*=(?:(\\?['"])(.*?)\1|(?:[^\s]+'.*?')?([^;\n]*))/g.exec(contentDisposition) : undefined;
            let fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[3] || fileNameMatch[2] : undefined;
            if (fileName) {
                fileName = decodeURIComponent(fileName);
            } else {
                fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
                fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            }
            return response.blob().then(blob => { return { fileName: fileName, data: blob, status: status, headers: _headers }; });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<FileResponse>(null as any);
    }

    health(): Promise<FileResponse> {
        let url_ = this.baseUrl + "/api/Diagnostics/health";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/octet-stream"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processHealth(_response);
        });
    }

    protected processHealth(response: Response): Promise<FileResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            let fileNameMatch = contentDisposition ? /filename\*=(?:(\\?['"])(.*?)\1|(?:[^\s]+'.*?')?([^;\n]*))/g.exec(contentDisposition) : undefined;
            let fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[3] || fileNameMatch[2] : undefined;
            if (fileName) {
                fileName = decodeURIComponent(fileName);
            } else {
                fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
                fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            }
            return response.blob().then(blob => { return { fileName: fileName, data: blob, status: status, headers: _headers }; });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<FileResponse>(null as any);
    }

    getApplicationInsightsConfig(): Promise<FileResponse> {
        let url_ = this.baseUrl + "/api/Diagnostics/appinsights-config";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/octet-stream"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetApplicationInsightsConfig(_response);
        });
    }

    protected processGetApplicationInsightsConfig(response: Response): Promise<FileResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            let fileNameMatch = contentDisposition ? /filename\*=(?:(\\?['"])(.*?)\1|(?:[^\s]+'.*?')?([^;\n]*))/g.exec(contentDisposition) : undefined;
            let fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[3] || fileNameMatch[2] : undefined;
            if (fileName) {
                fileName = decodeURIComponent(fileName);
            } else {
                fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
                fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            }
            return response.blob().then(blob => { return { fileName: fileName, data: blob, status: status, headers: _headers }; });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<FileResponse>(null as any);
    }
}

export class ApiClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl ?? "";
    }

    getPurchaseOrders(searchTerm: string | null | undefined, status: string | null | undefined, fromDate: Date | null | undefined, toDate: Date | null | undefined, supplierId: number | null | undefined, pageNumber: number | undefined, pageSize: number | undefined, sortBy: string | undefined, sortDescending: boolean | undefined): Promise<GetPurchaseOrdersResponse> {
        let url_ = this.baseUrl + "/api/purchase-orders?";
        if (searchTerm !== undefined && searchTerm !== null)
            url_ += "SearchTerm=" + encodeURIComponent("" + searchTerm) + "&";
        if (status !== undefined && status !== null)
            url_ += "Status=" + encodeURIComponent("" + status) + "&";
        if (fromDate !== undefined && fromDate !== null)
            url_ += "FromDate=" + encodeURIComponent(fromDate ? "" + fromDate.toISOString() : "") + "&";
        if (toDate !== undefined && toDate !== null)
            url_ += "ToDate=" + encodeURIComponent(toDate ? "" + toDate.toISOString() : "") + "&";
        if (supplierId !== undefined && supplierId !== null)
            url_ += "SupplierId=" + encodeURIComponent("" + supplierId) + "&";
        if (pageNumber === null)
            throw new Error("The parameter 'pageNumber' cannot be null.");
        else if (pageNumber !== undefined)
            url_ += "PageNumber=" + encodeURIComponent("" + pageNumber) + "&";
        if (pageSize === null)
            throw new Error("The parameter 'pageSize' cannot be null.");
        else if (pageSize !== undefined)
            url_ += "PageSize=" + encodeURIComponent("" + pageSize) + "&";
        if (sortBy === null)
            throw new Error("The parameter 'sortBy' cannot be null.");
        else if (sortBy !== undefined)
            url_ += "SortBy=" + encodeURIComponent("" + sortBy) + "&";
        if (sortDescending === null)
            throw new Error("The parameter 'sortDescending' cannot be null.");
        else if (sortDescending !== undefined)
            url_ += "SortDescending=" + encodeURIComponent("" + sortDescending) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetPurchaseOrders(_response);
        });
    }

    protected processGetPurchaseOrders(response: Response): Promise<GetPurchaseOrdersResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GetPurchaseOrdersResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<GetPurchaseOrdersResponse>(null as any);
    }

    createPurchaseOrder(request: CreatePurchaseOrderRequest): Promise<CreatePurchaseOrderResponse> {
        let url_ = this.baseUrl + "/api/purchase-orders";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCreatePurchaseOrder(_response);
        });
    }

    protected processCreatePurchaseOrder(response: Response): Promise<CreatePurchaseOrderResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CreatePurchaseOrderResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<CreatePurchaseOrderResponse>(null as any);
    }

    getPurchaseOrderById(id: number): Promise<GetPurchaseOrderByIdResponse> {
        let url_ = this.baseUrl + "/api/purchase-orders/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetPurchaseOrderById(_response);
        });
    }

    protected processGetPurchaseOrderById(response: Response): Promise<GetPurchaseOrderByIdResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GetPurchaseOrderByIdResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<GetPurchaseOrderByIdResponse>(null as any);
    }

    updatePurchaseOrder(id: number, request: UpdatePurchaseOrderRequest): Promise<UpdatePurchaseOrderResponse> {
        let url_ = this.baseUrl + "/api/purchase-orders/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_: RequestInit = {
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUpdatePurchaseOrder(_response);
        });
    }

    protected processUpdatePurchaseOrder(response: Response): Promise<UpdatePurchaseOrderResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = UpdatePurchaseOrderResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<UpdatePurchaseOrderResponse>(null as any);
    }

    updatePurchaseOrderStatus(id: number, request: UpdatePurchaseOrderStatusRequest): Promise<UpdatePurchaseOrderStatusResponse> {
        let url_ = this.baseUrl + "/api/purchase-orders/{id}/status";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_: RequestInit = {
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUpdatePurchaseOrderStatus(_response);
        });
    }

    protected processUpdatePurchaseOrderStatus(response: Response): Promise<UpdatePurchaseOrderStatusResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = UpdatePurchaseOrderStatusResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<UpdatePurchaseOrderStatusResponse>(null as any);
    }

    getPurchaseOrderHistory(id: number): Promise<PurchaseOrderHistoryDto[]> {
        let url_ = this.baseUrl + "/api/purchase-orders/{id}/history";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetPurchaseOrderHistory(_response);
        });
    }

    protected processGetPurchaseOrderHistory(response: Response): Promise<PurchaseOrderHistoryDto[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(PurchaseOrderHistoryDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<PurchaseOrderHistoryDto[]>(null as any);
    }
}

export class GetCatalogListResponse implements IGetCatalogListResponse {
    items?: CatalogItemDto[];
    totalCount?: number;
    pageNumber?: number;
    pageSize?: number;
    totalPages?: number;

    constructor(data?: IGetCatalogListResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(CatalogItemDto.fromJS(item));
            }
            this.totalCount = _data["totalCount"];
            this.pageNumber = _data["pageNumber"];
            this.pageSize = _data["pageSize"];
            this.totalPages = _data["totalPages"];
        }
    }

    static fromJS(data: any): GetCatalogListResponse {
        data = typeof data === 'object' ? data : {};
        let result = new GetCatalogListResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["totalCount"] = this.totalCount;
        data["pageNumber"] = this.pageNumber;
        data["pageSize"] = this.pageSize;
        data["totalPages"] = this.totalPages;
        return data;
    }
}

export interface IGetCatalogListResponse {
    items?: CatalogItemDto[];
    totalCount?: number;
    pageNumber?: number;
    pageSize?: number;
    totalPages?: number;
}

export class CatalogItemDto implements ICatalogItemDto {
    productCode?: string;
    productName?: string;
    type?: ProductType;
    stock?: StockDto;
    price?: PriceDto;
    properties?: PropertiesDto;
    location?: string;
    minimalOrderQuantity?: string;
    minimalManufactureQuantity?: number;

    constructor(data?: ICatalogItemDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.productCode = _data["productCode"];
            this.productName = _data["productName"];
            this.type = _data["type"];
            this.stock = _data["stock"] ? StockDto.fromJS(_data["stock"]) : <any>undefined;
            this.price = _data["price"] ? PriceDto.fromJS(_data["price"]) : <any>undefined;
            this.properties = _data["properties"] ? PropertiesDto.fromJS(_data["properties"]) : <any>undefined;
            this.location = _data["location"];
            this.minimalOrderQuantity = _data["minimalOrderQuantity"];
            this.minimalManufactureQuantity = _data["minimalManufactureQuantity"];
        }
    }

    static fromJS(data: any): CatalogItemDto {
        data = typeof data === 'object' ? data : {};
        let result = new CatalogItemDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["productCode"] = this.productCode;
        data["productName"] = this.productName;
        data["type"] = this.type;
        data["stock"] = this.stock ? this.stock.toJSON() : <any>undefined;
        data["price"] = this.price ? this.price.toJSON() : <any>undefined;
        data["properties"] = this.properties ? this.properties.toJSON() : <any>undefined;
        data["location"] = this.location;
        data["minimalOrderQuantity"] = this.minimalOrderQuantity;
        data["minimalManufactureQuantity"] = this.minimalManufactureQuantity;
        return data;
    }
}

export interface ICatalogItemDto {
    productCode?: string;
    productName?: string;
    type?: ProductType;
    stock?: StockDto;
    price?: PriceDto;
    properties?: PropertiesDto;
    location?: string;
    minimalOrderQuantity?: string;
    minimalManufactureQuantity?: number;
}

export enum ProductType {
    UNDEFINED = 0,
    Goods = 1,
    Material = 3,
    SemiProduct = 7,
    Product = 8,
}

export class StockDto implements IStockDto {
    eshop?: number;
    erp?: number;
    transport?: number;
    reserve?: number;
    available?: number;

    constructor(data?: IStockDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.eshop = _data["eshop"];
            this.erp = _data["erp"];
            this.transport = _data["transport"];
            this.reserve = _data["reserve"];
            this.available = _data["available"];
        }
    }

    static fromJS(data: any): StockDto {
        data = typeof data === 'object' ? data : {};
        let result = new StockDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["eshop"] = this.eshop;
        data["erp"] = this.erp;
        data["transport"] = this.transport;
        data["reserve"] = this.reserve;
        data["available"] = this.available;
        return data;
    }
}

export interface IStockDto {
    eshop?: number;
    erp?: number;
    transport?: number;
    reserve?: number;
    available?: number;
}

export class PriceDto implements IPriceDto {
    currentSellingPrice?: number | undefined;
    currentPurchasePrice?: number | undefined;
    sellingPriceWithVat?: number | undefined;
    purchasePriceWithVat?: number | undefined;
    eshopPrice?: EshopPriceDto | undefined;
    erpPrice?: ErpPriceDto | undefined;

    constructor(data?: IPriceDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.currentSellingPrice = _data["currentSellingPrice"];
            this.currentPurchasePrice = _data["currentPurchasePrice"];
            this.sellingPriceWithVat = _data["sellingPriceWithVat"];
            this.purchasePriceWithVat = _data["purchasePriceWithVat"];
            this.eshopPrice = _data["eshopPrice"] ? EshopPriceDto.fromJS(_data["eshopPrice"]) : <any>undefined;
            this.erpPrice = _data["erpPrice"] ? ErpPriceDto.fromJS(_data["erpPrice"]) : <any>undefined;
        }
    }

    static fromJS(data: any): PriceDto {
        data = typeof data === 'object' ? data : {};
        let result = new PriceDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["currentSellingPrice"] = this.currentSellingPrice;
        data["currentPurchasePrice"] = this.currentPurchasePrice;
        data["sellingPriceWithVat"] = this.sellingPriceWithVat;
        data["purchasePriceWithVat"] = this.purchasePriceWithVat;
        data["eshopPrice"] = this.eshopPrice ? this.eshopPrice.toJSON() : <any>undefined;
        data["erpPrice"] = this.erpPrice ? this.erpPrice.toJSON() : <any>undefined;
        return data;
    }
}

export interface IPriceDto {
    currentSellingPrice?: number | undefined;
    currentPurchasePrice?: number | undefined;
    sellingPriceWithVat?: number | undefined;
    purchasePriceWithVat?: number | undefined;
    eshopPrice?: EshopPriceDto | undefined;
    erpPrice?: ErpPriceDto | undefined;
}

export class EshopPriceDto implements IEshopPriceDto {
    priceWithVat?: number;
    purchasePrice?: number;

    constructor(data?: IEshopPriceDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.priceWithVat = _data["priceWithVat"];
            this.purchasePrice = _data["purchasePrice"];
        }
    }

    static fromJS(data: any): EshopPriceDto {
        data = typeof data === 'object' ? data : {};
        let result = new EshopPriceDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["priceWithVat"] = this.priceWithVat;
        data["purchasePrice"] = this.purchasePrice;
        return data;
    }
}

export interface IEshopPriceDto {
    priceWithVat?: number;
    purchasePrice?: number;
}

export class ErpPriceDto implements IErpPriceDto {
    priceWithoutVat?: number;
    priceWithVat?: number;
    purchasePrice?: number;
    purchasePriceWithVat?: number;

    constructor(data?: IErpPriceDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.priceWithoutVat = _data["priceWithoutVat"];
            this.priceWithVat = _data["priceWithVat"];
            this.purchasePrice = _data["purchasePrice"];
            this.purchasePriceWithVat = _data["purchasePriceWithVat"];
        }
    }

    static fromJS(data: any): ErpPriceDto {
        data = typeof data === 'object' ? data : {};
        let result = new ErpPriceDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["priceWithoutVat"] = this.priceWithoutVat;
        data["priceWithVat"] = this.priceWithVat;
        data["purchasePrice"] = this.purchasePrice;
        data["purchasePriceWithVat"] = this.purchasePriceWithVat;
        return data;
    }
}

export interface IErpPriceDto {
    priceWithoutVat?: number;
    priceWithVat?: number;
    purchasePrice?: number;
    purchasePriceWithVat?: number;
}

export class PropertiesDto implements IPropertiesDto {
    optimalStockDaysSetup?: number;
    stockMinSetup?: number;
    batchSize?: number;
    seasonMonths?: number[];

    constructor(data?: IPropertiesDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.optimalStockDaysSetup = _data["optimalStockDaysSetup"];
            this.stockMinSetup = _data["stockMinSetup"];
            this.batchSize = _data["batchSize"];
            if (Array.isArray(_data["seasonMonths"])) {
                this.seasonMonths = [] as any;
                for (let item of _data["seasonMonths"])
                    this.seasonMonths!.push(item);
            }
        }
    }

    static fromJS(data: any): PropertiesDto {
        data = typeof data === 'object' ? data : {};
        let result = new PropertiesDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["optimalStockDaysSetup"] = this.optimalStockDaysSetup;
        data["stockMinSetup"] = this.stockMinSetup;
        data["batchSize"] = this.batchSize;
        if (Array.isArray(this.seasonMonths)) {
            data["seasonMonths"] = [];
            for (let item of this.seasonMonths)
                data["seasonMonths"].push(item);
        }
        return data;
    }
}

export interface IPropertiesDto {
    optimalStockDaysSetup?: number;
    stockMinSetup?: number;
    batchSize?: number;
    seasonMonths?: number[];
}

export class GetCatalogDetailResponse implements IGetCatalogDetailResponse {
    item?: CatalogItemDto;
    historicalData?: CatalogHistoricalDataDto;

    constructor(data?: IGetCatalogDetailResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.item = _data["item"] ? CatalogItemDto.fromJS(_data["item"]) : <any>undefined;
            this.historicalData = _data["historicalData"] ? CatalogHistoricalDataDto.fromJS(_data["historicalData"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetCatalogDetailResponse {
        data = typeof data === 'object' ? data : {};
        let result = new GetCatalogDetailResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["item"] = this.item ? this.item.toJSON() : <any>undefined;
        data["historicalData"] = this.historicalData ? this.historicalData.toJSON() : <any>undefined;
        return data;
    }
}

export interface IGetCatalogDetailResponse {
    item?: CatalogItemDto;
    historicalData?: CatalogHistoricalDataDto;
}

export class CatalogHistoricalDataDto implements ICatalogHistoricalDataDto {
    salesHistory?: CatalogSalesRecordDto[];
    purchaseHistory?: CatalogPurchaseRecordDto[];
    consumedHistory?: CatalogConsumedRecordDto[];

    constructor(data?: ICatalogHistoricalDataDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["salesHistory"])) {
                this.salesHistory = [] as any;
                for (let item of _data["salesHistory"])
                    this.salesHistory!.push(CatalogSalesRecordDto.fromJS(item));
            }
            if (Array.isArray(_data["purchaseHistory"])) {
                this.purchaseHistory = [] as any;
                for (let item of _data["purchaseHistory"])
                    this.purchaseHistory!.push(CatalogPurchaseRecordDto.fromJS(item));
            }
            if (Array.isArray(_data["consumedHistory"])) {
                this.consumedHistory = [] as any;
                for (let item of _data["consumedHistory"])
                    this.consumedHistory!.push(CatalogConsumedRecordDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CatalogHistoricalDataDto {
        data = typeof data === 'object' ? data : {};
        let result = new CatalogHistoricalDataDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.salesHistory)) {
            data["salesHistory"] = [];
            for (let item of this.salesHistory)
                data["salesHistory"].push(item.toJSON());
        }
        if (Array.isArray(this.purchaseHistory)) {
            data["purchaseHistory"] = [];
            for (let item of this.purchaseHistory)
                data["purchaseHistory"].push(item.toJSON());
        }
        if (Array.isArray(this.consumedHistory)) {
            data["consumedHistory"] = [];
            for (let item of this.consumedHistory)
                data["consumedHistory"].push(item.toJSON());
        }
        return data;
    }
}

export interface ICatalogHistoricalDataDto {
    salesHistory?: CatalogSalesRecordDto[];
    purchaseHistory?: CatalogPurchaseRecordDto[];
    consumedHistory?: CatalogConsumedRecordDto[];
}

export class CatalogSalesRecordDto implements ICatalogSalesRecordDto {
    year?: number;
    month?: number;
    amountTotal?: number;
    amountB2B?: number;
    amountB2C?: number;
    sumTotal?: number;
    sumB2B?: number;
    sumB2C?: number;

    constructor(data?: ICatalogSalesRecordDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.year = _data["year"];
            this.month = _data["month"];
            this.amountTotal = _data["amountTotal"];
            this.amountB2B = _data["amountB2B"];
            this.amountB2C = _data["amountB2C"];
            this.sumTotal = _data["sumTotal"];
            this.sumB2B = _data["sumB2B"];
            this.sumB2C = _data["sumB2C"];
        }
    }

    static fromJS(data: any): CatalogSalesRecordDto {
        data = typeof data === 'object' ? data : {};
        let result = new CatalogSalesRecordDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["year"] = this.year;
        data["month"] = this.month;
        data["amountTotal"] = this.amountTotal;
        data["amountB2B"] = this.amountB2B;
        data["amountB2C"] = this.amountB2C;
        data["sumTotal"] = this.sumTotal;
        data["sumB2B"] = this.sumB2B;
        data["sumB2C"] = this.sumB2C;
        return data;
    }
}

export interface ICatalogSalesRecordDto {
    year?: number;
    month?: number;
    amountTotal?: number;
    amountB2B?: number;
    amountB2C?: number;
    sumTotal?: number;
    sumB2B?: number;
    sumB2C?: number;
}

export class CatalogPurchaseRecordDto implements ICatalogPurchaseRecordDto {
    year?: number;
    month?: number;
    supplierName?: string;
    amount?: number;
    pricePerPiece?: number;
    priceTotal?: number;
    documentNumber?: string;

    constructor(data?: ICatalogPurchaseRecordDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.year = _data["year"];
            this.month = _data["month"];
            this.supplierName = _data["supplierName"];
            this.amount = _data["amount"];
            this.pricePerPiece = _data["pricePerPiece"];
            this.priceTotal = _data["priceTotal"];
            this.documentNumber = _data["documentNumber"];
        }
    }

    static fromJS(data: any): CatalogPurchaseRecordDto {
        data = typeof data === 'object' ? data : {};
        let result = new CatalogPurchaseRecordDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["year"] = this.year;
        data["month"] = this.month;
        data["supplierName"] = this.supplierName;
        data["amount"] = this.amount;
        data["pricePerPiece"] = this.pricePerPiece;
        data["priceTotal"] = this.priceTotal;
        data["documentNumber"] = this.documentNumber;
        return data;
    }
}

export interface ICatalogPurchaseRecordDto {
    year?: number;
    month?: number;
    supplierName?: string;
    amount?: number;
    pricePerPiece?: number;
    priceTotal?: number;
    documentNumber?: string;
}

export class CatalogConsumedRecordDto implements ICatalogConsumedRecordDto {
    year?: number;
    month?: number;
    amount?: number;
    productName?: string;

    constructor(data?: ICatalogConsumedRecordDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.year = _data["year"];
            this.month = _data["month"];
            this.amount = _data["amount"];
            this.productName = _data["productName"];
        }
    }

    static fromJS(data: any): CatalogConsumedRecordDto {
        data = typeof data === 'object' ? data : {};
        let result = new CatalogConsumedRecordDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["year"] = this.year;
        data["month"] = this.month;
        data["amount"] = this.amount;
        data["productName"] = this.productName;
        return data;
    }
}

export interface ICatalogConsumedRecordDto {
    year?: number;
    month?: number;
    amount?: number;
    productName?: string;
}

export class GetMaterialsForPurchaseResponse implements IGetMaterialsForPurchaseResponse {
    materials?: MaterialForPurchaseDto[];

    constructor(data?: IGetMaterialsForPurchaseResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["materials"])) {
                this.materials = [] as any;
                for (let item of _data["materials"])
                    this.materials!.push(MaterialForPurchaseDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetMaterialsForPurchaseResponse {
        data = typeof data === 'object' ? data : {};
        let result = new GetMaterialsForPurchaseResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.materials)) {
            data["materials"] = [];
            for (let item of this.materials)
                data["materials"].push(item.toJSON());
        }
        return data;
    }
}

export interface IGetMaterialsForPurchaseResponse {
    materials?: MaterialForPurchaseDto[];
}

export class MaterialForPurchaseDto implements IMaterialForPurchaseDto {
    productCode?: string;
    productName?: string;
    productType?: string;
    lastPurchasePrice?: number | undefined;
    location?: string | undefined;
    currentStock?: number;
    minimalOrderQuantity?: string | undefined;

    constructor(data?: IMaterialForPurchaseDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.productCode = _data["productCode"];
            this.productName = _data["productName"];
            this.productType = _data["productType"];
            this.lastPurchasePrice = _data["lastPurchasePrice"];
            this.location = _data["location"];
            this.currentStock = _data["currentStock"];
            this.minimalOrderQuantity = _data["minimalOrderQuantity"];
        }
    }

    static fromJS(data: any): MaterialForPurchaseDto {
        data = typeof data === 'object' ? data : {};
        let result = new MaterialForPurchaseDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["productCode"] = this.productCode;
        data["productName"] = this.productName;
        data["productType"] = this.productType;
        data["lastPurchasePrice"] = this.lastPurchasePrice;
        data["location"] = this.location;
        data["currentStock"] = this.currentStock;
        data["minimalOrderQuantity"] = this.minimalOrderQuantity;
        return data;
    }
}

export interface IMaterialForPurchaseDto {
    productCode?: string;
    productName?: string;
    productType?: string;
    lastPurchasePrice?: number | undefined;
    location?: string | undefined;
    currentStock?: number;
    minimalOrderQuantity?: string | undefined;
}

export class GetConfigurationResponse implements IGetConfigurationResponse {
    version?: string;
    environment?: string;
    useMockAuth?: boolean;
    timestamp?: Date;

    constructor(data?: IGetConfigurationResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.version = _data["version"];
            this.environment = _data["environment"];
            this.useMockAuth = _data["useMockAuth"];
            this.timestamp = _data["timestamp"] ? new Date(_data["timestamp"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): GetConfigurationResponse {
        data = typeof data === 'object' ? data : {};
        let result = new GetConfigurationResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["version"] = this.version;
        data["environment"] = this.environment;
        data["useMockAuth"] = this.useMockAuth;
        data["timestamp"] = this.timestamp ? this.timestamp.toISOString() : <any>undefined;
        return data;
    }
}

export interface IGetConfigurationResponse {
    version?: string;
    environment?: string;
    useMockAuth?: boolean;
    timestamp?: Date;
}

export class GetPurchaseOrdersResponse implements IGetPurchaseOrdersResponse {
    orders?: PurchaseOrderSummaryDto[];
    totalCount?: number;
    pageNumber?: number;
    pageSize?: number;
    totalPages?: number;

    constructor(data?: IGetPurchaseOrdersResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["orders"])) {
                this.orders = [] as any;
                for (let item of _data["orders"])
                    this.orders!.push(PurchaseOrderSummaryDto.fromJS(item));
            }
            this.totalCount = _data["totalCount"];
            this.pageNumber = _data["pageNumber"];
            this.pageSize = _data["pageSize"];
            this.totalPages = _data["totalPages"];
        }
    }

    static fromJS(data: any): GetPurchaseOrdersResponse {
        data = typeof data === 'object' ? data : {};
        let result = new GetPurchaseOrdersResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.orders)) {
            data["orders"] = [];
            for (let item of this.orders)
                data["orders"].push(item.toJSON());
        }
        data["totalCount"] = this.totalCount;
        data["pageNumber"] = this.pageNumber;
        data["pageSize"] = this.pageSize;
        data["totalPages"] = this.totalPages;
        return data;
    }
}

export interface IGetPurchaseOrdersResponse {
    orders?: PurchaseOrderSummaryDto[];
    totalCount?: number;
    pageNumber?: number;
    pageSize?: number;
    totalPages?: number;
}

export class PurchaseOrderSummaryDto implements IPurchaseOrderSummaryDto {
    id?: number;
    orderNumber?: string;
    supplierId?: number;
    supplierName?: string;
    orderDate?: Date;
    expectedDeliveryDate?: Date | undefined;
    status?: string;
    totalAmount?: number;
    lineCount?: number;
    createdAt?: Date;
    createdBy?: string;

    constructor(data?: IPurchaseOrderSummaryDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.orderNumber = _data["orderNumber"];
            this.supplierId = _data["supplierId"];
            this.supplierName = _data["supplierName"];
            this.orderDate = _data["orderDate"] ? new Date(_data["orderDate"].toString()) : <any>undefined;
            this.expectedDeliveryDate = _data["expectedDeliveryDate"] ? new Date(_data["expectedDeliveryDate"].toString()) : <any>undefined;
            this.status = _data["status"];
            this.totalAmount = _data["totalAmount"];
            this.lineCount = _data["lineCount"];
            this.createdAt = _data["createdAt"] ? new Date(_data["createdAt"].toString()) : <any>undefined;
            this.createdBy = _data["createdBy"];
        }
    }

    static fromJS(data: any): PurchaseOrderSummaryDto {
        data = typeof data === 'object' ? data : {};
        let result = new PurchaseOrderSummaryDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["orderNumber"] = this.orderNumber;
        data["supplierId"] = this.supplierId;
        data["supplierName"] = this.supplierName;
        data["orderDate"] = this.orderDate ? this.orderDate.toISOString() : <any>undefined;
        data["expectedDeliveryDate"] = this.expectedDeliveryDate ? this.expectedDeliveryDate.toISOString() : <any>undefined;
        data["status"] = this.status;
        data["totalAmount"] = this.totalAmount;
        data["lineCount"] = this.lineCount;
        data["createdAt"] = this.createdAt ? this.createdAt.toISOString() : <any>undefined;
        data["createdBy"] = this.createdBy;
        return data;
    }
}

export interface IPurchaseOrderSummaryDto {
    id?: number;
    orderNumber?: string;
    supplierId?: number;
    supplierName?: string;
    orderDate?: Date;
    expectedDeliveryDate?: Date | undefined;
    status?: string;
    totalAmount?: number;
    lineCount?: number;
    createdAt?: Date;
    createdBy?: string;
}

export class CreatePurchaseOrderResponse implements ICreatePurchaseOrderResponse {
    id?: number;
    orderNumber?: string;
    supplierId?: number;
    supplierName?: string;
    orderDate?: Date;
    expectedDeliveryDate?: Date | undefined;
    status?: string;
    notes?: string | undefined;
    totalAmount?: number;
    lines?: PurchaseOrderLineDto[];
    history?: PurchaseOrderHistoryDto[];
    createdAt?: Date;
    createdBy?: string;
    updatedAt?: Date | undefined;
    updatedBy?: string | undefined;

    constructor(data?: ICreatePurchaseOrderResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.orderNumber = _data["orderNumber"];
            this.supplierId = _data["supplierId"];
            this.supplierName = _data["supplierName"];
            this.orderDate = _data["orderDate"] ? new Date(_data["orderDate"].toString()) : <any>undefined;
            this.expectedDeliveryDate = _data["expectedDeliveryDate"] ? new Date(_data["expectedDeliveryDate"].toString()) : <any>undefined;
            this.status = _data["status"];
            this.notes = _data["notes"];
            this.totalAmount = _data["totalAmount"];
            if (Array.isArray(_data["lines"])) {
                this.lines = [] as any;
                for (let item of _data["lines"])
                    this.lines!.push(PurchaseOrderLineDto.fromJS(item));
            }
            if (Array.isArray(_data["history"])) {
                this.history = [] as any;
                for (let item of _data["history"])
                    this.history!.push(PurchaseOrderHistoryDto.fromJS(item));
            }
            this.createdAt = _data["createdAt"] ? new Date(_data["createdAt"].toString()) : <any>undefined;
            this.createdBy = _data["createdBy"];
            this.updatedAt = _data["updatedAt"] ? new Date(_data["updatedAt"].toString()) : <any>undefined;
            this.updatedBy = _data["updatedBy"];
        }
    }

    static fromJS(data: any): CreatePurchaseOrderResponse {
        data = typeof data === 'object' ? data : {};
        let result = new CreatePurchaseOrderResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["orderNumber"] = this.orderNumber;
        data["supplierId"] = this.supplierId;
        data["supplierName"] = this.supplierName;
        data["orderDate"] = this.orderDate ? this.orderDate.toISOString() : <any>undefined;
        data["expectedDeliveryDate"] = this.expectedDeliveryDate ? this.expectedDeliveryDate.toISOString() : <any>undefined;
        data["status"] = this.status;
        data["notes"] = this.notes;
        data["totalAmount"] = this.totalAmount;
        if (Array.isArray(this.lines)) {
            data["lines"] = [];
            for (let item of this.lines)
                data["lines"].push(item.toJSON());
        }
        if (Array.isArray(this.history)) {
            data["history"] = [];
            for (let item of this.history)
                data["history"].push(item.toJSON());
        }
        data["createdAt"] = this.createdAt ? this.createdAt.toISOString() : <any>undefined;
        data["createdBy"] = this.createdBy;
        data["updatedAt"] = this.updatedAt ? this.updatedAt.toISOString() : <any>undefined;
        data["updatedBy"] = this.updatedBy;
        return data;
    }
}

export interface ICreatePurchaseOrderResponse {
    id?: number;
    orderNumber?: string;
    supplierId?: number;
    supplierName?: string;
    orderDate?: Date;
    expectedDeliveryDate?: Date | undefined;
    status?: string;
    notes?: string | undefined;
    totalAmount?: number;
    lines?: PurchaseOrderLineDto[];
    history?: PurchaseOrderHistoryDto[];
    createdAt?: Date;
    createdBy?: string;
    updatedAt?: Date | undefined;
    updatedBy?: string | undefined;
}

export class PurchaseOrderLineDto implements IPurchaseOrderLineDto {
    id?: number;
    materialId?: string;
    code?: string;
    materialName?: string;
    quantity?: number;
    unitPrice?: number;
    lineTotal?: number;
    notes?: string | undefined;

    constructor(data?: IPurchaseOrderLineDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.materialId = _data["materialId"];
            this.code = _data["code"];
            this.materialName = _data["materialName"];
            this.quantity = _data["quantity"];
            this.unitPrice = _data["unitPrice"];
            this.lineTotal = _data["lineTotal"];
            this.notes = _data["notes"];
        }
    }

    static fromJS(data: any): PurchaseOrderLineDto {
        data = typeof data === 'object' ? data : {};
        let result = new PurchaseOrderLineDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["materialId"] = this.materialId;
        data["code"] = this.code;
        data["materialName"] = this.materialName;
        data["quantity"] = this.quantity;
        data["unitPrice"] = this.unitPrice;
        data["lineTotal"] = this.lineTotal;
        data["notes"] = this.notes;
        return data;
    }
}

export interface IPurchaseOrderLineDto {
    id?: number;
    materialId?: string;
    code?: string;
    materialName?: string;
    quantity?: number;
    unitPrice?: number;
    lineTotal?: number;
    notes?: string | undefined;
}

export class PurchaseOrderHistoryDto implements IPurchaseOrderHistoryDto {
    id?: number;
    action?: string;
    oldValue?: string | undefined;
    newValue?: string | undefined;
    changedAt?: Date;
    changedBy?: string;

    constructor(data?: IPurchaseOrderHistoryDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.action = _data["action"];
            this.oldValue = _data["oldValue"];
            this.newValue = _data["newValue"];
            this.changedAt = _data["changedAt"] ? new Date(_data["changedAt"].toString()) : <any>undefined;
            this.changedBy = _data["changedBy"];
        }
    }

    static fromJS(data: any): PurchaseOrderHistoryDto {
        data = typeof data === 'object' ? data : {};
        let result = new PurchaseOrderHistoryDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["action"] = this.action;
        data["oldValue"] = this.oldValue;
        data["newValue"] = this.newValue;
        data["changedAt"] = this.changedAt ? this.changedAt.toISOString() : <any>undefined;
        data["changedBy"] = this.changedBy;
        return data;
    }
}

export interface IPurchaseOrderHistoryDto {
    id?: number;
    action?: string;
    oldValue?: string | undefined;
    newValue?: string | undefined;
    changedAt?: Date;
    changedBy?: string;
}

export class CreatePurchaseOrderRequest implements ICreatePurchaseOrderRequest {
    supplierName?: string;
    orderDate?: string;
    expectedDeliveryDate?: string | undefined;
    notes?: string | undefined;
    lines?: CreatePurchaseOrderLineRequest[] | undefined;

    constructor(data?: ICreatePurchaseOrderRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.supplierName = _data["supplierName"];
            this.orderDate = _data["orderDate"];
            this.expectedDeliveryDate = _data["expectedDeliveryDate"];
            this.notes = _data["notes"];
            if (Array.isArray(_data["lines"])) {
                this.lines = [] as any;
                for (let item of _data["lines"])
                    this.lines!.push(CreatePurchaseOrderLineRequest.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CreatePurchaseOrderRequest {
        data = typeof data === 'object' ? data : {};
        let result = new CreatePurchaseOrderRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["supplierName"] = this.supplierName;
        data["orderDate"] = this.orderDate;
        data["expectedDeliveryDate"] = this.expectedDeliveryDate;
        data["notes"] = this.notes;
        if (Array.isArray(this.lines)) {
            data["lines"] = [];
            for (let item of this.lines)
                data["lines"].push(item.toJSON());
        }
        return data;
    }
}

export interface ICreatePurchaseOrderRequest {
    supplierName?: string;
    orderDate?: string;
    expectedDeliveryDate?: string | undefined;
    notes?: string | undefined;
    lines?: CreatePurchaseOrderLineRequest[] | undefined;
}

export class CreatePurchaseOrderLineRequest implements ICreatePurchaseOrderLineRequest {
    materialId?: string;
    name?: string | undefined;
    quantity?: number;
    unitPrice?: number;
    notes?: string | undefined;

    constructor(data?: ICreatePurchaseOrderLineRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.materialId = _data["materialId"];
            this.name = _data["name"];
            this.quantity = _data["quantity"];
            this.unitPrice = _data["unitPrice"];
            this.notes = _data["notes"];
        }
    }

    static fromJS(data: any): CreatePurchaseOrderLineRequest {
        data = typeof data === 'object' ? data : {};
        let result = new CreatePurchaseOrderLineRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["materialId"] = this.materialId;
        data["name"] = this.name;
        data["quantity"] = this.quantity;
        data["unitPrice"] = this.unitPrice;
        data["notes"] = this.notes;
        return data;
    }
}

export interface ICreatePurchaseOrderLineRequest {
    materialId?: string;
    name?: string | undefined;
    quantity?: number;
    unitPrice?: number;
    notes?: string | undefined;
}

export class GetPurchaseOrderByIdResponse implements IGetPurchaseOrderByIdResponse {
    id?: number;
    orderNumber?: string;
    supplierId?: number;
    supplierName?: string;
    orderDate?: Date;
    expectedDeliveryDate?: Date | undefined;
    status?: string;
    notes?: string | undefined;
    totalAmount?: number;
    lines?: PurchaseOrderLineDto[];
    history?: PurchaseOrderHistoryDto[];
    createdAt?: Date;
    createdBy?: string;
    updatedAt?: Date | undefined;
    updatedBy?: string | undefined;

    constructor(data?: IGetPurchaseOrderByIdResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.orderNumber = _data["orderNumber"];
            this.supplierId = _data["supplierId"];
            this.supplierName = _data["supplierName"];
            this.orderDate = _data["orderDate"] ? new Date(_data["orderDate"].toString()) : <any>undefined;
            this.expectedDeliveryDate = _data["expectedDeliveryDate"] ? new Date(_data["expectedDeliveryDate"].toString()) : <any>undefined;
            this.status = _data["status"];
            this.notes = _data["notes"];
            this.totalAmount = _data["totalAmount"];
            if (Array.isArray(_data["lines"])) {
                this.lines = [] as any;
                for (let item of _data["lines"])
                    this.lines!.push(PurchaseOrderLineDto.fromJS(item));
            }
            if (Array.isArray(_data["history"])) {
                this.history = [] as any;
                for (let item of _data["history"])
                    this.history!.push(PurchaseOrderHistoryDto.fromJS(item));
            }
            this.createdAt = _data["createdAt"] ? new Date(_data["createdAt"].toString()) : <any>undefined;
            this.createdBy = _data["createdBy"];
            this.updatedAt = _data["updatedAt"] ? new Date(_data["updatedAt"].toString()) : <any>undefined;
            this.updatedBy = _data["updatedBy"];
        }
    }

    static fromJS(data: any): GetPurchaseOrderByIdResponse {
        data = typeof data === 'object' ? data : {};
        let result = new GetPurchaseOrderByIdResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["orderNumber"] = this.orderNumber;
        data["supplierId"] = this.supplierId;
        data["supplierName"] = this.supplierName;
        data["orderDate"] = this.orderDate ? this.orderDate.toISOString() : <any>undefined;
        data["expectedDeliveryDate"] = this.expectedDeliveryDate ? this.expectedDeliveryDate.toISOString() : <any>undefined;
        data["status"] = this.status;
        data["notes"] = this.notes;
        data["totalAmount"] = this.totalAmount;
        if (Array.isArray(this.lines)) {
            data["lines"] = [];
            for (let item of this.lines)
                data["lines"].push(item.toJSON());
        }
        if (Array.isArray(this.history)) {
            data["history"] = [];
            for (let item of this.history)
                data["history"].push(item.toJSON());
        }
        data["createdAt"] = this.createdAt ? this.createdAt.toISOString() : <any>undefined;
        data["createdBy"] = this.createdBy;
        data["updatedAt"] = this.updatedAt ? this.updatedAt.toISOString() : <any>undefined;
        data["updatedBy"] = this.updatedBy;
        return data;
    }
}

export interface IGetPurchaseOrderByIdResponse {
    id?: number;
    orderNumber?: string;
    supplierId?: number;
    supplierName?: string;
    orderDate?: Date;
    expectedDeliveryDate?: Date | undefined;
    status?: string;
    notes?: string | undefined;
    totalAmount?: number;
    lines?: PurchaseOrderLineDto[];
    history?: PurchaseOrderHistoryDto[];
    createdAt?: Date;
    createdBy?: string;
    updatedAt?: Date | undefined;
    updatedBy?: string | undefined;
}

export class UpdatePurchaseOrderResponse implements IUpdatePurchaseOrderResponse {
    id?: number;
    orderNumber?: string;
    supplierId?: number;
    supplierName?: string;
    orderDate?: Date;
    expectedDeliveryDate?: Date | undefined;
    status?: string;
    notes?: string | undefined;
    totalAmount?: number;
    lines?: PurchaseOrderLineDto[];
    updatedAt?: Date | undefined;
    updatedBy?: string | undefined;

    constructor(data?: IUpdatePurchaseOrderResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.orderNumber = _data["orderNumber"];
            this.supplierId = _data["supplierId"];
            this.supplierName = _data["supplierName"];
            this.orderDate = _data["orderDate"] ? new Date(_data["orderDate"].toString()) : <any>undefined;
            this.expectedDeliveryDate = _data["expectedDeliveryDate"] ? new Date(_data["expectedDeliveryDate"].toString()) : <any>undefined;
            this.status = _data["status"];
            this.notes = _data["notes"];
            this.totalAmount = _data["totalAmount"];
            if (Array.isArray(_data["lines"])) {
                this.lines = [] as any;
                for (let item of _data["lines"])
                    this.lines!.push(PurchaseOrderLineDto.fromJS(item));
            }
            this.updatedAt = _data["updatedAt"] ? new Date(_data["updatedAt"].toString()) : <any>undefined;
            this.updatedBy = _data["updatedBy"];
        }
    }

    static fromJS(data: any): UpdatePurchaseOrderResponse {
        data = typeof data === 'object' ? data : {};
        let result = new UpdatePurchaseOrderResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["orderNumber"] = this.orderNumber;
        data["supplierId"] = this.supplierId;
        data["supplierName"] = this.supplierName;
        data["orderDate"] = this.orderDate ? this.orderDate.toISOString() : <any>undefined;
        data["expectedDeliveryDate"] = this.expectedDeliveryDate ? this.expectedDeliveryDate.toISOString() : <any>undefined;
        data["status"] = this.status;
        data["notes"] = this.notes;
        data["totalAmount"] = this.totalAmount;
        if (Array.isArray(this.lines)) {
            data["lines"] = [];
            for (let item of this.lines)
                data["lines"].push(item.toJSON());
        }
        data["updatedAt"] = this.updatedAt ? this.updatedAt.toISOString() : <any>undefined;
        data["updatedBy"] = this.updatedBy;
        return data;
    }
}

export interface IUpdatePurchaseOrderResponse {
    id?: number;
    orderNumber?: string;
    supplierId?: number;
    supplierName?: string;
    orderDate?: Date;
    expectedDeliveryDate?: Date | undefined;
    status?: string;
    notes?: string | undefined;
    totalAmount?: number;
    lines?: PurchaseOrderLineDto[];
    updatedAt?: Date | undefined;
    updatedBy?: string | undefined;
}

export class UpdatePurchaseOrderRequest implements IUpdatePurchaseOrderRequest {
    id?: number;
    supplierName?: string;
    expectedDeliveryDate?: Date | undefined;
    notes?: string | undefined;
    lines?: UpdatePurchaseOrderLineRequest[];

    constructor(data?: IUpdatePurchaseOrderRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.supplierName = _data["supplierName"];
            this.expectedDeliveryDate = _data["expectedDeliveryDate"] ? new Date(_data["expectedDeliveryDate"].toString()) : <any>undefined;
            this.notes = _data["notes"];
            if (Array.isArray(_data["lines"])) {
                this.lines = [] as any;
                for (let item of _data["lines"])
                    this.lines!.push(UpdatePurchaseOrderLineRequest.fromJS(item));
            }
        }
    }

    static fromJS(data: any): UpdatePurchaseOrderRequest {
        data = typeof data === 'object' ? data : {};
        let result = new UpdatePurchaseOrderRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["supplierName"] = this.supplierName;
        data["expectedDeliveryDate"] = this.expectedDeliveryDate ? this.expectedDeliveryDate.toISOString() : <any>undefined;
        data["notes"] = this.notes;
        if (Array.isArray(this.lines)) {
            data["lines"] = [];
            for (let item of this.lines)
                data["lines"].push(item.toJSON());
        }
        return data;
    }
}

export interface IUpdatePurchaseOrderRequest {
    id?: number;
    supplierName?: string;
    expectedDeliveryDate?: Date | undefined;
    notes?: string | undefined;
    lines?: UpdatePurchaseOrderLineRequest[];
}

export class UpdatePurchaseOrderLineRequest implements IUpdatePurchaseOrderLineRequest {
    id?: number | undefined;
    materialId?: string;
    name?: string | undefined;
    quantity?: number;
    unitPrice?: number;
    notes?: string | undefined;

    constructor(data?: IUpdatePurchaseOrderLineRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.materialId = _data["materialId"];
            this.name = _data["name"];
            this.quantity = _data["quantity"];
            this.unitPrice = _data["unitPrice"];
            this.notes = _data["notes"];
        }
    }

    static fromJS(data: any): UpdatePurchaseOrderLineRequest {
        data = typeof data === 'object' ? data : {};
        let result = new UpdatePurchaseOrderLineRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["materialId"] = this.materialId;
        data["name"] = this.name;
        data["quantity"] = this.quantity;
        data["unitPrice"] = this.unitPrice;
        data["notes"] = this.notes;
        return data;
    }
}

export interface IUpdatePurchaseOrderLineRequest {
    id?: number | undefined;
    materialId?: string;
    name?: string | undefined;
    quantity?: number;
    unitPrice?: number;
    notes?: string | undefined;
}

export class UpdatePurchaseOrderStatusResponse implements IUpdatePurchaseOrderStatusResponse {
    id?: number;
    orderNumber?: string;
    status?: string;
    updatedAt?: Date | undefined;
    updatedBy?: string | undefined;

    constructor(data?: IUpdatePurchaseOrderStatusResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.orderNumber = _data["orderNumber"];
            this.status = _data["status"];
            this.updatedAt = _data["updatedAt"] ? new Date(_data["updatedAt"].toString()) : <any>undefined;
            this.updatedBy = _data["updatedBy"];
        }
    }

    static fromJS(data: any): UpdatePurchaseOrderStatusResponse {
        data = typeof data === 'object' ? data : {};
        let result = new UpdatePurchaseOrderStatusResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["orderNumber"] = this.orderNumber;
        data["status"] = this.status;
        data["updatedAt"] = this.updatedAt ? this.updatedAt.toISOString() : <any>undefined;
        data["updatedBy"] = this.updatedBy;
        return data;
    }
}

export interface IUpdatePurchaseOrderStatusResponse {
    id?: number;
    orderNumber?: string;
    status?: string;
    updatedAt?: Date | undefined;
    updatedBy?: string | undefined;
}

export class UpdatePurchaseOrderStatusRequest implements IUpdatePurchaseOrderStatusRequest {
    id?: number;
    status?: string;

    constructor(data?: IUpdatePurchaseOrderStatusRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.status = _data["status"];
        }
    }

    static fromJS(data: any): UpdatePurchaseOrderStatusRequest {
        data = typeof data === 'object' ? data : {};
        let result = new UpdatePurchaseOrderStatusRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["status"] = this.status;
        return data;
    }
}

export interface IUpdatePurchaseOrderStatusRequest {
    id?: number;
    status?: string;
}

export interface FileResponse {
    data: Blob;
    status: number;
    fileName?: string;
    headers?: { [name: string]: any };
}

export class SwaggerException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isSwaggerException = true;

    static isSwaggerException(obj: any): obj is SwaggerException {
        return obj.isSwaggerException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new SwaggerException(message, status, response, headers, null);
}