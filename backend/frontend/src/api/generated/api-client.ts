//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

export class ApiClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl ?? "";
    }

    getCatalogList(type: ProductType | null | undefined, pageNumber: number | undefined, pageSize: number | undefined, sortBy: string | null | undefined, sortDescending: boolean | undefined): Promise<GetCatalogListResponse> {
        let url_ = this.baseUrl + "/api/Catalog?";
        if (type !== undefined && type !== null)
            url_ += "Type=" + encodeURIComponent("" + type) + "&";
        if (pageNumber === null)
            throw new Error("The parameter 'pageNumber' cannot be null.");
        else if (pageNumber !== undefined)
            url_ += "PageNumber=" + encodeURIComponent("" + pageNumber) + "&";
        if (pageSize === null)
            throw new Error("The parameter 'pageSize' cannot be null.");
        else if (pageSize !== undefined)
            url_ += "PageSize=" + encodeURIComponent("" + pageSize) + "&";
        if (sortBy !== undefined && sortBy !== null)
            url_ += "SortBy=" + encodeURIComponent("" + sortBy) + "&";
        if (sortDescending === null)
            throw new Error("The parameter 'sortDescending' cannot be null.");
        else if (sortDescending !== undefined)
            url_ += "SortDescending=" + encodeURIComponent("" + sortDescending) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetCatalogList(_response);
        });
    }

    protected processGetCatalogList(response: Response): Promise<GetCatalogListResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GetCatalogListResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<GetCatalogListResponse>(null as any);
    }
}

export class ApiClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl ?? "";
    }

    getConfiguration(): Promise<GetConfigurationResponse> {
        let url_ = this.baseUrl + "/api/Configuration";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetConfiguration(_response);
        });
    }

    protected processGetConfiguration(response: Response): Promise<GetConfigurationResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GetConfigurationResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<GetConfigurationResponse>(null as any);
    }
}

export class ApiClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl ?? "";
    }

    getWeatherForecast(): Promise<GetWeatherForecastResponse[]> {
        let url_ = this.baseUrl + "/api/Weather/forecast";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetWeatherForecast(_response);
        });
    }

    protected processGetWeatherForecast(response: Response): Promise<GetWeatherForecastResponse[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(GetWeatherForecastResponse.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<GetWeatherForecastResponse[]>(null as any);
    }
}

export class GetCatalogListResponse implements IGetCatalogListResponse {
    items?: CatalogItemDto[];
    totalCount?: number;
    pageNumber?: number;
    pageSize?: number;
    totalPages?: number;

    constructor(data?: IGetCatalogListResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(CatalogItemDto.fromJS(item));
            }
            this.totalCount = _data["totalCount"];
            this.pageNumber = _data["pageNumber"];
            this.pageSize = _data["pageSize"];
            this.totalPages = _data["totalPages"];
        }
    }

    static fromJS(data: any): GetCatalogListResponse {
        data = typeof data === 'object' ? data : {};
        let result = new GetCatalogListResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["totalCount"] = this.totalCount;
        data["pageNumber"] = this.pageNumber;
        data["pageSize"] = this.pageSize;
        data["totalPages"] = this.totalPages;
        return data;
    }
}

export interface IGetCatalogListResponse {
    items?: CatalogItemDto[];
    totalCount?: number;
    pageNumber?: number;
    pageSize?: number;
    totalPages?: number;
}

export class CatalogItemDto implements ICatalogItemDto {
    productCode?: string;
    productName?: string;
    type?: ProductType;
    stock?: StockDto;
    properties?: PropertiesDto;
    location?: string;
    minimalOrderQuantity?: string;
    minimalManufactureQuantity?: number;

    constructor(data?: ICatalogItemDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.productCode = _data["productCode"];
            this.productName = _data["productName"];
            this.type = _data["type"];
            this.stock = _data["stock"] ? StockDto.fromJS(_data["stock"]) : <any>undefined;
            this.properties = _data["properties"] ? PropertiesDto.fromJS(_data["properties"]) : <any>undefined;
            this.location = _data["location"];
            this.minimalOrderQuantity = _data["minimalOrderQuantity"];
            this.minimalManufactureQuantity = _data["minimalManufactureQuantity"];
        }
    }

    static fromJS(data: any): CatalogItemDto {
        data = typeof data === 'object' ? data : {};
        let result = new CatalogItemDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["productCode"] = this.productCode;
        data["productName"] = this.productName;
        data["type"] = this.type;
        data["stock"] = this.stock ? this.stock.toJSON() : <any>undefined;
        data["properties"] = this.properties ? this.properties.toJSON() : <any>undefined;
        data["location"] = this.location;
        data["minimalOrderQuantity"] = this.minimalOrderQuantity;
        data["minimalManufactureQuantity"] = this.minimalManufactureQuantity;
        return data;
    }
}

export interface ICatalogItemDto {
    productCode?: string;
    productName?: string;
    type?: ProductType;
    stock?: StockDto;
    properties?: PropertiesDto;
    location?: string;
    minimalOrderQuantity?: string;
    minimalManufactureQuantity?: number;
}

export enum ProductType {
    UNDEFINED = 0,
    Goods = 1,
    Material = 3,
    SemiProduct = 7,
    Product = 8,
}

export class StockDto implements IStockDto {
    eshop?: number;
    erp?: number;
    transport?: number;
    reserve?: number;
    available?: number;

    constructor(data?: IStockDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.eshop = _data["eshop"];
            this.erp = _data["erp"];
            this.transport = _data["transport"];
            this.reserve = _data["reserve"];
            this.available = _data["available"];
        }
    }

    static fromJS(data: any): StockDto {
        data = typeof data === 'object' ? data : {};
        let result = new StockDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["eshop"] = this.eshop;
        data["erp"] = this.erp;
        data["transport"] = this.transport;
        data["reserve"] = this.reserve;
        data["available"] = this.available;
        return data;
    }
}

export interface IStockDto {
    eshop?: number;
    erp?: number;
    transport?: number;
    reserve?: number;
    available?: number;
}

export class PropertiesDto implements IPropertiesDto {
    optimalStockDaysSetup?: number;
    stockMinSetup?: number;
    batchSize?: number;
    seasonMonths?: number[];

    constructor(data?: IPropertiesDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.optimalStockDaysSetup = _data["optimalStockDaysSetup"];
            this.stockMinSetup = _data["stockMinSetup"];
            this.batchSize = _data["batchSize"];
            if (Array.isArray(_data["seasonMonths"])) {
                this.seasonMonths = [] as any;
                for (let item of _data["seasonMonths"])
                    this.seasonMonths!.push(item);
            }
        }
    }

    static fromJS(data: any): PropertiesDto {
        data = typeof data === 'object' ? data : {};
        let result = new PropertiesDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["optimalStockDaysSetup"] = this.optimalStockDaysSetup;
        data["stockMinSetup"] = this.stockMinSetup;
        data["batchSize"] = this.batchSize;
        if (Array.isArray(this.seasonMonths)) {
            data["seasonMonths"] = [];
            for (let item of this.seasonMonths)
                data["seasonMonths"].push(item);
        }
        return data;
    }
}

export interface IPropertiesDto {
    optimalStockDaysSetup?: number;
    stockMinSetup?: number;
    batchSize?: number;
    seasonMonths?: number[];
}

export class GetConfigurationResponse implements IGetConfigurationResponse {
    version?: string;
    environment?: string;
    useMockAuth?: boolean;
    timestamp?: Date;

    constructor(data?: IGetConfigurationResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.version = _data["version"];
            this.environment = _data["environment"];
            this.useMockAuth = _data["useMockAuth"];
            this.timestamp = _data["timestamp"] ? new Date(_data["timestamp"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): GetConfigurationResponse {
        data = typeof data === 'object' ? data : {};
        let result = new GetConfigurationResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["version"] = this.version;
        data["environment"] = this.environment;
        data["useMockAuth"] = this.useMockAuth;
        data["timestamp"] = this.timestamp ? this.timestamp.toISOString() : <any>undefined;
        return data;
    }
}

export interface IGetConfigurationResponse {
    version?: string;
    environment?: string;
    useMockAuth?: boolean;
    timestamp?: Date;
}

export class GetWeatherForecastResponse implements IGetWeatherForecastResponse {
    date?: Date;
    temperatureC?: number;
    temperatureF?: number;
    summary?: string | undefined;

    constructor(data?: IGetWeatherForecastResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.date = _data["date"] ? new Date(_data["date"].toString()) : <any>undefined;
            this.temperatureC = _data["temperatureC"];
            this.temperatureF = _data["temperatureF"];
            this.summary = _data["summary"];
        }
    }

    static fromJS(data: any): GetWeatherForecastResponse {
        data = typeof data === 'object' ? data : {};
        let result = new GetWeatherForecastResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["date"] = this.date ? this.date.toISOString() : <any>undefined;
        data["temperatureC"] = this.temperatureC;
        data["temperatureF"] = this.temperatureF;
        data["summary"] = this.summary;
        return data;
    }
}

export interface IGetWeatherForecastResponse {
    date?: Date;
    temperatureC?: number;
    temperatureF?: number;
    summary?: string | undefined;
}

export class SwaggerException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isSwaggerException = true;

    static isSwaggerException(obj: any): obj is SwaggerException {
        return obj.isSwaggerException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new SwaggerException(message, status, response, headers, null);
}