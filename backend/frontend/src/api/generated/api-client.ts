//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

export class ApiClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl ?? "";
    }

    getDataLoadAuditLogs(limit: number | null | undefined, fromDate: Date | null | undefined, toDate: Date | null | undefined): Promise<FileResponse> {
        let url_ = this.baseUrl + "/api/Audit/data-loads?";
        if (limit !== undefined && limit !== null)
            url_ += "limit=" + encodeURIComponent("" + limit) + "&";
        if (fromDate !== undefined && fromDate !== null)
            url_ += "fromDate=" + encodeURIComponent(fromDate ? "" + fromDate.toISOString() : "") + "&";
        if (toDate !== undefined && toDate !== null)
            url_ += "toDate=" + encodeURIComponent(toDate ? "" + toDate.toISOString() : "") + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/octet-stream"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetDataLoadAuditLogs(_response);
        });
    }

    protected processGetDataLoadAuditLogs(response: Response): Promise<FileResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            let fileNameMatch = contentDisposition ? /filename\*=(?:(\\?['"])(.*?)\1|(?:[^\s]+'.*?')?([^;\n]*))/g.exec(contentDisposition) : undefined;
            let fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[3] || fileNameMatch[2] : undefined;
            if (fileName) {
                fileName = decodeURIComponent(fileName);
            } else {
                fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
                fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            }
            return response.blob().then(blob => { return { fileName: fileName, data: blob, status: status, headers: _headers }; });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<FileResponse>(null as any);
    }

    getAuditSummary(fromDate: Date | null | undefined, toDate: Date | null | undefined): Promise<FileResponse> {
        let url_ = this.baseUrl + "/api/Audit/summary?";
        if (fromDate !== undefined && fromDate !== null)
            url_ += "fromDate=" + encodeURIComponent(fromDate ? "" + fromDate.toISOString() : "") + "&";
        if (toDate !== undefined && toDate !== null)
            url_ += "toDate=" + encodeURIComponent(toDate ? "" + toDate.toISOString() : "") + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/octet-stream"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetAuditSummary(_response);
        });
    }

    protected processGetAuditSummary(response: Response): Promise<FileResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            let fileNameMatch = contentDisposition ? /filename\*=(?:(\\?['"])(.*?)\1|(?:[^\s]+'.*?')?([^;\n]*))/g.exec(contentDisposition) : undefined;
            let fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[3] || fileNameMatch[2] : undefined;
            if (fileName) {
                fileName = decodeURIComponent(fileName);
            } else {
                fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
                fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            }
            return response.blob().then(blob => { return { fileName: fileName, data: blob, status: status, headers: _headers }; });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<FileResponse>(null as any);
    }
}

export class ApiClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl ?? "";
    }

    getCatalogList(type: ProductType | null | undefined, pageNumber: number | undefined, pageSize: number | undefined, sortBy: string | null | undefined, sortDescending: boolean | undefined, productName: string | null | undefined, productCode: string | null | undefined): Promise<GetCatalogListResponse> {
        let url_ = this.baseUrl + "/api/Catalog?";
        if (type !== undefined && type !== null)
            url_ += "Type=" + encodeURIComponent("" + type) + "&";
        if (pageNumber === null)
            throw new Error("The parameter 'pageNumber' cannot be null.");
        else if (pageNumber !== undefined)
            url_ += "PageNumber=" + encodeURIComponent("" + pageNumber) + "&";
        if (pageSize === null)
            throw new Error("The parameter 'pageSize' cannot be null.");
        else if (pageSize !== undefined)
            url_ += "PageSize=" + encodeURIComponent("" + pageSize) + "&";
        if (sortBy !== undefined && sortBy !== null)
            url_ += "SortBy=" + encodeURIComponent("" + sortBy) + "&";
        if (sortDescending === null)
            throw new Error("The parameter 'sortDescending' cannot be null.");
        else if (sortDescending !== undefined)
            url_ += "SortDescending=" + encodeURIComponent("" + sortDescending) + "&";
        if (productName !== undefined && productName !== null)
            url_ += "ProductName=" + encodeURIComponent("" + productName) + "&";
        if (productCode !== undefined && productCode !== null)
            url_ += "ProductCode=" + encodeURIComponent("" + productCode) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetCatalogList(_response);
        });
    }

    protected processGetCatalogList(response: Response): Promise<GetCatalogListResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GetCatalogListResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<GetCatalogListResponse>(null as any);
    }

    getCatalogDetail(productCode: string): Promise<GetCatalogDetailResponse> {
        let url_ = this.baseUrl + "/api/Catalog/{productCode}";
        if (productCode === undefined || productCode === null)
            throw new Error("The parameter 'productCode' must be defined.");
        url_ = url_.replace("{productCode}", encodeURIComponent("" + productCode));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetCatalogDetail(_response);
        });
    }

    protected processGetCatalogDetail(response: Response): Promise<GetCatalogDetailResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GetCatalogDetailResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<GetCatalogDetailResponse>(null as any);
    }

    refreshTransportData(): Promise<FileResponse> {
        let url_ = this.baseUrl + "/api/Catalog/refresh/transport";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "POST",
            headers: {
                "Accept": "application/octet-stream"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processRefreshTransportData(_response);
        });
    }

    protected processRefreshTransportData(response: Response): Promise<FileResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            let fileNameMatch = contentDisposition ? /filename\*=(?:(\\?['"])(.*?)\1|(?:[^\s]+'.*?')?([^;\n]*))/g.exec(contentDisposition) : undefined;
            let fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[3] || fileNameMatch[2] : undefined;
            if (fileName) {
                fileName = decodeURIComponent(fileName);
            } else {
                fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
                fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            }
            return response.blob().then(blob => { return { fileName: fileName, data: blob, status: status, headers: _headers }; });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<FileResponse>(null as any);
    }

    refreshReserveData(): Promise<FileResponse> {
        let url_ = this.baseUrl + "/api/Catalog/refresh/reserve";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "POST",
            headers: {
                "Accept": "application/octet-stream"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processRefreshReserveData(_response);
        });
    }

    protected processRefreshReserveData(response: Response): Promise<FileResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            let fileNameMatch = contentDisposition ? /filename\*=(?:(\\?['"])(.*?)\1|(?:[^\s]+'.*?')?([^;\n]*))/g.exec(contentDisposition) : undefined;
            let fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[3] || fileNameMatch[2] : undefined;
            if (fileName) {
                fileName = decodeURIComponent(fileName);
            } else {
                fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
                fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            }
            return response.blob().then(blob => { return { fileName: fileName, data: blob, status: status, headers: _headers }; });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<FileResponse>(null as any);
    }

    refreshSalesData(): Promise<FileResponse> {
        let url_ = this.baseUrl + "/api/Catalog/refresh/sales";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "POST",
            headers: {
                "Accept": "application/octet-stream"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processRefreshSalesData(_response);
        });
    }

    protected processRefreshSalesData(response: Response): Promise<FileResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            let fileNameMatch = contentDisposition ? /filename\*=(?:(\\?['"])(.*?)\1|(?:[^\s]+'.*?')?([^;\n]*))/g.exec(contentDisposition) : undefined;
            let fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[3] || fileNameMatch[2] : undefined;
            if (fileName) {
                fileName = decodeURIComponent(fileName);
            } else {
                fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
                fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            }
            return response.blob().then(blob => { return { fileName: fileName, data: blob, status: status, headers: _headers }; });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<FileResponse>(null as any);
    }

    refreshAttributesData(): Promise<FileResponse> {
        let url_ = this.baseUrl + "/api/Catalog/refresh/attributes";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "POST",
            headers: {
                "Accept": "application/octet-stream"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processRefreshAttributesData(_response);
        });
    }

    protected processRefreshAttributesData(response: Response): Promise<FileResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            let fileNameMatch = contentDisposition ? /filename\*=(?:(\\?['"])(.*?)\1|(?:[^\s]+'.*?')?([^;\n]*))/g.exec(contentDisposition) : undefined;
            let fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[3] || fileNameMatch[2] : undefined;
            if (fileName) {
                fileName = decodeURIComponent(fileName);
            } else {
                fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
                fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            }
            return response.blob().then(blob => { return { fileName: fileName, data: blob, status: status, headers: _headers }; });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<FileResponse>(null as any);
    }

    refreshErpStockData(): Promise<FileResponse> {
        let url_ = this.baseUrl + "/api/Catalog/refresh/erp-stock";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "POST",
            headers: {
                "Accept": "application/octet-stream"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processRefreshErpStockData(_response);
        });
    }

    protected processRefreshErpStockData(response: Response): Promise<FileResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            let fileNameMatch = contentDisposition ? /filename\*=(?:(\\?['"])(.*?)\1|(?:[^\s]+'.*?')?([^;\n]*))/g.exec(contentDisposition) : undefined;
            let fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[3] || fileNameMatch[2] : undefined;
            if (fileName) {
                fileName = decodeURIComponent(fileName);
            } else {
                fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
                fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            }
            return response.blob().then(blob => { return { fileName: fileName, data: blob, status: status, headers: _headers }; });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<FileResponse>(null as any);
    }

    refreshEshopStockData(): Promise<FileResponse> {
        let url_ = this.baseUrl + "/api/Catalog/refresh/eshop-stock";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "POST",
            headers: {
                "Accept": "application/octet-stream"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processRefreshEshopStockData(_response);
        });
    }

    protected processRefreshEshopStockData(response: Response): Promise<FileResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            let fileNameMatch = contentDisposition ? /filename\*=(?:(\\?['"])(.*?)\1|(?:[^\s]+'.*?')?([^;\n]*))/g.exec(contentDisposition) : undefined;
            let fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[3] || fileNameMatch[2] : undefined;
            if (fileName) {
                fileName = decodeURIComponent(fileName);
            } else {
                fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
                fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            }
            return response.blob().then(blob => { return { fileName: fileName, data: blob, status: status, headers: _headers }; });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<FileResponse>(null as any);
    }

    refreshPurchaseHistoryData(): Promise<FileResponse> {
        let url_ = this.baseUrl + "/api/Catalog/refresh/purchase-history";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "POST",
            headers: {
                "Accept": "application/octet-stream"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processRefreshPurchaseHistoryData(_response);
        });
    }

    protected processRefreshPurchaseHistoryData(response: Response): Promise<FileResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            let fileNameMatch = contentDisposition ? /filename\*=(?:(\\?['"])(.*?)\1|(?:[^\s]+'.*?')?([^;\n]*))/g.exec(contentDisposition) : undefined;
            let fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[3] || fileNameMatch[2] : undefined;
            if (fileName) {
                fileName = decodeURIComponent(fileName);
            } else {
                fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
                fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            }
            return response.blob().then(blob => { return { fileName: fileName, data: blob, status: status, headers: _headers }; });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<FileResponse>(null as any);
    }

    refreshConsumedHistoryData(): Promise<FileResponse> {
        let url_ = this.baseUrl + "/api/Catalog/refresh/consumed-history";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "POST",
            headers: {
                "Accept": "application/octet-stream"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processRefreshConsumedHistoryData(_response);
        });
    }

    protected processRefreshConsumedHistoryData(response: Response): Promise<FileResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            let fileNameMatch = contentDisposition ? /filename\*=(?:(\\?['"])(.*?)\1|(?:[^\s]+'.*?')?([^;\n]*))/g.exec(contentDisposition) : undefined;
            let fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[3] || fileNameMatch[2] : undefined;
            if (fileName) {
                fileName = decodeURIComponent(fileName);
            } else {
                fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
                fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            }
            return response.blob().then(blob => { return { fileName: fileName, data: blob, status: status, headers: _headers }; });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<FileResponse>(null as any);
    }

    refreshStockTakingData(): Promise<FileResponse> {
        let url_ = this.baseUrl + "/api/Catalog/refresh/stock-taking";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "POST",
            headers: {
                "Accept": "application/octet-stream"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processRefreshStockTakingData(_response);
        });
    }

    protected processRefreshStockTakingData(response: Response): Promise<FileResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            let fileNameMatch = contentDisposition ? /filename\*=(?:(\\?['"])(.*?)\1|(?:[^\s]+'.*?')?([^;\n]*))/g.exec(contentDisposition) : undefined;
            let fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[3] || fileNameMatch[2] : undefined;
            if (fileName) {
                fileName = decodeURIComponent(fileName);
            } else {
                fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
                fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            }
            return response.blob().then(blob => { return { fileName: fileName, data: blob, status: status, headers: _headers }; });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<FileResponse>(null as any);
    }

    refreshLotsData(): Promise<FileResponse> {
        let url_ = this.baseUrl + "/api/Catalog/refresh/lots";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "POST",
            headers: {
                "Accept": "application/octet-stream"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processRefreshLotsData(_response);
        });
    }

    protected processRefreshLotsData(response: Response): Promise<FileResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            let fileNameMatch = contentDisposition ? /filename\*=(?:(\\?['"])(.*?)\1|(?:[^\s]+'.*?')?([^;\n]*))/g.exec(contentDisposition) : undefined;
            let fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[3] || fileNameMatch[2] : undefined;
            if (fileName) {
                fileName = decodeURIComponent(fileName);
            } else {
                fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
                fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            }
            return response.blob().then(blob => { return { fileName: fileName, data: blob, status: status, headers: _headers }; });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<FileResponse>(null as any);
    }

    getCatalogDebugPrices(): Promise<GetCatalogDebugPricesResponse> {
        let url_ = this.baseUrl + "/api/Catalog/debug-prices";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetCatalogDebugPrices(_response);
        });
    }

    protected processGetCatalogDebugPrices(response: Response): Promise<GetCatalogDebugPricesResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GetCatalogDebugPricesResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<GetCatalogDebugPricesResponse>(null as any);
    }
}

export class ApiClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl ?? "";
    }

    getConfiguration(): Promise<GetConfigurationResponse> {
        let url_ = this.baseUrl + "/api/Configuration";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetConfiguration(_response);
        });
    }

    protected processGetConfiguration(response: Response): Promise<GetConfigurationResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GetConfigurationResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<GetConfigurationResponse>(null as any);
    }
}

export class ApiClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl ?? "";
    }

    testLogging(): Promise<FileResponse> {
        let url_ = this.baseUrl + "/api/Diagnostics/test-logging";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/octet-stream"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processTestLogging(_response);
        });
    }

    protected processTestLogging(response: Response): Promise<FileResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            let fileNameMatch = contentDisposition ? /filename\*=(?:(\\?['"])(.*?)\1|(?:[^\s]+'.*?')?([^;\n]*))/g.exec(contentDisposition) : undefined;
            let fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[3] || fileNameMatch[2] : undefined;
            if (fileName) {
                fileName = decodeURIComponent(fileName);
            } else {
                fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
                fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            }
            return response.blob().then(blob => { return { fileName: fileName, data: blob, status: status, headers: _headers }; });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<FileResponse>(null as any);
    }

    testException(): Promise<FileResponse> {
        let url_ = this.baseUrl + "/api/Diagnostics/test-exception";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/octet-stream"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processTestException(_response);
        });
    }

    protected processTestException(response: Response): Promise<FileResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            let fileNameMatch = contentDisposition ? /filename\*=(?:(\\?['"])(.*?)\1|(?:[^\s]+'.*?')?([^;\n]*))/g.exec(contentDisposition) : undefined;
            let fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[3] || fileNameMatch[2] : undefined;
            if (fileName) {
                fileName = decodeURIComponent(fileName);
            } else {
                fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
                fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            }
            return response.blob().then(blob => { return { fileName: fileName, data: blob, status: status, headers: _headers }; });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<FileResponse>(null as any);
    }

    health(): Promise<FileResponse> {
        let url_ = this.baseUrl + "/api/Diagnostics/health";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/octet-stream"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processHealth(_response);
        });
    }

    protected processHealth(response: Response): Promise<FileResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            let fileNameMatch = contentDisposition ? /filename\*=(?:(\\?['"])(.*?)\1|(?:[^\s]+'.*?')?([^;\n]*))/g.exec(contentDisposition) : undefined;
            let fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[3] || fileNameMatch[2] : undefined;
            if (fileName) {
                fileName = decodeURIComponent(fileName);
            } else {
                fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
                fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            }
            return response.blob().then(blob => { return { fileName: fileName, data: blob, status: status, headers: _headers }; });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<FileResponse>(null as any);
    }

    getApplicationInsightsConfig(): Promise<FileResponse> {
        let url_ = this.baseUrl + "/api/Diagnostics/appinsights-config";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/octet-stream"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetApplicationInsightsConfig(_response);
        });
    }

    protected processGetApplicationInsightsConfig(response: Response): Promise<FileResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            let fileNameMatch = contentDisposition ? /filename\*=(?:(\\?['"])(.*?)\1|(?:[^\s]+'.*?')?([^;\n]*))/g.exec(contentDisposition) : undefined;
            let fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[3] || fileNameMatch[2] : undefined;
            if (fileName) {
                fileName = decodeURIComponent(fileName);
            } else {
                fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
                fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            }
            return response.blob().then(blob => { return { fileName: fileName, data: blob, status: status, headers: _headers }; });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<FileResponse>(null as any);
    }
}

export class ApiClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl ?? "";
    }

    getWeatherForecast(): Promise<GetWeatherForecastResponse[]> {
        let url_ = this.baseUrl + "/api/Weather/forecast";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetWeatherForecast(_response);
        });
    }

    protected processGetWeatherForecast(response: Response): Promise<GetWeatherForecastResponse[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(GetWeatherForecastResponse.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<GetWeatherForecastResponse[]>(null as any);
    }
}

export class GetCatalogListResponse implements IGetCatalogListResponse {
    items?: CatalogItemDto[];
    totalCount?: number;
    pageNumber?: number;
    pageSize?: number;
    totalPages?: number;

    constructor(data?: IGetCatalogListResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(CatalogItemDto.fromJS(item));
            }
            this.totalCount = _data["totalCount"];
            this.pageNumber = _data["pageNumber"];
            this.pageSize = _data["pageSize"];
            this.totalPages = _data["totalPages"];
        }
    }

    static fromJS(data: any): GetCatalogListResponse {
        data = typeof data === 'object' ? data : {};
        let result = new GetCatalogListResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["totalCount"] = this.totalCount;
        data["pageNumber"] = this.pageNumber;
        data["pageSize"] = this.pageSize;
        data["totalPages"] = this.totalPages;
        return data;
    }
}

export interface IGetCatalogListResponse {
    items?: CatalogItemDto[];
    totalCount?: number;
    pageNumber?: number;
    pageSize?: number;
    totalPages?: number;
}

export class CatalogItemDto implements ICatalogItemDto {
    productCode?: string;
    productName?: string;
    type?: ProductType;
    stock?: StockDto;
    price?: PriceDto;
    properties?: PropertiesDto;
    location?: string;
    minimalOrderQuantity?: string;
    minimalManufactureQuantity?: number;

    constructor(data?: ICatalogItemDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.productCode = _data["productCode"];
            this.productName = _data["productName"];
            this.type = _data["type"];
            this.stock = _data["stock"] ? StockDto.fromJS(_data["stock"]) : <any>undefined;
            this.price = _data["price"] ? PriceDto.fromJS(_data["price"]) : <any>undefined;
            this.properties = _data["properties"] ? PropertiesDto.fromJS(_data["properties"]) : <any>undefined;
            this.location = _data["location"];
            this.minimalOrderQuantity = _data["minimalOrderQuantity"];
            this.minimalManufactureQuantity = _data["minimalManufactureQuantity"];
        }
    }

    static fromJS(data: any): CatalogItemDto {
        data = typeof data === 'object' ? data : {};
        let result = new CatalogItemDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["productCode"] = this.productCode;
        data["productName"] = this.productName;
        data["type"] = this.type;
        data["stock"] = this.stock ? this.stock.toJSON() : <any>undefined;
        data["price"] = this.price ? this.price.toJSON() : <any>undefined;
        data["properties"] = this.properties ? this.properties.toJSON() : <any>undefined;
        data["location"] = this.location;
        data["minimalOrderQuantity"] = this.minimalOrderQuantity;
        data["minimalManufactureQuantity"] = this.minimalManufactureQuantity;
        return data;
    }
}

export interface ICatalogItemDto {
    productCode?: string;
    productName?: string;
    type?: ProductType;
    stock?: StockDto;
    price?: PriceDto;
    properties?: PropertiesDto;
    location?: string;
    minimalOrderQuantity?: string;
    minimalManufactureQuantity?: number;
}

export enum ProductType {
    UNDEFINED = 0,
    Goods = 1,
    Material = 3,
    SemiProduct = 7,
    Product = 8,
}

export class StockDto implements IStockDto {
    eshop?: number;
    erp?: number;
    transport?: number;
    reserve?: number;
    available?: number;

    constructor(data?: IStockDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.eshop = _data["eshop"];
            this.erp = _data["erp"];
            this.transport = _data["transport"];
            this.reserve = _data["reserve"];
            this.available = _data["available"];
        }
    }

    static fromJS(data: any): StockDto {
        data = typeof data === 'object' ? data : {};
        let result = new StockDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["eshop"] = this.eshop;
        data["erp"] = this.erp;
        data["transport"] = this.transport;
        data["reserve"] = this.reserve;
        data["available"] = this.available;
        return data;
    }
}

export interface IStockDto {
    eshop?: number;
    erp?: number;
    transport?: number;
    reserve?: number;
    available?: number;
}

export class PriceDto implements IPriceDto {
    currentSellingPrice?: number | undefined;
    currentPurchasePrice?: number | undefined;
    sellingPriceWithVat?: number | undefined;
    purchasePriceWithVat?: number | undefined;
    eshopPrice?: EshopPriceDto | undefined;
    erpPrice?: ErpPriceDto | undefined;

    constructor(data?: IPriceDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.currentSellingPrice = _data["currentSellingPrice"];
            this.currentPurchasePrice = _data["currentPurchasePrice"];
            this.sellingPriceWithVat = _data["sellingPriceWithVat"];
            this.purchasePriceWithVat = _data["purchasePriceWithVat"];
            this.eshopPrice = _data["eshopPrice"] ? EshopPriceDto.fromJS(_data["eshopPrice"]) : <any>undefined;
            this.erpPrice = _data["erpPrice"] ? ErpPriceDto.fromJS(_data["erpPrice"]) : <any>undefined;
        }
    }

    static fromJS(data: any): PriceDto {
        data = typeof data === 'object' ? data : {};
        let result = new PriceDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["currentSellingPrice"] = this.currentSellingPrice;
        data["currentPurchasePrice"] = this.currentPurchasePrice;
        data["sellingPriceWithVat"] = this.sellingPriceWithVat;
        data["purchasePriceWithVat"] = this.purchasePriceWithVat;
        data["eshopPrice"] = this.eshopPrice ? this.eshopPrice.toJSON() : <any>undefined;
        data["erpPrice"] = this.erpPrice ? this.erpPrice.toJSON() : <any>undefined;
        return data;
    }
}

export interface IPriceDto {
    currentSellingPrice?: number | undefined;
    currentPurchasePrice?: number | undefined;
    sellingPriceWithVat?: number | undefined;
    purchasePriceWithVat?: number | undefined;
    eshopPrice?: EshopPriceDto | undefined;
    erpPrice?: ErpPriceDto | undefined;
}

export class EshopPriceDto implements IEshopPriceDto {
    priceWithVat?: number;
    purchasePrice?: number;

    constructor(data?: IEshopPriceDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.priceWithVat = _data["priceWithVat"];
            this.purchasePrice = _data["purchasePrice"];
        }
    }

    static fromJS(data: any): EshopPriceDto {
        data = typeof data === 'object' ? data : {};
        let result = new EshopPriceDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["priceWithVat"] = this.priceWithVat;
        data["purchasePrice"] = this.purchasePrice;
        return data;
    }
}

export interface IEshopPriceDto {
    priceWithVat?: number;
    purchasePrice?: number;
}

export class ErpPriceDto implements IErpPriceDto {
    priceWithoutVat?: number;
    priceWithVat?: number;
    purchasePrice?: number;
    purchasePriceWithVat?: number;

    constructor(data?: IErpPriceDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.priceWithoutVat = _data["priceWithoutVat"];
            this.priceWithVat = _data["priceWithVat"];
            this.purchasePrice = _data["purchasePrice"];
            this.purchasePriceWithVat = _data["purchasePriceWithVat"];
        }
    }

    static fromJS(data: any): ErpPriceDto {
        data = typeof data === 'object' ? data : {};
        let result = new ErpPriceDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["priceWithoutVat"] = this.priceWithoutVat;
        data["priceWithVat"] = this.priceWithVat;
        data["purchasePrice"] = this.purchasePrice;
        data["purchasePriceWithVat"] = this.purchasePriceWithVat;
        return data;
    }
}

export interface IErpPriceDto {
    priceWithoutVat?: number;
    priceWithVat?: number;
    purchasePrice?: number;
    purchasePriceWithVat?: number;
}

export class PropertiesDto implements IPropertiesDto {
    optimalStockDaysSetup?: number;
    stockMinSetup?: number;
    batchSize?: number;
    seasonMonths?: number[];

    constructor(data?: IPropertiesDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.optimalStockDaysSetup = _data["optimalStockDaysSetup"];
            this.stockMinSetup = _data["stockMinSetup"];
            this.batchSize = _data["batchSize"];
            if (Array.isArray(_data["seasonMonths"])) {
                this.seasonMonths = [] as any;
                for (let item of _data["seasonMonths"])
                    this.seasonMonths!.push(item);
            }
        }
    }

    static fromJS(data: any): PropertiesDto {
        data = typeof data === 'object' ? data : {};
        let result = new PropertiesDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["optimalStockDaysSetup"] = this.optimalStockDaysSetup;
        data["stockMinSetup"] = this.stockMinSetup;
        data["batchSize"] = this.batchSize;
        if (Array.isArray(this.seasonMonths)) {
            data["seasonMonths"] = [];
            for (let item of this.seasonMonths)
                data["seasonMonths"].push(item);
        }
        return data;
    }
}

export interface IPropertiesDto {
    optimalStockDaysSetup?: number;
    stockMinSetup?: number;
    batchSize?: number;
    seasonMonths?: number[];
}

export class GetCatalogDetailResponse implements IGetCatalogDetailResponse {
    item?: CatalogItemDto;
    historicalData?: CatalogHistoricalDataDto;

    constructor(data?: IGetCatalogDetailResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.item = _data["item"] ? CatalogItemDto.fromJS(_data["item"]) : <any>undefined;
            this.historicalData = _data["historicalData"] ? CatalogHistoricalDataDto.fromJS(_data["historicalData"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetCatalogDetailResponse {
        data = typeof data === 'object' ? data : {};
        let result = new GetCatalogDetailResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["item"] = this.item ? this.item.toJSON() : <any>undefined;
        data["historicalData"] = this.historicalData ? this.historicalData.toJSON() : <any>undefined;
        return data;
    }
}

export interface IGetCatalogDetailResponse {
    item?: CatalogItemDto;
    historicalData?: CatalogHistoricalDataDto;
}

export class CatalogHistoricalDataDto implements ICatalogHistoricalDataDto {
    salesHistory?: CatalogSalesRecordDto[];
    purchaseHistory?: CatalogPurchaseRecordDto[];
    consumedHistory?: CatalogConsumedRecordDto[];

    constructor(data?: ICatalogHistoricalDataDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["salesHistory"])) {
                this.salesHistory = [] as any;
                for (let item of _data["salesHistory"])
                    this.salesHistory!.push(CatalogSalesRecordDto.fromJS(item));
            }
            if (Array.isArray(_data["purchaseHistory"])) {
                this.purchaseHistory = [] as any;
                for (let item of _data["purchaseHistory"])
                    this.purchaseHistory!.push(CatalogPurchaseRecordDto.fromJS(item));
            }
            if (Array.isArray(_data["consumedHistory"])) {
                this.consumedHistory = [] as any;
                for (let item of _data["consumedHistory"])
                    this.consumedHistory!.push(CatalogConsumedRecordDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CatalogHistoricalDataDto {
        data = typeof data === 'object' ? data : {};
        let result = new CatalogHistoricalDataDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.salesHistory)) {
            data["salesHistory"] = [];
            for (let item of this.salesHistory)
                data["salesHistory"].push(item.toJSON());
        }
        if (Array.isArray(this.purchaseHistory)) {
            data["purchaseHistory"] = [];
            for (let item of this.purchaseHistory)
                data["purchaseHistory"].push(item.toJSON());
        }
        if (Array.isArray(this.consumedHistory)) {
            data["consumedHistory"] = [];
            for (let item of this.consumedHistory)
                data["consumedHistory"].push(item.toJSON());
        }
        return data;
    }
}

export interface ICatalogHistoricalDataDto {
    salesHistory?: CatalogSalesRecordDto[];
    purchaseHistory?: CatalogPurchaseRecordDto[];
    consumedHistory?: CatalogConsumedRecordDto[];
}

export class CatalogSalesRecordDto implements ICatalogSalesRecordDto {
    year?: number;
    month?: number;
    amountTotal?: number;
    amountB2B?: number;
    amountB2C?: number;
    sumTotal?: number;
    sumB2B?: number;
    sumB2C?: number;

    constructor(data?: ICatalogSalesRecordDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.year = _data["year"];
            this.month = _data["month"];
            this.amountTotal = _data["amountTotal"];
            this.amountB2B = _data["amountB2B"];
            this.amountB2C = _data["amountB2C"];
            this.sumTotal = _data["sumTotal"];
            this.sumB2B = _data["sumB2B"];
            this.sumB2C = _data["sumB2C"];
        }
    }

    static fromJS(data: any): CatalogSalesRecordDto {
        data = typeof data === 'object' ? data : {};
        let result = new CatalogSalesRecordDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["year"] = this.year;
        data["month"] = this.month;
        data["amountTotal"] = this.amountTotal;
        data["amountB2B"] = this.amountB2B;
        data["amountB2C"] = this.amountB2C;
        data["sumTotal"] = this.sumTotal;
        data["sumB2B"] = this.sumB2B;
        data["sumB2C"] = this.sumB2C;
        return data;
    }
}

export interface ICatalogSalesRecordDto {
    year?: number;
    month?: number;
    amountTotal?: number;
    amountB2B?: number;
    amountB2C?: number;
    sumTotal?: number;
    sumB2B?: number;
    sumB2C?: number;
}

export class CatalogPurchaseRecordDto implements ICatalogPurchaseRecordDto {
    year?: number;
    month?: number;
    supplierName?: string;
    amount?: number;
    pricePerPiece?: number;
    priceTotal?: number;
    documentNumber?: string;

    constructor(data?: ICatalogPurchaseRecordDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.year = _data["year"];
            this.month = _data["month"];
            this.supplierName = _data["supplierName"];
            this.amount = _data["amount"];
            this.pricePerPiece = _data["pricePerPiece"];
            this.priceTotal = _data["priceTotal"];
            this.documentNumber = _data["documentNumber"];
        }
    }

    static fromJS(data: any): CatalogPurchaseRecordDto {
        data = typeof data === 'object' ? data : {};
        let result = new CatalogPurchaseRecordDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["year"] = this.year;
        data["month"] = this.month;
        data["supplierName"] = this.supplierName;
        data["amount"] = this.amount;
        data["pricePerPiece"] = this.pricePerPiece;
        data["priceTotal"] = this.priceTotal;
        data["documentNumber"] = this.documentNumber;
        return data;
    }
}

export interface ICatalogPurchaseRecordDto {
    year?: number;
    month?: number;
    supplierName?: string;
    amount?: number;
    pricePerPiece?: number;
    priceTotal?: number;
    documentNumber?: string;
}

export class CatalogConsumedRecordDto implements ICatalogConsumedRecordDto {
    year?: number;
    month?: number;
    amount?: number;
    productName?: string;

    constructor(data?: ICatalogConsumedRecordDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.year = _data["year"];
            this.month = _data["month"];
            this.amount = _data["amount"];
            this.productName = _data["productName"];
        }
    }

    static fromJS(data: any): CatalogConsumedRecordDto {
        data = typeof data === 'object' ? data : {};
        let result = new CatalogConsumedRecordDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["year"] = this.year;
        data["month"] = this.month;
        data["amount"] = this.amount;
        data["productName"] = this.productName;
        return data;
    }
}

export interface ICatalogConsumedRecordDto {
    year?: number;
    month?: number;
    amount?: number;
    productName?: string;
}

export class GetCatalogDebugPricesResponse implements IGetCatalogDebugPricesResponse {
    items?: CatalogDebugPriceItemDto[];
    totalProductsChecked?: number;
    productsWithEshopPrice?: number;
    productsWithErpPrice?: number;
    productsWithBothPrices?: number;
    productsWithNoPrices?: number;

    constructor(data?: IGetCatalogDebugPricesResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(CatalogDebugPriceItemDto.fromJS(item));
            }
            this.totalProductsChecked = _data["totalProductsChecked"];
            this.productsWithEshopPrice = _data["productsWithEshopPrice"];
            this.productsWithErpPrice = _data["productsWithErpPrice"];
            this.productsWithBothPrices = _data["productsWithBothPrices"];
            this.productsWithNoPrices = _data["productsWithNoPrices"];
        }
    }

    static fromJS(data: any): GetCatalogDebugPricesResponse {
        data = typeof data === 'object' ? data : {};
        let result = new GetCatalogDebugPricesResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["totalProductsChecked"] = this.totalProductsChecked;
        data["productsWithEshopPrice"] = this.productsWithEshopPrice;
        data["productsWithErpPrice"] = this.productsWithErpPrice;
        data["productsWithBothPrices"] = this.productsWithBothPrices;
        data["productsWithNoPrices"] = this.productsWithNoPrices;
        return data;
    }
}

export interface IGetCatalogDebugPricesResponse {
    items?: CatalogDebugPriceItemDto[];
    totalProductsChecked?: number;
    productsWithEshopPrice?: number;
    productsWithErpPrice?: number;
    productsWithBothPrices?: number;
    productsWithNoPrices?: number;
}

export class CatalogDebugPriceItemDto implements ICatalogDebugPriceItemDto {
    productCode?: string;
    productName?: string;
    hasEshopPrice?: boolean;
    hasErpPrice?: boolean;
    eshopPriceWithVat?: number | undefined;
    eshopPurchasePrice?: number | undefined;
    erpPriceWithVat?: number | undefined;
    erpPriceWithoutVat?: number | undefined;
    erpPurchasePrice?: number | undefined;
    erpPurchasePriceWithVat?: number | undefined;
    currentSellingPrice?: number | undefined;
    currentPurchasePrice?: number | undefined;
    sellingPriceWithVat?: number | undefined;
    purchasePriceWithVat?: number | undefined;

    constructor(data?: ICatalogDebugPriceItemDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.productCode = _data["productCode"];
            this.productName = _data["productName"];
            this.hasEshopPrice = _data["hasEshopPrice"];
            this.hasErpPrice = _data["hasErpPrice"];
            this.eshopPriceWithVat = _data["eshopPriceWithVat"];
            this.eshopPurchasePrice = _data["eshopPurchasePrice"];
            this.erpPriceWithVat = _data["erpPriceWithVat"];
            this.erpPriceWithoutVat = _data["erpPriceWithoutVat"];
            this.erpPurchasePrice = _data["erpPurchasePrice"];
            this.erpPurchasePriceWithVat = _data["erpPurchasePriceWithVat"];
            this.currentSellingPrice = _data["currentSellingPrice"];
            this.currentPurchasePrice = _data["currentPurchasePrice"];
            this.sellingPriceWithVat = _data["sellingPriceWithVat"];
            this.purchasePriceWithVat = _data["purchasePriceWithVat"];
        }
    }

    static fromJS(data: any): CatalogDebugPriceItemDto {
        data = typeof data === 'object' ? data : {};
        let result = new CatalogDebugPriceItemDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["productCode"] = this.productCode;
        data["productName"] = this.productName;
        data["hasEshopPrice"] = this.hasEshopPrice;
        data["hasErpPrice"] = this.hasErpPrice;
        data["eshopPriceWithVat"] = this.eshopPriceWithVat;
        data["eshopPurchasePrice"] = this.eshopPurchasePrice;
        data["erpPriceWithVat"] = this.erpPriceWithVat;
        data["erpPriceWithoutVat"] = this.erpPriceWithoutVat;
        data["erpPurchasePrice"] = this.erpPurchasePrice;
        data["erpPurchasePriceWithVat"] = this.erpPurchasePriceWithVat;
        data["currentSellingPrice"] = this.currentSellingPrice;
        data["currentPurchasePrice"] = this.currentPurchasePrice;
        data["sellingPriceWithVat"] = this.sellingPriceWithVat;
        data["purchasePriceWithVat"] = this.purchasePriceWithVat;
        return data;
    }
}

export interface ICatalogDebugPriceItemDto {
    productCode?: string;
    productName?: string;
    hasEshopPrice?: boolean;
    hasErpPrice?: boolean;
    eshopPriceWithVat?: number | undefined;
    eshopPurchasePrice?: number | undefined;
    erpPriceWithVat?: number | undefined;
    erpPriceWithoutVat?: number | undefined;
    erpPurchasePrice?: number | undefined;
    erpPurchasePriceWithVat?: number | undefined;
    currentSellingPrice?: number | undefined;
    currentPurchasePrice?: number | undefined;
    sellingPriceWithVat?: number | undefined;
    purchasePriceWithVat?: number | undefined;
}

export class GetConfigurationResponse implements IGetConfigurationResponse {
    version?: string;
    environment?: string;
    useMockAuth?: boolean;
    timestamp?: Date;

    constructor(data?: IGetConfigurationResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.version = _data["version"];
            this.environment = _data["environment"];
            this.useMockAuth = _data["useMockAuth"];
            this.timestamp = _data["timestamp"] ? new Date(_data["timestamp"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): GetConfigurationResponse {
        data = typeof data === 'object' ? data : {};
        let result = new GetConfigurationResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["version"] = this.version;
        data["environment"] = this.environment;
        data["useMockAuth"] = this.useMockAuth;
        data["timestamp"] = this.timestamp ? this.timestamp.toISOString() : <any>undefined;
        return data;
    }
}

export interface IGetConfigurationResponse {
    version?: string;
    environment?: string;
    useMockAuth?: boolean;
    timestamp?: Date;
}

export class GetWeatherForecastResponse implements IGetWeatherForecastResponse {
    date?: Date;
    temperatureC?: number;
    temperatureF?: number;
    summary?: string | undefined;

    constructor(data?: IGetWeatherForecastResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.date = _data["date"] ? new Date(_data["date"].toString()) : <any>undefined;
            this.temperatureC = _data["temperatureC"];
            this.temperatureF = _data["temperatureF"];
            this.summary = _data["summary"];
        }
    }

    static fromJS(data: any): GetWeatherForecastResponse {
        data = typeof data === 'object' ? data : {};
        let result = new GetWeatherForecastResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["date"] = this.date ? this.date.toISOString() : <any>undefined;
        data["temperatureC"] = this.temperatureC;
        data["temperatureF"] = this.temperatureF;
        data["summary"] = this.summary;
        return data;
    }
}

export interface IGetWeatherForecastResponse {
    date?: Date;
    temperatureC?: number;
    temperatureF?: number;
    summary?: string | undefined;
}

export interface FileResponse {
    data: Blob;
    status: number;
    fileName?: string;
    headers?: { [name: string]: any };
}

export class SwaggerException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isSwaggerException = true;

    static isSwaggerException(obj: any): obj is SwaggerException {
        return obj.isSwaggerException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new SwaggerException(message, status, response, headers, null);
}